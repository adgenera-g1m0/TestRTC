
TestRTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b8  080063b8  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080063c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000023c  080065fc  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080065fc  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c06a  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020fd  00000000  00000000  0002c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002edf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fee  00000000  00000000  0002f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cf5  00000000  00000000  000446e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d3ef  00000000  00000000  0004e3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb7ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  000cb848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fd8 	.word	0x08005fd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	08005fd8 	.word	0x08005fd8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_ldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d115      	bne.n	8000448 <__aeabi_ldivmod+0x30>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d113      	bne.n	8000448 <__aeabi_ldivmod+0x30>
 8000420:	2900      	cmp	r1, #0
 8000422:	db06      	blt.n	8000432 <__aeabi_ldivmod+0x1a>
 8000424:	dc01      	bgt.n	800042a <__aeabi_ldivmod+0x12>
 8000426:	2800      	cmp	r0, #0
 8000428:	d006      	beq.n	8000438 <__aeabi_ldivmod+0x20>
 800042a:	2000      	movs	r0, #0
 800042c:	43c0      	mvns	r0, r0
 800042e:	0841      	lsrs	r1, r0, #1
 8000430:	e002      	b.n	8000438 <__aeabi_ldivmod+0x20>
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0609      	lsls	r1, r1, #24
 8000436:	2000      	movs	r0, #0
 8000438:	b407      	push	{r0, r1, r2}
 800043a:	4802      	ldr	r0, [pc, #8]	; (8000444 <__aeabi_ldivmod+0x2c>)
 800043c:	a101      	add	r1, pc, #4	; (adr r1, 8000444 <__aeabi_ldivmod+0x2c>)
 800043e:	1840      	adds	r0, r0, r1
 8000440:	9002      	str	r0, [sp, #8]
 8000442:	bd03      	pop	{r0, r1, pc}
 8000444:	ffffffd1 	.word	0xffffffd1
 8000448:	b403      	push	{r0, r1}
 800044a:	4668      	mov	r0, sp
 800044c:	b501      	push	{r0, lr}
 800044e:	9802      	ldr	r0, [sp, #8]
 8000450:	f000 f8e8 	bl	8000624 <__gnu_ldivmod_helper>
 8000454:	9b01      	ldr	r3, [sp, #4]
 8000456:	469e      	mov	lr, r3
 8000458:	b002      	add	sp, #8
 800045a:	bc0c      	pop	{r2, r3}
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_uldivmod>:
 8000460:	2b00      	cmp	r3, #0
 8000462:	d111      	bne.n	8000488 <__aeabi_uldivmod+0x28>
 8000464:	2a00      	cmp	r2, #0
 8000466:	d10f      	bne.n	8000488 <__aeabi_uldivmod+0x28>
 8000468:	2900      	cmp	r1, #0
 800046a:	d100      	bne.n	800046e <__aeabi_uldivmod+0xe>
 800046c:	2800      	cmp	r0, #0
 800046e:	d002      	beq.n	8000476 <__aeabi_uldivmod+0x16>
 8000470:	2100      	movs	r1, #0
 8000472:	43c9      	mvns	r1, r1
 8000474:	1c08      	adds	r0, r1, #0
 8000476:	b407      	push	{r0, r1, r2}
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <__aeabi_uldivmod+0x24>)
 800047a:	a102      	add	r1, pc, #8	; (adr r1, 8000484 <__aeabi_uldivmod+0x24>)
 800047c:	1840      	adds	r0, r0, r1
 800047e:	9002      	str	r0, [sp, #8]
 8000480:	bd03      	pop	{r0, r1, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	ffffff91 	.word	0xffffff91
 8000488:	b403      	push	{r0, r1}
 800048a:	4668      	mov	r0, sp
 800048c:	b501      	push	{r0, lr}
 800048e:	9802      	ldr	r0, [sp, #8]
 8000490:	f000 f806 	bl	80004a0 <__udivmoddi4>
 8000494:	9b01      	ldr	r3, [sp, #4]
 8000496:	469e      	mov	lr, r3
 8000498:	b002      	add	sp, #8
 800049a:	bc0c      	pop	{r2, r3}
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__udivmoddi4>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	b5c0      	push	{r6, r7, lr}
 80004aa:	0004      	movs	r4, r0
 80004ac:	b082      	sub	sp, #8
 80004ae:	000d      	movs	r5, r1
 80004b0:	4691      	mov	r9, r2
 80004b2:	4698      	mov	r8, r3
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d82f      	bhi.n	8000518 <__udivmoddi4+0x78>
 80004b8:	d02c      	beq.n	8000514 <__udivmoddi4+0x74>
 80004ba:	4641      	mov	r1, r8
 80004bc:	4648      	mov	r0, r9
 80004be:	f000 f8cd 	bl	800065c <__clzdi2>
 80004c2:	0029      	movs	r1, r5
 80004c4:	0006      	movs	r6, r0
 80004c6:	0020      	movs	r0, r4
 80004c8:	f000 f8c8 	bl	800065c <__clzdi2>
 80004cc:	1a33      	subs	r3, r6, r0
 80004ce:	469c      	mov	ip, r3
 80004d0:	3b20      	subs	r3, #32
 80004d2:	469a      	mov	sl, r3
 80004d4:	d500      	bpl.n	80004d8 <__udivmoddi4+0x38>
 80004d6:	e076      	b.n	80005c6 <__udivmoddi4+0x126>
 80004d8:	464b      	mov	r3, r9
 80004da:	4652      	mov	r2, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001f      	movs	r7, r3
 80004e0:	464b      	mov	r3, r9
 80004e2:	4662      	mov	r2, ip
 80004e4:	4093      	lsls	r3, r2
 80004e6:	001e      	movs	r6, r3
 80004e8:	42af      	cmp	r7, r5
 80004ea:	d828      	bhi.n	800053e <__udivmoddi4+0x9e>
 80004ec:	d025      	beq.n	800053a <__udivmoddi4+0x9a>
 80004ee:	4653      	mov	r3, sl
 80004f0:	1ba4      	subs	r4, r4, r6
 80004f2:	41bd      	sbcs	r5, r7
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	da00      	bge.n	80004fa <__udivmoddi4+0x5a>
 80004f8:	e07b      	b.n	80005f2 <__udivmoddi4+0x152>
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	4652      	mov	r2, sl
 8000506:	4093      	lsls	r3, r2
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	4662      	mov	r2, ip
 800050e:	4093      	lsls	r3, r2
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	e018      	b.n	8000546 <__udivmoddi4+0xa6>
 8000514:	4282      	cmp	r2, r0
 8000516:	d9d0      	bls.n	80004ba <__udivmoddi4+0x1a>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <__udivmoddi4+0x8a>
 8000526:	601c      	str	r4, [r3, #0]
 8000528:	605d      	str	r5, [r3, #4]
 800052a:	9800      	ldr	r0, [sp, #0]
 800052c:	9901      	ldr	r1, [sp, #4]
 800052e:	b002      	add	sp, #8
 8000530:	bc1c      	pop	{r2, r3, r4}
 8000532:	4690      	mov	r8, r2
 8000534:	4699      	mov	r9, r3
 8000536:	46a2      	mov	sl, r4
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	42a3      	cmp	r3, r4
 800053c:	d9d7      	bls.n	80004ee <__udivmoddi4+0x4e>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	4663      	mov	r3, ip
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0e9      	beq.n	8000520 <__udivmoddi4+0x80>
 800054c:	07fb      	lsls	r3, r7, #31
 800054e:	4698      	mov	r8, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0872      	lsrs	r2, r6, #1
 8000554:	430a      	orrs	r2, r1
 8000556:	087b      	lsrs	r3, r7, #1
 8000558:	4666      	mov	r6, ip
 800055a:	e00e      	b.n	800057a <__udivmoddi4+0xda>
 800055c:	42ab      	cmp	r3, r5
 800055e:	d101      	bne.n	8000564 <__udivmoddi4+0xc4>
 8000560:	42a2      	cmp	r2, r4
 8000562:	d80c      	bhi.n	800057e <__udivmoddi4+0xde>
 8000564:	1aa4      	subs	r4, r4, r2
 8000566:	419d      	sbcs	r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2100      	movs	r1, #0
 8000570:	3e01      	subs	r6, #1
 8000572:	1824      	adds	r4, r4, r0
 8000574:	414d      	adcs	r5, r1
 8000576:	2e00      	cmp	r6, #0
 8000578:	d006      	beq.n	8000588 <__udivmoddi4+0xe8>
 800057a:	42ab      	cmp	r3, r5
 800057c:	d9ee      	bls.n	800055c <__udivmoddi4+0xbc>
 800057e:	3e01      	subs	r6, #1
 8000580:	1924      	adds	r4, r4, r4
 8000582:	416d      	adcs	r5, r5
 8000584:	2e00      	cmp	r6, #0
 8000586:	d1f8      	bne.n	800057a <__udivmoddi4+0xda>
 8000588:	9800      	ldr	r0, [sp, #0]
 800058a:	9901      	ldr	r1, [sp, #4]
 800058c:	4653      	mov	r3, sl
 800058e:	1900      	adds	r0, r0, r4
 8000590:	4169      	adcs	r1, r5
 8000592:	2b00      	cmp	r3, #0
 8000594:	db23      	blt.n	80005de <__udivmoddi4+0x13e>
 8000596:	002b      	movs	r3, r5
 8000598:	4652      	mov	r2, sl
 800059a:	40d3      	lsrs	r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4664      	mov	r4, ip
 80005a0:	40e2      	lsrs	r2, r4
 80005a2:	001c      	movs	r4, r3
 80005a4:	4653      	mov	r3, sl
 80005a6:	0015      	movs	r5, r2
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	db2d      	blt.n	8000608 <__udivmoddi4+0x168>
 80005ac:	0026      	movs	r6, r4
 80005ae:	4657      	mov	r7, sl
 80005b0:	40be      	lsls	r6, r7
 80005b2:	0033      	movs	r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	4667      	mov	r7, ip
 80005b8:	40be      	lsls	r6, r7
 80005ba:	0032      	movs	r2, r6
 80005bc:	1a80      	subs	r0, r0, r2
 80005be:	4199      	sbcs	r1, r3
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	e7ac      	b.n	8000520 <__udivmoddi4+0x80>
 80005c6:	4662      	mov	r2, ip
 80005c8:	2320      	movs	r3, #32
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	464a      	mov	r2, r9
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	4661      	mov	r1, ip
 80005d2:	0013      	movs	r3, r2
 80005d4:	4642      	mov	r2, r8
 80005d6:	408a      	lsls	r2, r1
 80005d8:	0017      	movs	r7, r2
 80005da:	431f      	orrs	r7, r3
 80005dc:	e780      	b.n	80004e0 <__udivmoddi4+0x40>
 80005de:	4662      	mov	r2, ip
 80005e0:	2320      	movs	r3, #32
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	002a      	movs	r2, r5
 80005e6:	4666      	mov	r6, ip
 80005e8:	409a      	lsls	r2, r3
 80005ea:	0023      	movs	r3, r4
 80005ec:	40f3      	lsrs	r3, r6
 80005ee:	4313      	orrs	r3, r2
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0xfc>
 80005f2:	4662      	mov	r2, ip
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e780      	b.n	800050a <__udivmoddi4+0x6a>
 8000608:	2320      	movs	r3, #32
 800060a:	4662      	mov	r2, ip
 800060c:	0026      	movs	r6, r4
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	40de      	lsrs	r6, r3
 8000612:	002f      	movs	r7, r5
 8000614:	46b0      	mov	r8, r6
 8000616:	4666      	mov	r6, ip
 8000618:	40b7      	lsls	r7, r6
 800061a:	4646      	mov	r6, r8
 800061c:	003b      	movs	r3, r7
 800061e:	4333      	orrs	r3, r6
 8000620:	e7c8      	b.n	80005b4 <__udivmoddi4+0x114>
 8000622:	46c0      	nop			; (mov r8, r8)

08000624 <__gnu_ldivmod_helper>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b083      	sub	sp, #12
 8000628:	0016      	movs	r6, r2
 800062a:	001f      	movs	r7, r3
 800062c:	9000      	str	r0, [sp, #0]
 800062e:	9101      	str	r1, [sp, #4]
 8000630:	f000 f84a 	bl	80006c8 <__divdi3>
 8000634:	0004      	movs	r4, r0
 8000636:	000d      	movs	r5, r1
 8000638:	0002      	movs	r2, r0
 800063a:	000b      	movs	r3, r1
 800063c:	0030      	movs	r0, r6
 800063e:	0039      	movs	r1, r7
 8000640:	f000 f818 	bl	8000674 <__aeabi_lmul>
 8000644:	9a00      	ldr	r2, [sp, #0]
 8000646:	9b01      	ldr	r3, [sp, #4]
 8000648:	1a12      	subs	r2, r2, r0
 800064a:	418b      	sbcs	r3, r1
 800064c:	9908      	ldr	r1, [sp, #32]
 800064e:	0020      	movs	r0, r4
 8000650:	600a      	str	r2, [r1, #0]
 8000652:	604b      	str	r3, [r1, #4]
 8000654:	0029      	movs	r1, r5
 8000656:	b003      	add	sp, #12
 8000658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)

0800065c <__clzdi2>:
 800065c:	b510      	push	{r4, lr}
 800065e:	2900      	cmp	r1, #0
 8000660:	d103      	bne.n	800066a <__clzdi2+0xe>
 8000662:	f000 f909 	bl	8000878 <__clzsi2>
 8000666:	3020      	adds	r0, #32
 8000668:	e002      	b.n	8000670 <__clzdi2+0x14>
 800066a:	1c08      	adds	r0, r1, #0
 800066c:	f000 f904 	bl	8000878 <__clzsi2>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	46c0      	nop			; (mov r8, r8)

08000674 <__aeabi_lmul>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	46ce      	mov	lr, r9
 8000678:	4647      	mov	r7, r8
 800067a:	0415      	lsls	r5, r2, #16
 800067c:	0c2d      	lsrs	r5, r5, #16
 800067e:	002e      	movs	r6, r5
 8000680:	b580      	push	{r7, lr}
 8000682:	0407      	lsls	r7, r0, #16
 8000684:	0c14      	lsrs	r4, r2, #16
 8000686:	0c3f      	lsrs	r7, r7, #16
 8000688:	4699      	mov	r9, r3
 800068a:	0c03      	lsrs	r3, r0, #16
 800068c:	437e      	muls	r6, r7
 800068e:	435d      	muls	r5, r3
 8000690:	4367      	muls	r7, r4
 8000692:	4363      	muls	r3, r4
 8000694:	197f      	adds	r7, r7, r5
 8000696:	0c34      	lsrs	r4, r6, #16
 8000698:	19e4      	adds	r4, r4, r7
 800069a:	469c      	mov	ip, r3
 800069c:	42a5      	cmp	r5, r4
 800069e:	d903      	bls.n	80006a8 <__aeabi_lmul+0x34>
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	025b      	lsls	r3, r3, #9
 80006a4:	4698      	mov	r8, r3
 80006a6:	44c4      	add	ip, r8
 80006a8:	464b      	mov	r3, r9
 80006aa:	4343      	muls	r3, r0
 80006ac:	4351      	muls	r1, r2
 80006ae:	0c25      	lsrs	r5, r4, #16
 80006b0:	0436      	lsls	r6, r6, #16
 80006b2:	4465      	add	r5, ip
 80006b4:	0c36      	lsrs	r6, r6, #16
 80006b6:	0424      	lsls	r4, r4, #16
 80006b8:	19a4      	adds	r4, r4, r6
 80006ba:	195b      	adds	r3, r3, r5
 80006bc:	1859      	adds	r1, r3, r1
 80006be:	0020      	movs	r0, r4
 80006c0:	bc0c      	pop	{r2, r3}
 80006c2:	4690      	mov	r8, r2
 80006c4:	4699      	mov	r9, r3
 80006c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006c8 <__divdi3>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	464e      	mov	r6, r9
 80006cc:	4657      	mov	r7, sl
 80006ce:	46de      	mov	lr, fp
 80006d0:	4645      	mov	r5, r8
 80006d2:	b5e0      	push	{r5, r6, r7, lr}
 80006d4:	000f      	movs	r7, r1
 80006d6:	2100      	movs	r1, #0
 80006d8:	b083      	sub	sp, #12
 80006da:	0006      	movs	r6, r0
 80006dc:	4689      	mov	r9, r1
 80006de:	2f00      	cmp	r7, #0
 80006e0:	da06      	bge.n	80006f0 <__divdi3+0x28>
 80006e2:	0039      	movs	r1, r7
 80006e4:	2700      	movs	r7, #0
 80006e6:	4246      	negs	r6, r0
 80006e8:	418f      	sbcs	r7, r1
 80006ea:	2101      	movs	r1, #1
 80006ec:	4249      	negs	r1, r1
 80006ee:	4689      	mov	r9, r1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da07      	bge.n	8000704 <__divdi3+0x3c>
 80006f4:	4649      	mov	r1, r9
 80006f6:	43c9      	mvns	r1, r1
 80006f8:	0010      	movs	r0, r2
 80006fa:	4689      	mov	r9, r1
 80006fc:	0019      	movs	r1, r3
 80006fe:	2300      	movs	r3, #0
 8000700:	4242      	negs	r2, r0
 8000702:	418b      	sbcs	r3, r1
 8000704:	0034      	movs	r4, r6
 8000706:	003d      	movs	r5, r7
 8000708:	4692      	mov	sl, r2
 800070a:	4698      	mov	r8, r3
 800070c:	42bb      	cmp	r3, r7
 800070e:	d869      	bhi.n	80007e4 <__divdi3+0x11c>
 8000710:	d066      	beq.n	80007e0 <__divdi3+0x118>
 8000712:	4641      	mov	r1, r8
 8000714:	4650      	mov	r0, sl
 8000716:	f7ff ffa1 	bl	800065c <__clzdi2>
 800071a:	4683      	mov	fp, r0
 800071c:	0039      	movs	r1, r7
 800071e:	0030      	movs	r0, r6
 8000720:	f7ff ff9c 	bl	800065c <__clzdi2>
 8000724:	465b      	mov	r3, fp
 8000726:	1a1b      	subs	r3, r3, r0
 8000728:	469c      	mov	ip, r3
 800072a:	3b20      	subs	r3, #32
 800072c:	469b      	mov	fp, r3
 800072e:	d500      	bpl.n	8000732 <__divdi3+0x6a>
 8000730:	e075      	b.n	800081e <__divdi3+0x156>
 8000732:	4651      	mov	r1, sl
 8000734:	4658      	mov	r0, fp
 8000736:	4081      	lsls	r1, r0
 8000738:	000b      	movs	r3, r1
 800073a:	4651      	mov	r1, sl
 800073c:	4660      	mov	r0, ip
 800073e:	4081      	lsls	r1, r0
 8000740:	000a      	movs	r2, r1
 8000742:	42bb      	cmp	r3, r7
 8000744:	d861      	bhi.n	800080a <__divdi3+0x142>
 8000746:	d05e      	beq.n	8000806 <__divdi3+0x13e>
 8000748:	0034      	movs	r4, r6
 800074a:	003d      	movs	r5, r7
 800074c:	4659      	mov	r1, fp
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	419d      	sbcs	r5, r3
 8000752:	2900      	cmp	r1, #0
 8000754:	da00      	bge.n	8000758 <__divdi3+0x90>
 8000756:	e07a      	b.n	800084e <__divdi3+0x186>
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	2601      	movs	r6, #1
 800075e:	9000      	str	r0, [sp, #0]
 8000760:	9101      	str	r1, [sp, #4]
 8000762:	4659      	mov	r1, fp
 8000764:	408e      	lsls	r6, r1
 8000766:	9601      	str	r6, [sp, #4]
 8000768:	4661      	mov	r1, ip
 800076a:	2601      	movs	r6, #1
 800076c:	408e      	lsls	r6, r1
 800076e:	4661      	mov	r1, ip
 8000770:	9600      	str	r6, [sp, #0]
 8000772:	2900      	cmp	r1, #0
 8000774:	d050      	beq.n	8000818 <__divdi3+0x150>
 8000776:	07d9      	lsls	r1, r3, #31
 8000778:	0856      	lsrs	r6, r2, #1
 800077a:	085f      	lsrs	r7, r3, #1
 800077c:	430e      	orrs	r6, r1
 800077e:	4663      	mov	r3, ip
 8000780:	e00e      	b.n	80007a0 <__divdi3+0xd8>
 8000782:	42af      	cmp	r7, r5
 8000784:	d101      	bne.n	800078a <__divdi3+0xc2>
 8000786:	42a6      	cmp	r6, r4
 8000788:	d80c      	bhi.n	80007a4 <__divdi3+0xdc>
 800078a:	1ba4      	subs	r4, r4, r6
 800078c:	41bd      	sbcs	r5, r7
 800078e:	2101      	movs	r1, #1
 8000790:	1924      	adds	r4, r4, r4
 8000792:	416d      	adcs	r5, r5
 8000794:	2200      	movs	r2, #0
 8000796:	3b01      	subs	r3, #1
 8000798:	1864      	adds	r4, r4, r1
 800079a:	4155      	adcs	r5, r2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <__divdi3+0xe6>
 80007a0:	42af      	cmp	r7, r5
 80007a2:	d9ee      	bls.n	8000782 <__divdi3+0xba>
 80007a4:	3b01      	subs	r3, #1
 80007a6:	1924      	adds	r4, r4, r4
 80007a8:	416d      	adcs	r5, r5
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <__divdi3+0xd8>
 80007ae:	9800      	ldr	r0, [sp, #0]
 80007b0:	9901      	ldr	r1, [sp, #4]
 80007b2:	465b      	mov	r3, fp
 80007b4:	1900      	adds	r0, r0, r4
 80007b6:	4169      	adcs	r1, r5
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db3d      	blt.n	8000838 <__divdi3+0x170>
 80007bc:	002e      	movs	r6, r5
 80007be:	40de      	lsrs	r6, r3
 80007c0:	4663      	mov	r3, ip
 80007c2:	002c      	movs	r4, r5
 80007c4:	40dc      	lsrs	r4, r3
 80007c6:	465b      	mov	r3, fp
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db4b      	blt.n	8000864 <__divdi3+0x19c>
 80007cc:	0034      	movs	r4, r6
 80007ce:	465d      	mov	r5, fp
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	0023      	movs	r3, r4
 80007d4:	4664      	mov	r4, ip
 80007d6:	40a6      	lsls	r6, r4
 80007d8:	0032      	movs	r2, r6
 80007da:	1a80      	subs	r0, r0, r2
 80007dc:	4199      	sbcs	r1, r3
 80007de:	e003      	b.n	80007e8 <__divdi3+0x120>
 80007e0:	42b2      	cmp	r2, r6
 80007e2:	d996      	bls.n	8000712 <__divdi3+0x4a>
 80007e4:	2000      	movs	r0, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	464b      	mov	r3, r9
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <__divdi3+0x130>
 80007ee:	0003      	movs	r3, r0
 80007f0:	000c      	movs	r4, r1
 80007f2:	2100      	movs	r1, #0
 80007f4:	4258      	negs	r0, r3
 80007f6:	41a1      	sbcs	r1, r4
 80007f8:	b003      	add	sp, #12
 80007fa:	bc3c      	pop	{r2, r3, r4, r5}
 80007fc:	4690      	mov	r8, r2
 80007fe:	4699      	mov	r9, r3
 8000800:	46a2      	mov	sl, r4
 8000802:	46ab      	mov	fp, r5
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	42b1      	cmp	r1, r6
 8000808:	d99e      	bls.n	8000748 <__divdi3+0x80>
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	9000      	str	r0, [sp, #0]
 8000810:	9101      	str	r1, [sp, #4]
 8000812:	4661      	mov	r1, ip
 8000814:	2900      	cmp	r1, #0
 8000816:	d1ae      	bne.n	8000776 <__divdi3+0xae>
 8000818:	9800      	ldr	r0, [sp, #0]
 800081a:	9901      	ldr	r1, [sp, #4]
 800081c:	e7e4      	b.n	80007e8 <__divdi3+0x120>
 800081e:	2320      	movs	r3, #32
 8000820:	4662      	mov	r2, ip
 8000822:	4651      	mov	r1, sl
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	40d9      	lsrs	r1, r3
 8000828:	4640      	mov	r0, r8
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	4661      	mov	r1, ip
 800082e:	4088      	lsls	r0, r1
 8000830:	0003      	movs	r3, r0
 8000832:	9900      	ldr	r1, [sp, #0]
 8000834:	430b      	orrs	r3, r1
 8000836:	e780      	b.n	800073a <__divdi3+0x72>
 8000838:	4662      	mov	r2, ip
 800083a:	2320      	movs	r3, #32
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	002a      	movs	r2, r5
 8000840:	409a      	lsls	r2, r3
 8000842:	0026      	movs	r6, r4
 8000844:	0013      	movs	r3, r2
 8000846:	4662      	mov	r2, ip
 8000848:	40d6      	lsrs	r6, r2
 800084a:	431e      	orrs	r6, r3
 800084c:	e7b8      	b.n	80007c0 <__divdi3+0xf8>
 800084e:	4661      	mov	r1, ip
 8000850:	2620      	movs	r6, #32
 8000852:	2701      	movs	r7, #1
 8000854:	1a76      	subs	r6, r6, r1
 8000856:	2000      	movs	r0, #0
 8000858:	2100      	movs	r1, #0
 800085a:	40f7      	lsrs	r7, r6
 800085c:	9000      	str	r0, [sp, #0]
 800085e:	9101      	str	r1, [sp, #4]
 8000860:	9701      	str	r7, [sp, #4]
 8000862:	e781      	b.n	8000768 <__divdi3+0xa0>
 8000864:	4667      	mov	r7, ip
 8000866:	2320      	movs	r3, #32
 8000868:	4662      	mov	r2, ip
 800086a:	0035      	movs	r5, r6
 800086c:	40bc      	lsls	r4, r7
 800086e:	1a9b      	subs	r3, r3, r2
 8000870:	40dd      	lsrs	r5, r3
 8000872:	0023      	movs	r3, r4
 8000874:	432b      	orrs	r3, r5
 8000876:	e7ad      	b.n	80007d4 <__divdi3+0x10c>

08000878 <__clzsi2>:
 8000878:	211c      	movs	r1, #28
 800087a:	2301      	movs	r3, #1
 800087c:	041b      	lsls	r3, r3, #16
 800087e:	4298      	cmp	r0, r3
 8000880:	d301      	bcc.n	8000886 <__clzsi2+0xe>
 8000882:	0c00      	lsrs	r0, r0, #16
 8000884:	3910      	subs	r1, #16
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	4298      	cmp	r0, r3
 800088a:	d301      	bcc.n	8000890 <__clzsi2+0x18>
 800088c:	0a00      	lsrs	r0, r0, #8
 800088e:	3908      	subs	r1, #8
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	4298      	cmp	r0, r3
 8000894:	d301      	bcc.n	800089a <__clzsi2+0x22>
 8000896:	0900      	lsrs	r0, r0, #4
 8000898:	3904      	subs	r1, #4
 800089a:	a202      	add	r2, pc, #8	; (adr r2, 80008a4 <__clzsi2+0x2c>)
 800089c:	5c10      	ldrb	r0, [r2, r0]
 800089e:	1840      	adds	r0, r0, r1
 80008a0:	4770      	bx	lr
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	02020304 	.word	0x02020304
 80008a8:	01010101 	.word	0x01010101
	...

080008b4 <SetOraNew>:

}

#else

void SetOraNew(time_t epochtime){
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	b093      	sub	sp, #76	; 0x4c
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6038      	str	r0, [r7, #0]
 80008bc:	6079      	str	r1, [r7, #4]

	 RTC_TimeTypeDef sTime;
	 RTC_DateTypeDef sDate;

	 memset(&sTime,0,sizeof(RTC_TimeTypeDef));
 80008be:	2434      	movs	r4, #52	; 0x34
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2214      	movs	r2, #20
 80008c4:	2100      	movs	r1, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f003 fc3b 	bl	8004142 <memset>
	 memset(&sDate,0,sizeof(RTC_DateTypeDef));
 80008cc:	2330      	movs	r3, #48	; 0x30
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	2204      	movs	r2, #4
 80008d2:	2100      	movs	r1, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fc34 	bl	8004142 <memset>


	 struct tm time_tm;
	 time_tm = *(localtime(&epochtime));
 80008da:	003b      	movs	r3, r7
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 fb0b 	bl	8003ef8 <localtime>
 80008e2:	0002      	movs	r2, r0
 80008e4:	210c      	movs	r1, #12
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	ca61      	ldmia	r2!, {r0, r5, r6}
 80008ea:	c361      	stmia	r3!, {r0, r5, r6}
 80008ec:	ca61      	ldmia	r2!, {r0, r5, r6}
 80008ee:	c361      	stmia	r3!, {r0, r5, r6}
 80008f0:	ca61      	ldmia	r2!, {r0, r5, r6}
 80008f2:	c361      	stmia	r3!, {r0, r5, r6}

	 sTime.Hours = (uint8_t)time_tm.tm_hour;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	701a      	strb	r2, [r3, #0]
	 sTime.Minutes = (uint8_t)time_tm.tm_min;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	193b      	adds	r3, r7, r4
 8000906:	705a      	strb	r2, [r3, #1]
	 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	193b      	adds	r3, r7, r4
 8000910:	709a      	strb	r2, [r3, #2]
	 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000912:	1939      	adds	r1, r7, r4
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <SetOraNew+0xe0>)
 8000916:	2200      	movs	r2, #0
 8000918:	0018      	movs	r0, r3
 800091a:	f001 ff4b 	bl	80027b4 <HAL_RTC_SetTime>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <SetOraNew+0x72>
	 {
		 Error_Handler();
 8000922:	f000 fb07 	bl	8000f34 <Error_Handler>
	 }

	 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; } // the chip goes mon tue wed thu fri sat sun
 8000926:	230c      	movs	r3, #12
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d103      	bne.n	8000938 <SetOraNew+0x84>
 8000930:	230c      	movs	r3, #12
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	2207      	movs	r2, #7
 8000936:	619a      	str	r2, [r3, #24]
	 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 8000938:	200c      	movs	r0, #12
 800093a:	183b      	adds	r3, r7, r0
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	2130      	movs	r1, #48	; 0x30
 8000942:	187b      	adds	r3, r7, r1
 8000944:	701a      	strb	r2, [r3, #0]
	 sDate.Month = (uint8_t)time_tm.tm_mon+1; //month 1- This is why date math is frustrating.
 8000946:	183b      	adds	r3, r7, r0
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	b2da      	uxtb	r2, r3
 8000950:	187b      	adds	r3, r7, r1
 8000952:	705a      	strb	r2, [r3, #1]
	 sDate.Date = (uint8_t)time_tm.tm_mday;
 8000954:	183b      	adds	r3, r7, r0
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	187b      	adds	r3, r7, r1
 800095c:	709a      	strb	r2, [r3, #2]
	 sDate.Year = (uint16_t)(time_tm.tm_year+1900-2000); // time.h is years since 1900, chip is years since 2000
 800095e:	183b      	adds	r3, r7, r0
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	3b64      	subs	r3, #100	; 0x64
 8000966:	b2da      	uxtb	r2, r3
 8000968:	187b      	adds	r3, r7, r1
 800096a:	70da      	strb	r2, [r3, #3]

	 /*
	 * update the RTC
	 */
	 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800096c:	1879      	adds	r1, r7, r1
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <SetOraNew+0xe0>)
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f002 f83e 	bl	80029f4 <HAL_RTC_SetDate>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <SetOraNew+0xcc>
	 {
		 Error_Handler();
 800097c:	f000 fada 	bl	8000f34 <Error_Handler>
	 }

	 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2); // lock it in with the backup registers
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SetOraNew+0xe4>)
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SetOraNew+0xe0>)
 8000984:	2100      	movs	r1, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fb8e 	bl	80030a8 <HAL_RTCEx_BKUPWrite>

	 //sprintf(buffer,"test\n");
	HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,128), HAL_MAX_DELAY);*/


}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b013      	add	sp, #76	; 0x4c
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	20000298 	.word	0x20000298
 8000998:	000032f2 	.word	0x000032f2

0800099c <GetOraNew>:

time_t GetOraNew(){
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b097      	sub	sp, #92	; 0x5c
 80009a0:	af00      	add	r7, sp, #0

	RTC_DateTypeDef rtcDate;
	RTC_TimeTypeDef rtcTime;

	memset(&rtcTime,0,sizeof(RTC_TimeTypeDef));
 80009a2:	2428      	movs	r4, #40	; 0x28
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2214      	movs	r2, #20
 80009a8:	2100      	movs	r1, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 fbc9 	bl	8004142 <memset>
	memset(&rtcDate,0,sizeof(RTC_DateTypeDef));
 80009b0:	253c      	movs	r5, #60	; 0x3c
 80009b2:	197b      	adds	r3, r7, r5
 80009b4:	2204      	movs	r2, #4
 80009b6:	2100      	movs	r1, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f003 fbc2 	bl	8004142 <memset>


	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80009be:	1939      	adds	r1, r7, r4
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <GetOraNew+0xf0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 ffb9 	bl	800293c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80009ca:	1979      	adds	r1, r7, r5
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <GetOraNew+0xf0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 f8bd 	bl	8002b50 <HAL_RTC_GetDate>
	uint8_t hh = rtcTime.Hours;
 80009d6:	2657      	movs	r6, #87	; 0x57
 80009d8:	19bb      	adds	r3, r7, r6
 80009da:	193a      	adds	r2, r7, r4
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	701a      	strb	r2, [r3, #0]
	uint8_t mm = rtcTime.Minutes;
 80009e0:	2356      	movs	r3, #86	; 0x56
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	7852      	ldrb	r2, [r2, #1]
 80009e8:	701a      	strb	r2, [r3, #0]
	uint8_t ss = rtcTime.Seconds;
 80009ea:	2255      	movs	r2, #85	; 0x55
 80009ec:	18bb      	adds	r3, r7, r2
 80009ee:	193a      	adds	r2, r7, r4
 80009f0:	7892      	ldrb	r2, [r2, #2]
 80009f2:	701a      	strb	r2, [r3, #0]
	uint8_t d = rtcDate.Date;
 80009f4:	2154      	movs	r1, #84	; 0x54
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	197a      	adds	r2, r7, r5
 80009fa:	7892      	ldrb	r2, [r2, #2]
 80009fc:	701a      	strb	r2, [r3, #0]
	uint8_t m = rtcDate.Month;
 80009fe:	2053      	movs	r0, #83	; 0x53
 8000a00:	183b      	adds	r3, r7, r0
 8000a02:	197a      	adds	r2, r7, r5
 8000a04:	7852      	ldrb	r2, [r2, #1]
 8000a06:	701a      	strb	r2, [r3, #0]
	uint16_t y = rtcDate.Year;
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	78da      	ldrb	r2, [r3, #3]
 8000a0c:	2450      	movs	r4, #80	; 0x50
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	801a      	strh	r2, [r3, #0]
	uint16_t yr = (uint16_t)(y+2000-1900);
 8000a12:	254e      	movs	r5, #78	; 0x4e
 8000a14:	197b      	adds	r3, r7, r5
 8000a16:	193a      	adds	r2, r7, r4
 8000a18:	8812      	ldrh	r2, [r2, #0]
 8000a1a:	3264      	adds	r2, #100	; 0x64
 8000a1c:	801a      	strh	r2, [r3, #0]
	time_t currentTime = {0};
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2400      	movs	r4, #0
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
 8000a24:	647c      	str	r4, [r7, #68]	; 0x44
	struct tm tim = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2324      	movs	r3, #36	; 0x24
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 fb87 	bl	8004142 <memset>
	tim.tm_year = yr;
 8000a34:	197b      	adds	r3, r7, r5
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	615a      	str	r2, [r3, #20]
	tim.tm_mon = m - 1;
 8000a3c:	2053      	movs	r0, #83	; 0x53
 8000a3e:	183b      	adds	r3, r7, r0
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	611a      	str	r2, [r3, #16]
	tim.tm_mday = d;
 8000a48:	2154      	movs	r1, #84	; 0x54
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	60da      	str	r2, [r3, #12]
	tim.tm_hour = hh;
 8000a52:	19bb      	adds	r3, r7, r6
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	609a      	str	r2, [r3, #8]
	tim.tm_min = mm;
 8000a5a:	2356      	movs	r3, #86	; 0x56
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	605a      	str	r2, [r3, #4]
	tim.tm_sec = ss;
 8000a64:	2255      	movs	r2, #85	; 0x55
 8000a66:	18bb      	adds	r3, r7, r2
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	601a      	str	r2, [r3, #0]
	currentTime = mktime(&tim);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f003 fc39 	bl	80042e8 <mktime>
 8000a76:	0003      	movs	r3, r0
 8000a78:	000c      	movs	r4, r1
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a7c:	647c      	str	r4, [r7, #68]	; 0x44

	//sprintf(buffer,"test get\n");
	HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,128), HAL_MAX_DELAY);*/


	return currentTime;
 8000a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a80:	6c7c      	ldr	r4, [r7, #68]	; 0x44
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	0021      	movs	r1, r4
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b017      	add	sp, #92	; 0x5c
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	20000298 	.word	0x20000298

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0b2      	sub	sp, #200	; 0xc8
 8000a94:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a96:	f000 fba1 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f000 f84b 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f000 f9a3 	bl	8000de8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000aa2:	f000 f8b9 	bl	8000c18 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000aa6:	f000 f96f 	bl	8000d88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //SetOra(1580176798);

  uint32_t testPattern[24]={
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	18fa      	adds	r2, r7, r3
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <main+0x94>)
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	f003 fb3a 	bl	8004130 <memcpy>
	//memset(buffer,0,100);

	//sprintf(buffer,"---- Starting tests (errors = %u) ----\n",errors);
	//HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,100), HAL_MAX_DELAY);

	int patternIndex = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	22c4      	movs	r2, #196	; 0xc4
 8000ac0:	18ba      	adds	r2, r7, r2
 8000ac2:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (!doTest(testPattern[patternIndex],10)){
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	22c4      	movs	r2, #196	; 0xc4
 8000aca:	18ba      	adds	r2, r7, r2
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	58d3      	ldr	r3, [r2, r3]
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 f9bd 	bl	8000e54 <doTest>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d104      	bne.n	8000ae8 <main+0x58>

		  errors++;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <main+0x98>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <main+0x98>)
 8000ae6:	601a      	str	r2, [r3, #0]

	  }

	  if (patternIndex==23){
 8000ae8:	23c4      	movs	r3, #196	; 0xc4
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b17      	cmp	r3, #23
 8000af0:	d110      	bne.n	8000b14 <main+0x84>
		  patternIndex=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	22c4      	movs	r2, #196	; 0xc4
 8000af6:	18ba      	adds	r2, r7, r2
 8000af8:	6013      	str	r3, [r2, #0]
		  yesterday = 0;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <main+0x9c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
		  now = 0;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <main+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
		  char buffer[100];
		  memset(buffer,0,100);
 8000b06:	003b      	movs	r3, r7
 8000b08:	2264      	movs	r2, #100	; 0x64
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f003 fb18 	bl	8004142 <memset>
 8000b12:	e7d7      	b.n	8000ac4 <main+0x34>
		  //sprintf(buffer,"---- Starting tests (errors = %u) ----\n",errors);
		  //HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,100), HAL_MAX_DELAY);
	  }
	  else
	  {
		  patternIndex++;
 8000b14:	22c4      	movs	r2, #196	; 0xc4
 8000b16:	18bb      	adds	r3, r7, r2
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	18ba      	adds	r2, r7, r2
 8000b1e:	6013      	str	r3, [r2, #0]
	  if (!doTest(testPattern[patternIndex],10)){
 8000b20:	e7d0      	b.n	8000ac4 <main+0x34>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	08005ff0 	.word	0x08005ff0
 8000b28:	20000260 	.word	0x20000260
 8000b2c:	20000258 	.word	0x20000258
 8000b30:	2000025c 	.word	0x2000025c

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b09d      	sub	sp, #116	; 0x74
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	2438      	movs	r4, #56	; 0x38
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2338      	movs	r3, #56	; 0x38
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f003 fafc 	bl	8004142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4a:	2324      	movs	r3, #36	; 0x24
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f003 faf4 	bl	8004142 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2324      	movs	r3, #36	; 0x24
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f003 faed 	bl	8004142 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <SystemClock_Config+0xdc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <SystemClock_Config+0xe0>)
 8000b6e:	401a      	ands	r2, r3
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <SystemClock_Config+0xdc>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0109      	lsls	r1, r1, #4
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000b7a:	0021      	movs	r1, r4
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2218      	movs	r2, #24
 8000b80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	22a0      	movs	r2, #160	; 0xa0
 8000b98:	0212      	lsls	r2, r2, #8
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fe5f 	bl	8001868 <HAL_RCC_OscConfig>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bae:	f000 f9c1 	bl	8000f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	2124      	movs	r1, #36	; 0x24
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fa06 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000be0:	f000 f9a8 	bl	8000f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2222      	movs	r2, #34	; 0x22
 8000be8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	0292      	lsls	r2, r2, #10
 8000bf6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 fbd8 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c04:	f000 f996 	bl	8000f34 <Error_Handler>
  }
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b01d      	add	sp, #116	; 0x74
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40007000 	.word	0x40007000
 8000c14:	ffffe7ff 	.word	0xffffe7ff

08000c18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c1e:	232c      	movs	r3, #44	; 0x2c
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	0018      	movs	r0, r3
 8000c24:	2314      	movs	r3, #20
 8000c26:	001a      	movs	r2, r3
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f003 fa8a 	bl	8004142 <memset>
  RTC_DateTypeDef sDate = {0};
 8000c2e:	2328      	movs	r3, #40	; 0x28
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2328      	movs	r3, #40	; 0x28
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fa7f 	bl	8004142 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000c44:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c46:	4a4f      	ldr	r2, [pc, #316]	; (8000d84 <MX_RTC_Init+0x16c>)
 8000c48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c4a:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c52:	227f      	movs	r2, #127	; 0x7f
 8000c54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c56:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c62:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c68:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c6e:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c74:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <MX_RTC_Init+0x168>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f001 fcfe 	bl	8002678 <HAL_RTC_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000c80:	f000 f958 	bl	8000f34 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8000c84:	212c      	movs	r1, #44	; 0x2c
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <MX_RTC_Init+0x168>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 fd82 	bl	80027b4 <HAL_RTC_SetTime>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000cb4:	f000 f93e 	bl	8000f34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cb8:	2128      	movs	r1, #40	; 0x28
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000cd2:	1879      	adds	r1, r7, r1
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_RTC_Init+0x168>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f001 fe8b 	bl	80029f4 <HAL_RTC_SetDate>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000ce2:	f000 f927 	bl	8000f34 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000cec:	003b      	movs	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000cf8:	003b      	movs	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cfe:	003b      	movs	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d04:	003b      	movs	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d10:	003b      	movs	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d16:	003b      	movs	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000d1c:	003b      	movs	r3, r7
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2101      	movs	r1, #1
 8000d22:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d24:	003b      	movs	r3, r7
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0052      	lsls	r2, r2, #1
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000d2c:	0039      	movs	r1, r7
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_RTC_Init+0x168>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 ff5a 	bl	8002bec <HAL_RTC_SetAlarm>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000d3c:	f000 f8fa 	bl	8000f34 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8000d40:	003b      	movs	r3, r7
 8000d42:	2220      	movs	r2, #32
 8000d44:	2101      	movs	r1, #1
 8000d46:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8000d48:	003b      	movs	r3, r7
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000d50:	0039      	movs	r1, r7
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_RTC_Init+0x168>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 ff48 	bl	8002bec <HAL_RTC_SetAlarm>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8000d60:	f000 f8e8 	bl	8000f34 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_RTC_Init+0x168>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f002 f8fc 	bl	8002f68 <HAL_RTCEx_SetWakeUpTimer>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <MX_RTC_Init+0x160>
  {
    Error_Handler();
 8000d74:	f000 f8de 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b010      	add	sp, #64	; 0x40
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000298 	.word	0x20000298
 8000d84:	40002800 	.word	0x40002800

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_USART2_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d94:	22e1      	movs	r2, #225	; 0xe1
 8000d96:	0252      	lsls	r2, r2, #9
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 f981 	bl	80030d4 <HAL_UART_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 f8ad 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002bc 	.word	0x200002bc
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f003 f9a3 	bl	8004142 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_GPIO_Init+0x68>)
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_GPIO_Init+0x68>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_GPIO_Init+0x68>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 fcf3 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2220      	movs	r2, #32
 8000e26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	1d3a      	adds	r2, r7, #4
 8000e3c:	23a0      	movs	r3, #160	; 0xa0
 8000e3e:	05db      	lsls	r3, r3, #23
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fb6a 	bl	800151c <HAL_GPIO_Init>

}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <doTest>:

/* USER CODE BEGIN 4 */

static uint8_t doTest(uint32_t pattern, uint32_t seconds){
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b09c      	sub	sp, #112	; 0x70
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]

	SetOraNew((time_t)pattern);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	001c      	movs	r4, r3
 8000e62:	2300      	movs	r3, #0
 8000e64:	001d      	movs	r5, r3
 8000e66:	0020      	movs	r0, r4
 8000e68:	0029      	movs	r1, r5
 8000e6a:	f7ff fd23 	bl	80008b4 <SetOraNew>

	HAL_Delay(1000);
 8000e6e:	23fa      	movs	r3, #250	; 0xfa
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fa12 	bl	800129c <HAL_Delay>

	uint32_t delay = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	66fb      	str	r3, [r7, #108]	; 0x6c

	char buffer[100];
	memset(buffer,0,100);
 8000e7c:	2408      	movs	r4, #8
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	2100      	movs	r1, #0
 8000e84:	0018      	movs	r0, r3
 8000e86:	f003 f95c 	bl	8004142 <memset>

	sprintf(buffer,"Timestamp %u 1\n",pattern);
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4925      	ldr	r1, [pc, #148]	; (8000f24 <doTest+0xd0>)
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	0018      	movs	r0, r3
 8000e92:	f003 fc9f 	bl	80047d4 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,100), HAL_MAX_DELAY);
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2164      	movs	r1, #100	; 0x64
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f003 fcba 	bl	8004814 <strnlen>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	1939      	adds	r1, r7, r4
 8000eaa:	481f      	ldr	r0, [pc, #124]	; (8000f28 <doTest+0xd4>)
 8000eac:	f002 f966 	bl	800317c <HAL_UART_Transmit>

	do{

		memset(buffer,0,100);
 8000eb0:	2508      	movs	r5, #8
 8000eb2:	197b      	adds	r3, r7, r5
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f003 f942 	bl	8004142 <memset>
		//yesterday = now;

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 fcbc 	bl	8001842 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,SET);
		  return 0;

		}*/

		now = (uint32_t)GetOraNew();
 8000eca:	f7ff fd67 	bl	800099c <GetOraNew>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <doTest+0xd8>)
 8000ed6:	601a      	str	r2, [r3, #0]
		sprintf(buffer,"Timestamp %u 0\n",now);
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <doTest+0xd8>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4914      	ldr	r1, [pc, #80]	; (8000f30 <doTest+0xdc>)
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f003 fc77 	bl	80047d4 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,100), HAL_MAX_DELAY);
 8000ee6:	197b      	adds	r3, r7, r5
 8000ee8:	2164      	movs	r1, #100	; 0x64
 8000eea:	0018      	movs	r0, r3
 8000eec:	f003 fc92 	bl	8004814 <strnlen>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	1979      	adds	r1, r7, r5
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <doTest+0xd4>)
 8000efc:	f002 f93e 	bl	800317c <HAL_UART_Transmit>

		HAL_Delay(1000);
 8000f00:	23fa      	movs	r3, #250	; 0xfa
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f9c9 	bl	800129c <HAL_Delay>

		delay++;
 8000f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	66fb      	str	r3, [r7, #108]	; 0x6c

	}
	while(delay<seconds);
 8000f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3cb      	bcc.n	8000eb0 <doTest+0x5c>

	return 1;
 8000f18:	2301      	movs	r3, #1

}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b01c      	add	sp, #112	; 0x70
 8000f20:	bdb0      	pop	{r4, r5, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	08006050 	.word	0x08006050
 8000f28:	200002bc 	.word	0x200002bc
 8000f2c:	2000025c 	.word	0x2000025c
 8000f30:	08006060 	.word	0x08006060

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b09b      	sub	sp, #108	; 0x6c
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	char buffer[100];
	memset(buffer,0,100);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2264      	movs	r2, #100	; 0x64
 8000f3e:	2100      	movs	r1, #0
 8000f40:	0018      	movs	r0, r3
 8000f42:	f003 f8fe 	bl	8004142 <memset>
	sprintf(buffer,"Fatal Error\n");
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <Error_Handler+0x3c>)
 8000f4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f4c:	c313      	stmia	r3!, {r0, r1, r4}
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, buffer, strnlen(buffer,100), HAL_MAX_DELAY);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2164      	movs	r1, #100	; 0x64
 8000f56:	0018      	movs	r0, r3
 8000f58:	f003 fc5c 	bl	8004814 <strnlen>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <Error_Handler+0x40>)
 8000f68:	f002 f908 	bl	800317c <HAL_UART_Transmit>
	while(1){
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x38>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	08006070 	.word	0x08006070
 8000f74:	200002bc 	.word	0x200002bc

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_MspInit+0x24>)
 8000f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x24>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_MspInit+0x24>)
 8000f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_MspInit+0x24>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	0549      	lsls	r1, r1, #21
 8000f92:	430a      	orrs	r2, r1
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_RTC_MspInit+0x28>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_RTC_MspInit+0x2c>)
 8000fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_RTC_MspInit+0x2c>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40002800 	.word	0x40002800
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	230c      	movs	r3, #12
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2314      	movs	r3, #20
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f003 f8ad 	bl	8004142 <memset>
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d131      	bne.n	8001056 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	0289      	lsls	r1, r1, #10
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x94>)
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	4013      	ands	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001018:	210c      	movs	r1, #12
 800101a:	187b      	adds	r3, r7, r1
 800101c:	220c      	movs	r2, #12
 800101e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2202      	movs	r2, #2
 8001024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2203      	movs	r2, #3
 8001030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2204      	movs	r2, #4
 8001036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	187a      	adds	r2, r7, r1
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fa6b 	bl	800151c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	201c      	movs	r0, #28
 800104c:	f000 f9ec 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001050:	201c      	movs	r0, #28
 8001052:	f000 f9fe 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b008      	add	sp, #32
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40004400 	.word	0x40004400
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f8ee 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <USART2_IRQHandler+0x14>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f002 f912 	bl	80032cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200002bc 	.word	0x200002bc

080010b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x50>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x16>
		heap_end = &end;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <_sbrk+0x50>)
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <_sbrk+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <_sbrk+0x50>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <_sbrk+0x50>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	466a      	mov	r2, sp
 80010da:	4293      	cmp	r3, r2
 80010dc:	d907      	bls.n	80010ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010de:	f002 fee1 	bl	8003ea4 <__errno>
 80010e2:	0003      	movs	r3, r0
 80010e4:	220c      	movs	r2, #12
 80010e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
 80010ec:	e006      	b.n	80010fc <_sbrk+0x48>
	}

	heap_end += incr;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <_sbrk+0x50>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	18d2      	adds	r2, r2, r3
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <_sbrk+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000268 	.word	0x20000268
 8001108:	20000348 	.word	0x20000348

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <SystemInit+0x64>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <SystemInit+0x64>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0049      	lsls	r1, r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <SystemInit+0x64>)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <SystemInit+0x64>)
 8001124:	4913      	ldr	r1, [pc, #76]	; (8001174 <SystemInit+0x68>)
 8001126:	400a      	ands	r2, r1
 8001128:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <SystemInit+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <SystemInit+0x64>)
 8001130:	4911      	ldr	r1, [pc, #68]	; (8001178 <SystemInit+0x6c>)
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <SystemInit+0x64>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <SystemInit+0x64>)
 800113c:	2101      	movs	r1, #1
 800113e:	438a      	bics	r2, r1
 8001140:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <SystemInit+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <SystemInit+0x64>)
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <SystemInit+0x70>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <SystemInit+0x64>)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <SystemInit+0x64>)
 8001154:	490a      	ldr	r1, [pc, #40]	; (8001180 <SystemInit+0x74>)
 8001156:	400a      	ands	r2, r1
 8001158:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SystemInit+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SystemInit+0x78>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0512      	lsls	r2, r2, #20
 8001166:	609a      	str	r2, [r3, #8]
#endif
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40021000 	.word	0x40021000
 8001174:	88ff400c 	.word	0x88ff400c
 8001178:	fef6fff6 	.word	0xfef6fff6
 800117c:	fffbffff 	.word	0xfffbffff
 8001180:	ff02ffff 	.word	0xff02ffff
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800118c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
  ldr  r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80011a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80011a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011aa:	3204      	adds	r2, #4

080011ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <LoopForever+0x16>)
  cmp  r2, r3
 80011ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011b2:	f7ff ffab 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 fe7b 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fc69 	bl	8000a90 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80011c4:	080063c0 	.word	0x080063c0
  ldr  r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011cc:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80011d0:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80011d4:	20000344 	.word	0x20000344

080011d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_COMP_IRQHandler>
	...

080011dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x3c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Init+0x3c>)
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f811 	bl	800121c <HAL_InitTick>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d003      	beq.n	8001206 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e001      	b.n	800120a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001206:	f7ff feb7 	bl	8000f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_InitTick+0x50>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	23fa      	movs	r3, #250	; 0xfa
 8001232:	0099      	lsls	r1, r3, #2
 8001234:	0010      	movs	r0, r2
 8001236:	f7fe ff79 	bl	800012c <__udivsi3>
 800123a:	0003      	movs	r3, r0
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f918 	bl	8001472 <HAL_SYSTICK_Config>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d004      	beq.n	8001250 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e006      	b.n	800125e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2301      	movs	r3, #1
 8001254:	425b      	negs	r3, r3
 8001256:	2200      	movs	r2, #0
 8001258:	0018      	movs	r0, r3
 800125a:	f000 f8e5 	bl	8001428 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800125e:	230f      	movs	r3, #15
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  uwTick++;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_IncTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_IncTick+0x14>)
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000033c 	.word	0x2000033c

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	2000033c 	.word	0x2000033c

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fff0 	bl	8001288 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	d002      	beq.n	80012bc <HAL_Delay+0x20>
  {
    wait++;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	f7ff ffe3 	bl	8001288 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d8f7      	bhi.n	80012be <HAL_Delay+0x22>
  {
  }
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	0002      	movs	r2, r0
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	001a      	movs	r2, r3
 80012ea:	231f      	movs	r3, #31
 80012ec:	401a      	ands	r2, r3
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <NVIC_EnableIRQ+0x28>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	4091      	lsls	r1, r2
 80012f4:	000a      	movs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	e000e100 	.word	0xe000e100

08001304 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b7f      	cmp	r3, #127	; 0x7f
 8001318:	d932      	bls.n	8001380 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131a:	4a2f      	ldr	r2, [pc, #188]	; (80013d8 <NVIC_SetPriority+0xd4>)
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	0019      	movs	r1, r3
 8001322:	230f      	movs	r3, #15
 8001324:	400b      	ands	r3, r1
 8001326:	3b08      	subs	r3, #8
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3306      	adds	r3, #6
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	18d3      	adds	r3, r2, r3
 8001330:	3304      	adds	r3, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1dfa      	adds	r2, r7, #7
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	0011      	movs	r1, r2
 800133a:	2203      	movs	r2, #3
 800133c:	400a      	ands	r2, r1
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	21ff      	movs	r1, #255	; 0xff
 8001342:	4091      	lsls	r1, r2
 8001344:	000a      	movs	r2, r1
 8001346:	43d2      	mvns	r2, r2
 8001348:	401a      	ands	r2, r3
 800134a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	019b      	lsls	r3, r3, #6
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	401a      	ands	r2, r3
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	2303      	movs	r3, #3
 800135c:	4003      	ands	r3, r0
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001362:	481d      	ldr	r0, [pc, #116]	; (80013d8 <NVIC_SetPriority+0xd4>)
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	001c      	movs	r4, r3
 800136a:	230f      	movs	r3, #15
 800136c:	4023      	ands	r3, r4
 800136e:	3b08      	subs	r3, #8
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	430a      	orrs	r2, r1
 8001374:	3306      	adds	r3, #6
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	18c3      	adds	r3, r0, r3
 800137a:	3304      	adds	r3, #4
 800137c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800137e:	e027      	b.n	80013d0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <NVIC_SetPriority+0xd8>)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	33c0      	adds	r3, #192	; 0xc0
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	1dfa      	adds	r2, r7, #7
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	0011      	movs	r1, r2
 8001396:	2203      	movs	r2, #3
 8001398:	400a      	ands	r2, r1
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	21ff      	movs	r1, #255	; 0xff
 800139e:	4091      	lsls	r1, r2
 80013a0:	000a      	movs	r2, r1
 80013a2:	43d2      	mvns	r2, r2
 80013a4:	401a      	ands	r2, r3
 80013a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	019b      	lsls	r3, r3, #6
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	401a      	ands	r2, r3
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	0018      	movs	r0, r3
 80013b6:	2303      	movs	r3, #3
 80013b8:	4003      	ands	r3, r0
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <NVIC_SetPriority+0xd8>)
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	33c0      	adds	r3, #192	; 0xc0
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	501a      	str	r2, [r3, r0]
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b003      	add	sp, #12
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <SysTick_Config+0x40>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e010      	b.n	8001418 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <SysTick_Config+0x44>)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	3a01      	subs	r2, #1
 80013fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	2301      	movs	r3, #1
 8001400:	425b      	negs	r3, r3
 8001402:	2103      	movs	r1, #3
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff7d 	bl	8001304 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SysTick_Config+0x44>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x44>)
 8001412:	2207      	movs	r2, #7
 8001414:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001416:	2300      	movs	r3, #0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	00ffffff 	.word	0x00ffffff
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	210f      	movs	r1, #15
 8001434:	187b      	adds	r3, r7, r1
 8001436:	1c02      	adds	r2, r0, #0
 8001438:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	187b      	adds	r3, r7, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <NVIC_SetPriority>
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	0002      	movs	r2, r0
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b25b      	sxtb	r3, r3
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff37 	bl	80012d8 <NVIC_EnableIRQ>
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff ffaf 	bl	80013e0 <SysTick_Config>
 8001482:	0003      	movs	r3, r0
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2225      	movs	r2, #37	; 0x25
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d007      	beq.n	80014b8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e02a      	b.n	800150e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	210e      	movs	r1, #14
 80014c4:	438a      	bics	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2101      	movs	r1, #1
 80014d4:	438a      	bics	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	221c      	movs	r2, #28
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	000a      	movs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2225      	movs	r2, #37	; 0x25
 80014f0:	2101      	movs	r1, #1
 80014f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	0010      	movs	r0, r2
 800150c:	4798      	blx	r3
    }
  }
  return status;
 800150e:	230f      	movs	r3, #15
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001532:	e14f      	b.n	80017d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d100      	bne.n	800154c <HAL_GPIO_Init+0x30>
 800154a:	e140      	b.n	80017ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x40>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b12      	cmp	r3, #18
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	58d3      	ldr	r3, [r2, r3]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	409a      	lsls	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	43da      	mvns	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2107      	movs	r1, #7
 8001588:	400b      	ands	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00b      	beq.n	80015c4 <HAL_GPIO_Init+0xa8>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d130      	bne.n	8001626 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	409a      	lsls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fa:	2201      	movs	r2, #1
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	2201      	movs	r2, #1
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	401a      	ands	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	43da      	mvns	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	055b      	lsls	r3, r3, #21
 8001692:	4013      	ands	r3, r2
 8001694:	d100      	bne.n	8001698 <HAL_GPIO_Init+0x17c>
 8001696:	e09a      	b.n	80017ce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800169a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800169e:	2101      	movs	r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2d4>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	589b      	ldr	r3, [r3, r2]
 80016b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	409a      	lsls	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x1ea>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2d8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1e6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1e2>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x2e0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1de>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x2e4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1da>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x1ec>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x1ec>
 8001706:	2300      	movs	r3, #0
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	2103      	movs	r1, #3
 800170c:	400a      	ands	r2, r1
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x2d4>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	029b      	lsls	r3, r3, #10
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	035b      	lsls	r3, r3, #13
 8001792:	4013      	ands	r3, r2
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	039b      	lsls	r3, r3, #14
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	40da      	lsrs	r2, r3
 80017dc:	1e13      	subs	r3, r2, #0
 80017de:	d000      	beq.n	80017e2 <HAL_GPIO_Init+0x2c6>
 80017e0:	e6a8      	b.n	8001534 <HAL_GPIO_Init+0x18>
  }
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b006      	add	sp, #24
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	50000400 	.word	0x50000400
 80017f8:	50000800 	.word	0x50000800
 80017fc:	50000c00 	.word	0x50000c00
 8001800:	50001c00 	.word	0x50001c00
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	0008      	movs	r0, r1
 8001812:	0011      	movs	r1, r2
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	1c02      	adds	r2, r0, #0
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	1c7b      	adds	r3, r7, #1
 800181c:	1c0a      	adds	r2, r1, #0
 800181e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001820:	1c7b      	adds	r3, r7, #1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001828:	1cbb      	adds	r3, r7, #2
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	000a      	movs	r2, r1
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	1cbb      	adds	r3, r7, #2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	405a      	eors	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	615a      	str	r2, [r3, #20]
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	f000 fbab 	bl	8001fd2 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187c:	4bce      	ldr	r3, [pc, #824]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001886:	4bcc      	ldr	r3, [pc, #816]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4013      	ands	r3, r2
 8001890:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	d100      	bne.n	800189e <HAL_RCC_OscConfig+0x36>
 800189c:	e07e      	b.n	800199c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d112      	bne.n	80018d0 <HAL_RCC_OscConfig+0x68>
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4bc0      	ldr	r3, [pc, #768]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5a>
 80018c0:	e06b      	b.n	800199a <HAL_RCC_OscConfig+0x132>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d167      	bne.n	800199a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f000 fb81 	bl	8001fd2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x84>
 80018dc:	4bb6      	ldr	r3, [pc, #728]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4bb5      	ldr	r3, [pc, #724]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0249      	lsls	r1, r1, #9
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e027      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	23a0      	movs	r3, #160	; 0xa0
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10e      	bne.n	8001916 <HAL_RCC_OscConfig+0xae>
 80018f8:	4baf      	ldr	r3, [pc, #700]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4bae      	ldr	r3, [pc, #696]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	02c9      	lsls	r1, r1, #11
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	4bac      	ldr	r3, [pc, #688]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4bab      	ldr	r3, [pc, #684]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0249      	lsls	r1, r1, #9
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e012      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001916:	4ba8      	ldr	r3, [pc, #672]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4ba7      	ldr	r3, [pc, #668]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 800191c:	49a7      	ldr	r1, [pc, #668]	; (8001bbc <HAL_RCC_OscConfig+0x354>)
 800191e:	400a      	ands	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	4ba5      	ldr	r3, [pc, #660]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4013      	ands	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4ba1      	ldr	r3, [pc, #644]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4ba0      	ldr	r3, [pc, #640]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001936:	49a2      	ldr	r1, [pc, #648]	; (8001bc0 <HAL_RCC_OscConfig+0x358>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d015      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fca0 	bl	8001288 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194e:	f7ff fc9b 	bl	8001288 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d902      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	f000 fb38 	bl	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001962:	4b95      	ldr	r3, [pc, #596]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	d0ef      	beq.n	800194e <HAL_RCC_OscConfig+0xe6>
 800196e:	e015      	b.n	800199c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc8a 	bl	8001288 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197a:	f7ff fc85 	bl	8001288 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e322      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800198c:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x112>
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2202      	movs	r2, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x140>
 80019a6:	e08a      	b.n	8001abe <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d13d      	bne.n	8001a36 <HAL_RCC_OscConfig+0x1ce>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13a      	bne.n	8001a36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019c0:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2204      	movs	r2, #4
 80019c6:	4013      	ands	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_RCC_OscConfig+0x16c>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e2fe      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a7a      	ldr	r2, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x35c>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	021a      	lsls	r2, r3, #8
 80019e4:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2209      	movs	r2, #9
 80019f0:	4393      	bics	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fc:	f000 fc1e 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x360>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	000a      	movs	r2, r1
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x364>)
 8001a16:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a18:	2513      	movs	r5, #19
 8001a1a:	197c      	adds	r4, r7, r5
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fbfd 	bl	800121c <HAL_InitTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a26:	197b      	adds	r3, r7, r5
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d047      	beq.n	8001abe <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8001a2e:	2313      	movs	r3, #19
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	e2cd      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d027      	beq.n	8001a8c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2209      	movs	r2, #9
 8001a42:	4393      	bics	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc1b 	bl	8001288 <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc16 	bl	8001288 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e2b3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6a:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f1      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_OscConfig+0x35c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	e018      	b.n	8001abe <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fbf6 	bl	8001288 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fbf1 	bl	8001288 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e28e      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x262>
 8001ac8:	e09e      	b.n	8001c08 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d13f      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x280>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e274      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <HAL_RCC_OscConfig+0x368>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	0a19      	lsrs	r1, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	061a      	lsls	r2, r3, #24
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	0b5b      	lsrs	r3, r3, #13
 8001b16:	3301      	adds	r3, #1
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0212      	lsls	r2, r2, #8
 8001b1c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	210f      	movs	r1, #15
 8001b26:	400b      	ands	r3, r1
 8001b28:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x360>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x364>)
 8001b30:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001b32:	2513      	movs	r5, #19
 8001b34:	197c      	adds	r4, r7, r5
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fb70 	bl	800121c <HAL_InitTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b40:	197b      	adds	r3, r7, r5
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d05f      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8001b48:	2313      	movs	r3, #19
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	e240      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03d      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	0049      	lsls	r1, r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fb8f 	bl	8001288 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b70:	f7ff fb8a 	bl	8001288 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e227      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <HAL_RCC_OscConfig+0x368>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	0a19      	lsrs	r1, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	061a      	lsls	r2, r3, #24
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e027      	b.n	8001c08 <HAL_RCC_OscConfig+0x3a0>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	fffeffff 	.word	0xfffeffff
 8001bc0:	fffbffff 	.word	0xfffbffff
 8001bc4:	ffffe0ff 	.word	0xffffe0ff
 8001bc8:	0800608c 	.word	0x0800608c
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bd4:	4bbd      	ldr	r3, [pc, #756]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4bbc      	ldr	r3, [pc, #752]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001bda:	49bd      	ldr	r1, [pc, #756]	; (8001ed0 <HAL_RCC_OscConfig+0x668>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fb52 	bl	8001288 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bea:	f7ff fb4d 	bl	8001288 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1ea      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bfc:	4bb3      	ldr	r3, [pc, #716]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d036      	beq.n	8001c80 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4bac      	ldr	r3, [pc, #688]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1e:	4bab      	ldr	r3, [pc, #684]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fb2f 	bl	8001288 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fb2a 	bl	8001288 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1c7      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c42:	4ba2      	ldr	r3, [pc, #648]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f1      	beq.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b9f      	ldr	r3, [pc, #636]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c52:	4b9e      	ldr	r3, [pc, #632]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	438a      	bics	r2, r1
 8001c58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb15 	bl	8001288 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fb10 	bl	8001288 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1ad      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1f1      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2204      	movs	r2, #4
 8001c86:	4013      	ands	r3, r2
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x424>
 8001c8a:	e0af      	b.n	8001dec <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2327      	movs	r3, #39	; 0x27
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c94:	4b8d      	ldr	r3, [pc, #564]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca4:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0549      	lsls	r1, r1, #21
 8001caa:	430a      	orrs	r2, r1
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cae:	2327      	movs	r3, #39	; 0x27
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b87      	ldr	r3, [pc, #540]	; (8001ed4 <HAL_RCC_OscConfig+0x66c>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b84      	ldr	r3, [pc, #528]	; (8001ed4 <HAL_RCC_OscConfig+0x66c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x66c>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0049      	lsls	r1, r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fada 	bl	8001288 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7ff fad5 	bl	8001288 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e172      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <HAL_RCC_OscConfig+0x66c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4ac>
 8001d04:	4b71      	ldr	r3, [pc, #452]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d08:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0049      	lsls	r1, r1, #1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50
 8001d12:	e031      	b.n	8001d78 <HAL_RCC_OscConfig+0x510>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4ce>
 8001d1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d20:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d22:	496b      	ldr	r1, [pc, #428]	; (8001ed0 <HAL_RCC_OscConfig+0x668>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d2e:	496a      	ldr	r1, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x670>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50
 8001d34:	e020      	b.n	8001d78 <HAL_RCC_OscConfig+0x510>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	23a0      	movs	r3, #160	; 0xa0
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d10e      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d46:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	00c9      	lsls	r1, r1, #3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d54:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	0049      	lsls	r1, r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x510>
 8001d60:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d66:	495a      	ldr	r1, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x668>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6c:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001d72:	4959      	ldr	r1, [pc, #356]	; (8001ed8 <HAL_RCC_OscConfig+0x670>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d015      	beq.n	8001dac <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fa82 	bl	8001288 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fa7d 	bl	8001288 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_RCC_OscConfig+0x674>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e119      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d0ef      	beq.n	8001d8a <HAL_RCC_OscConfig+0x522>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fa6c 	bl	8001288 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db4:	e009      	b.n	8001dca <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff fa67 	bl	8001288 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	4a46      	ldr	r2, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x674>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e103      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1ef      	bne.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dd6:	2327      	movs	r3, #39	; 0x27
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001de6:	493e      	ldr	r1, [pc, #248]	; (8001ee0 <HAL_RCC_OscConfig+0x678>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d049      	beq.n	8001e8a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d026      	beq.n	8001e4c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCC_OscConfig+0x67c>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	0189      	lsls	r1, r1, #6
 8001e20:	430a      	orrs	r2, r1
 8001e22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa30 	bl	8001288 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2e:	f7ff fa2b 	bl	8001288 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0c8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f1      	beq.n	8001e2e <HAL_RCC_OscConfig+0x5c6>
 8001e4a:	e01e      	b.n	8001e8a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_RCC_OscConfig+0x680>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa10 	bl	8001288 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6e:	f7ff fa0b 	bl	8001288 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0a8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2202      	movs	r2, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f1      	bne.n	8001e6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_OscConfig+0x62c>
 8001e92:	e09d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x634>
 8001e9a:	e076      	b.n	8001f8a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCC_OscConfig+0x664>)
 8001eaa:	4910      	ldr	r1, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x684>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f9ea 	bl	8001288 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eb8:	e01a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff f9e5 	bl	8001288 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d913      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e082      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffffeff 	.word	0xfffffeff
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	fffffbff 	.word	0xfffffbff
 8001edc:	00001388 	.word	0x00001388
 8001ee0:	efffffff 	.word	0xefffffff
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	ffffdfff 	.word	0xffffdfff
 8001eec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	049b      	lsls	r3, r3, #18
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d1de      	bne.n	8001eba <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	431a      	orrs	r2, r3
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	0449      	lsls	r1, r1, #17
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f9ad 	bl	8001288 <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f9a8 	bl	8001288 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e045      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	049b      	lsls	r3, r3, #18
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x6cc>
 8001f52:	e03d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f5a:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_RCC_OscConfig+0x77c>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f992 	bl	8001288 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f98d 	bl	8001288 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e02a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x702>
 8001f88:	e022      	b.n	8001fd0 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01d      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_OscConfig+0x774>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10f      	bne.n	8001fcc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	23f0      	movs	r3, #240	; 0xf0
 8001fb0:	039b      	lsls	r3, r3, #14
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b00a      	add	sp, #40	; 0x28
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	ff02ffff 	.word	0xff02ffff
 8001fe4:	feffffff 	.word	0xfeffffff

08001fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e10d      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b88      	ldr	r3, [pc, #544]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	4013      	ands	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d911      	bls.n	800202e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	4b80      	ldr	r3, [pc, #512]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0f4      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b7a      	ldr	r3, [pc, #488]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b77      	ldr	r3, [pc, #476]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_ClockConfig+0x70>
 8002056:	e089      	b.n	800216c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d107      	bne.n	8002070 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002060:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	d120      	bne.n	80020ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d3      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	049b      	lsls	r3, r3, #18
 8002080:	4013      	ands	r3, r2
 8002082:	d114      	bne.n	80020ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0c7      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002090:	4b64      	ldr	r3, [pc, #400]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	4013      	ands	r3, r2
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0bc      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800209e:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0b4      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2203      	movs	r2, #3
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c2:	f7ff f8e1 	bl	8001288 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d111      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d2:	e009      	b.n	80020e8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f8d8 	bl	8001288 <HAL_GetTick>
 80020d8:	0002      	movs	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e097      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	220c      	movs	r2, #12
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d1ef      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xec>
 80020f4:	e03a      	b.n	800216c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d111      	bne.n	8002122 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fe:	e009      	b.n	8002114 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f8c2 	bl	8001288 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e081      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d1ef      	bne.n	8002100 <HAL_RCC_ClockConfig+0x118>
 8002120:	e024      	b.n	800216c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d11b      	bne.n	8002162 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	e009      	b.n	8002140 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff f8ac 	bl	8001288 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e06b      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	220c      	movs	r2, #12
 8002146:	4013      	ands	r3, r2
 8002148:	2b04      	cmp	r3, #4
 800214a:	d1ef      	bne.n	800212c <HAL_RCC_ClockConfig+0x144>
 800214c:	e00e      	b.n	800216c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7ff f89b 	bl	8001288 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e05a      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	220c      	movs	r2, #12
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d211      	bcs.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x238>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e03c      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2208      	movs	r2, #8
 80021c2:	4013      	ands	r3, r2
 80021c4:	d00a      	beq.n	80021dc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_RCC_ClockConfig+0x248>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	00da      	lsls	r2, r3, #3
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021dc:	f000 f82e 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021e0:	0001      	movs	r1, r0
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_ClockConfig+0x23c>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	220f      	movs	r2, #15
 80021ea:	4013      	ands	r3, r2
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_RCC_ClockConfig+0x24c>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	000a      	movs	r2, r1
 80021f2:	40da      	lsrs	r2, r3
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_ClockConfig+0x250>)
 80021f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80021f8:	250b      	movs	r5, #11
 80021fa:	197c      	adds	r4, r7, r5
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff f80d 	bl	800121c <HAL_InitTick>
 8002202:	0003      	movs	r3, r0
 8002204:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002206:	197b      	adds	r3, r7, r5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800220e:	230b      	movs	r3, #11
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	e000      	b.n	8002218 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	00001388 	.word	0x00001388
 800222c:	fffff8ff 	.word	0xfffff8ff
 8002230:	ffffc7ff 	.word	0xffffc7ff
 8002234:	0800608c 	.word	0x0800608c
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	220c      	movs	r2, #12
 800224c:	4013      	ands	r3, r2
 800224e:	2b08      	cmp	r3, #8
 8002250:	d00e      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x34>
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d00f      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x3a>
 8002256:	2b04      	cmp	r3, #4
 8002258:	d157      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2210      	movs	r2, #16
 8002260:	4013      	ands	r3, r2
 8002262:	d002      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002266:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002268:	e05d      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_RCC_GetSysClockFreq+0xfc>)
 800226c:	613b      	str	r3, [r7, #16]
      break;
 800226e:	e05a      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_GetSysClockFreq+0x100>)
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	e057      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	220f      	movs	r2, #15
 800227c:	4013      	ands	r3, r2
 800227e:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	0d9b      	lsrs	r3, r3, #22
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	3301      	adds	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	4013      	ands	r3, r2
 800229a:	d00f      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	000a      	movs	r2, r1
 80022a0:	0152      	lsls	r2, r2, #5
 80022a2:	1a52      	subs	r2, r2, r1
 80022a4:	0193      	lsls	r3, r2, #6
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	185b      	adds	r3, r3, r1
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7fd ff3b 	bl	800012c <__udivsi3>
 80022b6:	0003      	movs	r3, r0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e023      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	4013      	ands	r3, r2
 80022c4:	d00f      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	000a      	movs	r2, r1
 80022ca:	0152      	lsls	r2, r2, #5
 80022cc:	1a52      	subs	r2, r2, r1
 80022ce:	0193      	lsls	r3, r2, #6
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	185b      	adds	r3, r3, r1
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fd ff26 	bl	800012c <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00e      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	000a      	movs	r2, r1
 80022ea:	0152      	lsls	r2, r2, #5
 80022ec:	1a52      	subs	r2, r2, r1
 80022ee:	0193      	lsls	r3, r2, #6
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	185b      	adds	r3, r3, r1
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fd ff16 	bl	800012c <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
      break;
 8002308:	e00d      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_GetSysClockFreq+0xf4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0b5b      	lsrs	r3, r3, #13
 8002310:	2207      	movs	r2, #7
 8002312:	4013      	ands	r3, r2
 8002314:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0212      	lsls	r2, r2, #8
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
      break;
 8002324:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002326:	693b      	ldr	r3, [r7, #16]
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b006      	add	sp, #24
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	003d0900 	.word	0x003d0900
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200
 8002340:	080060a4 	.word	0x080060a4

08002344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b02      	ldr	r3, [pc, #8]	; (8002354 <HAL_RCC_GetHCLKFreq+0x10>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff2 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002360:	0001      	movs	r1, r0
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	2207      	movs	r2, #7
 800236a:	4013      	ands	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	40d9      	lsrs	r1, r3
 8002372:	000b      	movs	r3, r1
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40021000 	.word	0x40021000
 8002380:	0800609c 	.word	0x0800609c

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002388:	f7ff ffdc 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 800238c:	0001      	movs	r1, r0
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	0adb      	lsrs	r3, r3, #11
 8002394:	2207      	movs	r2, #7
 8002396:	4013      	ands	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	40d9      	lsrs	r1, r3
 800239e:	000b      	movs	r3, r1
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800609c 	.word	0x0800609c

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2220      	movs	r2, #32
 80023be:	4013      	ands	r3, r2
 80023c0:	d106      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80023ce:	e0dd      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80023d0:	2317      	movs	r3, #23
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d8:	4b9c      	ldr	r3, [pc, #624]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	4013      	ands	r3, r2
 80023e2:	d10a      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e8:	4b98      	ldr	r3, [pc, #608]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0549      	lsls	r1, r1, #21
 80023ee:	430a      	orrs	r2, r1
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80023f2:	2317      	movs	r3, #23
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b95      	ldr	r3, [pc, #596]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d11a      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0049      	lsls	r1, r1, #1
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002414:	f7fe ff38 	bl	8001288 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7fe ff33 	bl	8001288 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e108      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b87      	ldr	r3, [pc, #540]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d0f0      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800243c:	4b83      	ldr	r3, [pc, #524]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	23c0      	movs	r3, #192	; 0xc0
 8002442:	039b      	lsls	r3, r3, #14
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	039b      	lsls	r3, r3, #14
 8002450:	4013      	ands	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	23c0      	movs	r3, #192	; 0xc0
 800245e:	039b      	lsls	r3, r3, #14
 8002460:	4013      	ands	r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d013      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	23c0      	movs	r3, #192	; 0xc0
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	401a      	ands	r2, r3
 8002472:	23c0      	movs	r3, #192	; 0xc0
 8002474:	029b      	lsls	r3, r3, #10
 8002476:	429a      	cmp	r2, r3
 8002478:	d10a      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	401a      	ands	r2, r3
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	429a      	cmp	r2, r3
 800248a:	d101      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0d8      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002490:	4b6e      	ldr	r3, [pc, #440]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d049      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	23c0      	movs	r3, #192	; 0xc0
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	4013      	ands	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d004      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2220      	movs	r2, #32
 80024b8:	4013      	ands	r3, r2
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	4013      	ands	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d034      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4013      	ands	r3, r2
 80024d6:	d02e      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024d8:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80024de:	4013      	ands	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024e2:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0309      	lsls	r1, r1, #12
 80024ec:	430a      	orrs	r2, r1
 80024ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f4:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024f6:	4958      	ldr	r1, [pc, #352]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d014      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe febc 	bl	8001288 <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002514:	e009      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe feb7 	bl	8001288 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e08b      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252a:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800252c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d0ef      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	029b      	lsls	r3, r3, #10
 800253e:	401a      	ands	r2, r3
 8002540:	23c0      	movs	r3, #192	; 0xc0
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	429a      	cmp	r2, r3
 8002546:	d10c      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002548:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a44      	ldr	r2, [pc, #272]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	039b      	lsls	r3, r3, #14
 800255a:	401a      	ands	r2, r3
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002564:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	23c0      	movs	r3, #192	; 0xc0
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	401a      	ands	r2, r3
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002572:	430a      	orrs	r2, r1
 8002574:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002586:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002588:	400a      	ands	r2, r1
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	2203      	movs	r2, #3
 800259c:	4393      	bics	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	220c      	movs	r2, #12
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2208      	movs	r2, #8
 80025ec:	4013      	ands	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002600:	430a      	orrs	r2, r1
 8002602:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800261e:	430a      	orrs	r2, r1
 8002620:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	4013      	ands	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800263c:	430a      	orrs	r2, r1
 800263e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b006      	add	sp, #24
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	fffcffff 	.word	0xfffcffff
 8002658:	fff7ffff 	.word	0xfff7ffff
 800265c:	00001388 	.word	0x00001388
 8002660:	ffcfffff 	.word	0xffcfffff
 8002664:	efffffff 	.word	0xefffffff
 8002668:	fffff3ff 	.word	0xfffff3ff
 800266c:	ffffcfff 	.word	0xffffcfff
 8002670:	fbffffff 	.word	0xfbffffff
 8002674:	fff3ffff 	.word	0xfff3ffff

08002678 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e08e      	b.n	80027a8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7fe fc7d 	bl	8000fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	2102      	movs	r1, #2
 80026ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	22ca      	movs	r2, #202	; 0xca
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2253      	movs	r2, #83	; 0x53
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 fbe0 	bl	8002e86 <RTC_EnterInitMode>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d009      	beq.n	80026de <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	22ff      	movs	r2, #255	; 0xff
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2221      	movs	r2, #33	; 0x21
 80026d6:	2104      	movs	r1, #4
 80026d8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e064      	b.n	80027a8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4931      	ldr	r1, [pc, #196]	; (80027b0 <HAL_RTC_Init+0x138>)
 80026ea:	400a      	ands	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6899      	ldr	r1, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68d2      	ldr	r2, [r2, #12]
 8002714:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	438a      	bics	r2, r1
 8002738:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2103      	movs	r1, #3
 8002746:	438a      	bics	r2, r1
 8002748:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2220      	movs	r2, #32
 800276a:	4013      	ands	r3, r2
 800276c:	d113      	bne.n	8002796 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fb61 	bl	8002e38 <HAL_RTC_WaitForSynchro>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d00d      	beq.n	8002796 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	22ff      	movs	r2, #255	; 0xff
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2221      	movs	r2, #33	; 0x21
 8002786:	2104      	movs	r1, #4
 8002788:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e008      	b.n	80027a8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027a6:	2300      	movs	r3, #0
  }
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ff8fffbf 	.word	0xff8fffbf

080027b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_RTC_SetTime+0x1a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0ad      	b.n	800292a <HAL_RTC_SetTime+0x176>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2221      	movs	r2, #33	; 0x21
 80027da:	2102      	movs	r1, #2
 80027dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d125      	bne.n	8002830 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	4013      	ands	r3, r2
 80027ee:	d102      	bne.n	80027f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fb6d 	bl	8002eda <RTC_ByteToBcd2>
 8002800:	0003      	movs	r3, r0
 8002802:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 fb66 	bl	8002eda <RTC_ByteToBcd2>
 800280e:	0003      	movs	r3, r0
 8002810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002812:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	789b      	ldrb	r3, [r3, #2]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 fb5e 	bl	8002eda <RTC_ByteToBcd2>
 800281e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002820:	0022      	movs	r2, r4
 8002822:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	78db      	ldrb	r3, [r3, #3]
 8002828:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e017      	b.n	8002860 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	4013      	ands	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800284e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002854:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	22ca      	movs	r2, #202	; 0xca
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2253      	movs	r2, #83	; 0x53
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fb07 	bl	8002e86 <RTC_EnterInitMode>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d00d      	beq.n	8002898 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2221      	movs	r2, #33	; 0x21
 8002888:	2104      	movs	r1, #4
 800288a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	2100      	movs	r1, #0
 8002892:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e048      	b.n	800292a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4925      	ldr	r1, [pc, #148]	; (8002934 <HAL_RTC_SetTime+0x180>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4922      	ldr	r1, [pc, #136]	; (8002938 <HAL_RTC_SetTime+0x184>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	438a      	bics	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2220      	movs	r2, #32
 80028e4:	4013      	ands	r3, r2
 80028e6:	d113      	bne.n	8002910 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 faa4 	bl	8002e38 <HAL_RTC_WaitForSynchro>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d00d      	beq.n	8002910 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2221      	movs	r2, #33	; 0x21
 8002900:	2104      	movs	r1, #4
 8002902:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e00c      	b.n	800292a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2221      	movs	r2, #33	; 0x21
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
  }
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b007      	add	sp, #28
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	007f7f7f 	.word	0x007f7f7f
 8002938:	fffbffff 	.word	0xfffbffff

0800293c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	045b      	lsls	r3, r3, #17
 800295a:	0c5a      	lsrs	r2, r3, #17
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_RTC_GetTime+0xb4>)
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	b2db      	uxtb	r3, r3
 8002972:	223f      	movs	r2, #63	; 0x3f
 8002974:	4013      	ands	r3, r2
 8002976:	b2da      	uxtb	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b2db      	uxtb	r3, r3
 8002982:	227f      	movs	r2, #127	; 0x7f
 8002984:	4013      	ands	r3, r2
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	227f      	movs	r2, #127	; 0x7f
 8002992:	4013      	ands	r3, r2
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	4013      	ands	r3, r2
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11a      	bne.n	80029e6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fab9 	bl	8002f2c <RTC_Bcd2ToByte>
 80029ba:	0003      	movs	r3, r0
 80029bc:	001a      	movs	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fab0 	bl	8002f2c <RTC_Bcd2ToByte>
 80029cc:	0003      	movs	r3, r0
 80029ce:	001a      	movs	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	789b      	ldrb	r3, [r3, #2]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 faa7 	bl	8002f2c <RTC_Bcd2ToByte>
 80029de:	0003      	movs	r3, r0
 80029e0:	001a      	movs	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b006      	add	sp, #24
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	007f7f7f 	.word	0x007f7f7f

080029f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	5c9b      	ldrb	r3, [r3, r2]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_RTC_SetDate+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e099      	b.n	8002b42 <HAL_RTC_SetDate+0x14e>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	; 0x21
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10e      	bne.n	8002a42 <HAL_RTC_SetDate+0x4e>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d008      	beq.n	8002a42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4393      	bics	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	330a      	adds	r3, #10
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11c      	bne.n	8002a82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fa44 	bl	8002eda <RTC_ByteToBcd2>
 8002a52:	0003      	movs	r3, r0
 8002a54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fa3d 	bl	8002eda <RTC_ByteToBcd2>
 8002a60:	0003      	movs	r3, r0
 8002a62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 fa35 	bl	8002eda <RTC_ByteToBcd2>
 8002a70:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a72:	0022      	movs	r2, r4
 8002a74:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e00e      	b.n	8002aa0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a8e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	22ca      	movs	r2, #202	; 0xca
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2253      	movs	r2, #83	; 0x53
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 f9e7 	bl	8002e86 <RTC_EnterInitMode>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	2104      	movs	r1, #4
 8002aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e034      	b.n	8002b42 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	491b      	ldr	r1, [pc, #108]	; (8002b4c <HAL_RTC_SetDate+0x158>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	438a      	bics	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2220      	movs	r2, #32
 8002afc:	4013      	ands	r3, r2
 8002afe:	d113      	bne.n	8002b28 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f998 	bl	8002e38 <HAL_RTC_WaitForSynchro>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2221      	movs	r2, #33	; 0x21
 8002b18:	2104      	movs	r1, #4
 8002b1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00c      	b.n	8002b42 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	2101      	movs	r1, #1
 8002b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
  }
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b007      	add	sp, #28
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	00ffff3f 	.word	0x00ffff3f

08002b50 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_RTC_GetDate+0x98>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	221f      	movs	r2, #31
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	223f      	movs	r2, #63	; 0x3f
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2207      	movs	r2, #7
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11a      	bne.n	8002bdc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f9be 	bl	8002f2c <RTC_Bcd2ToByte>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f9b5 	bl	8002f2c <RTC_Bcd2ToByte>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	789b      	ldrb	r3, [r3, #2]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f9ac 	bl	8002f2c <RTC_Bcd2ToByte>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	00ffff3f 	.word	0x00ffff3f

08002bec <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_RTC_SetAlarm+0x1a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e10c      	b.n	8002e20 <HAL_RTC_SetAlarm+0x234>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2221      	movs	r2, #33	; 0x21
 8002c12:	2102      	movs	r1, #2
 8002c14:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d136      	bne.n	8002c8a <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	4013      	ands	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f951 	bl	8002eda <RTC_ByteToBcd2>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 f94a 	bl	8002eda <RTC_ByteToBcd2>
 8002c46:	0003      	movs	r3, r0
 8002c48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	789b      	ldrb	r3, [r3, #2]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f942 	bl	8002eda <RTC_ByteToBcd2>
 8002c56:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c58:	0022      	movs	r2, r4
 8002c5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	78db      	ldrb	r3, [r3, #3]
 8002c60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c62:	431a      	orrs	r2, r3
 8002c64:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	5c9b      	ldrb	r3, [r3, r2]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f934 	bl	8002eda <RTC_ByteToBcd2>
 8002c72:	0003      	movs	r3, r0
 8002c74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c76:	0022      	movs	r2, r4
 8002c78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e022      	b.n	8002cd0 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	4013      	ands	r3, r2
 8002c94:	d102      	bne.n	8002c9c <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ca8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002cae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002cb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5c5b      	ldrb	r3, [r3, r1]
 8002cbe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002cc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002cc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	22ca      	movs	r2, #202	; 0xca
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2253      	movs	r2, #83	; 0x53
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d143      	bne.n	8002d80 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4949      	ldr	r1, [pc, #292]	; (8002e28 <HAL_RTC_SetAlarm+0x23c>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4946      	ldr	r1, [pc, #280]	; (8002e2c <HAL_RTC_SetAlarm+0x240>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002d18:	f7fe fab6 	bl	8001288 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d20:	e016      	b.n	8002d50 <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d22:	f7fe fab1 	bl	8001288 <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad2      	subs	r2, r2, r3
 8002d2c:	23fa      	movs	r3, #250	; 0xfa
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d90d      	bls.n	8002d50 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2221      	movs	r2, #33	; 0x21
 8002d40:	2103      	movs	r1, #3
 8002d42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e067      	b.n	8002e20 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0e2      	beq.n	8002d22 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0049      	lsls	r1, r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	e042      	b.n	8002e06 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4929      	ldr	r1, [pc, #164]	; (8002e30 <HAL_RTC_SetAlarm+0x244>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4926      	ldr	r1, [pc, #152]	; (8002e34 <HAL_RTC_SetAlarm+0x248>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002da0:	f7fe fa72 	bl	8001288 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002da8:	e016      	b.n	8002dd8 <HAL_RTC_SetAlarm+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002daa:	f7fe fa6d 	bl	8001288 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	23fa      	movs	r3, #250	; 0xfa
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d90d      	bls.n	8002dd8 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2221      	movs	r2, #33	; 0x21
 8002dc8:	2103      	movs	r1, #3
 8002dca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e023      	b.n	8002e20 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d0e2      	beq.n	8002daa <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0089      	lsls	r1, r1, #2
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2221      	movs	r2, #33	; 0x21
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b009      	add	sp, #36	; 0x24
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	fffffeff 	.word	0xfffffeff
 8002e2c:	ffffefff 	.word	0xffffefff
 8002e30:	fffffdff 	.word	0xfffffdff
 8002e34:	ffffdfff 	.word	0xffffdfff

08002e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	21a0      	movs	r1, #160	; 0xa0
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e50:	f7fe fa1a 	bl	8001288 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e58:	e00a      	b.n	8002e70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e5a:	f7fe fa15 	bl	8001288 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	23fa      	movs	r3, #250	; 0xfa
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d901      	bls.n	8002e70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2240      	movs	r2, #64	; 0x40
 8002e96:	4013      	ands	r3, r2
 8002e98:	d11a      	bne.n	8002ed0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4252      	negs	r2, r2
 8002ea2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ea4:	f7fe f9f0 	bl	8001288 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002eac:	e00a      	b.n	8002ec4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002eae:	f7fe f9eb 	bl	8001288 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	23fa      	movs	r3, #250	; 0xfa
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d901      	bls.n	8002ec4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e006      	b.n	8002ed2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d0ee      	beq.n	8002eae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	1dfb      	adds	r3, r7, #7
 8002ee4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002eea:	230b      	movs	r3, #11
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	1dfa      	adds	r2, r7, #7
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002ef4:	e008      	b.n	8002f08 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002efc:	220b      	movs	r2, #11
 8002efe:	18bb      	adds	r3, r7, r2
 8002f00:	18ba      	adds	r2, r7, r2
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	3a0a      	subs	r2, #10
 8002f06:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002f08:	230b      	movs	r3, #11
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	d8f1      	bhi.n	8002ef6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	230b      	movs	r3, #11
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b2db      	uxtb	r3, r3
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	0002      	movs	r2, r0
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	001a      	movs	r2, r3
 8002f42:	0013      	movs	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	210f      	movs	r1, #15
 8002f56:	400b      	ands	r3, r1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	18d3      	adds	r3, r2, r3
 8002f5c:	b2db      	uxtb	r3, r3
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e08c      	b.n	800309c <HAL_RTCEx_SetWakeUpTimer+0x134>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2221      	movs	r2, #33	; 0x21
 8002f8e:	2102      	movs	r1, #2
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	22ca      	movs	r2, #202	; 0xca
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2253      	movs	r2, #83	; 0x53
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4013      	ands	r3, r2
 8002fae:	d021      	beq.n	8002ff4 <HAL_RTCEx_SetWakeUpTimer+0x8c>
  {
    tickstart = HAL_GetTick();
 8002fb0:	f7fe f96a 	bl	8001288 <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002fb8:	e016      	b.n	8002fe8 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fba:	f7fe f965 	bl	8001288 <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	23fa      	movs	r3, #250	; 0xfa
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d90d      	bls.n	8002fe8 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2221      	movs	r2, #33	; 0x21
 8002fd8:	2103      	movs	r1, #3
 8002fda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e059      	b.n	800309c <HAL_RTCEx_SetWakeUpTimer+0x134>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d1e2      	bne.n	8002fba <HAL_RTCEx_SetWakeUpTimer+0x52>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4929      	ldr	r1, [pc, #164]	; (80030a4 <HAL_RTCEx_SetWakeUpTimer+0x13c>)
 8003000:	400a      	ands	r2, r1
 8003002:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003004:	f7fe f940 	bl	8001288 <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800300c:	e016      	b.n	800303c <HAL_RTCEx_SetWakeUpTimer+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800300e:	f7fe f93b 	bl	8001288 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	23fa      	movs	r3, #250	; 0xfa
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	429a      	cmp	r2, r3
 800301e:	d90d      	bls.n	800303c <HAL_RTCEx_SetWakeUpTimer+0xd4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	2103      	movs	r1, #3
 800302e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e02f      	b.n	800309c <HAL_RTCEx_SetWakeUpTimer+0x134>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d0e2      	beq.n	800300e <HAL_RTCEx_SetWakeUpTimer+0xa6>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2107      	movs	r1, #7
 8003054:	438a      	bics	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	00c9      	lsls	r1, r1, #3
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2221      	movs	r2, #33	; 0x21
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b006      	add	sp, #24
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	fffffbff 	.word	0xfffffbff

080030a8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3350      	adds	r3, #80	; 0x50
 80030ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	18d3      	adds	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e044      	b.n	8003170 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2270      	movs	r2, #112	; 0x70
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fd ff69 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	; 0x24
 8003102:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	438a      	bics	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fa0e 	bl	8003538 <UART_SetConfig>
 800311c:	0003      	movs	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e024      	b.n	8003170 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fd19 	bl	8003b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_UART_Init+0xa4>)
 8003142:	400a      	ands	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	212a      	movs	r1, #42	; 0x2a
 8003152:	438a      	bics	r2, r1
 8003154:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 fdb1 	bl	8003cd0 <UART_CheckIdleState>
 800316e:	0003      	movs	r3, r0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	ffffb7ff 	.word	0xffffb7ff

0800317c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	1dbb      	adds	r3, r7, #6
 800318a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003190:	2b20      	cmp	r3, #32
 8003192:	d000      	beq.n	8003196 <HAL_UART_Transmit+0x1a>
 8003194:	e094      	b.n	80032c0 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_UART_Transmit+0x28>
 800319c:	1dbb      	adds	r3, r7, #6
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e08c      	b.n	80032c2 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d109      	bne.n	80031c8 <HAL_UART_Transmit+0x4c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2201      	movs	r2, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e07c      	b.n	80032c2 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2270      	movs	r2, #112	; 0x70
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Transmit+0x5a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e075      	b.n	80032c2 <HAL_UART_Transmit+0x146>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2270      	movs	r2, #112	; 0x70
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2221      	movs	r2, #33	; 0x21
 80031e8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031ea:	f7fe f84d 	bl	8001288 <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1dba      	adds	r2, r7, #6
 80031f6:	2150      	movs	r1, #80	; 0x50
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1dba      	adds	r2, r7, #6
 8003200:	2152      	movs	r1, #82	; 0x52
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	429a      	cmp	r2, r3
 8003210:	d108      	bne.n	8003224 <HAL_UART_Transmit+0xa8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e003      	b.n	800322c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800322c:	e02c      	b.n	8003288 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	0013      	movs	r3, r2
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	f000 fd8e 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e03c      	b.n	80032c2 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	001a      	movs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	05d2      	lsls	r2, r2, #23
 800325a:	0dd2      	lsrs	r2, r2, #23
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3302      	adds	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e007      	b.n	8003276 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	3301      	adds	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2252      	movs	r2, #82	; 0x52
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b299      	uxth	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2252      	movs	r2, #82	; 0x52
 8003286:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2252      	movs	r2, #82	; 0x52
 800328c:	5a9b      	ldrh	r3, [r3, r2]
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1cc      	bne.n	800322e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	0013      	movs	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	f000 fd5b 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e009      	b.n	80032c2 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2270      	movs	r2, #112	; 0x70
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b008      	add	sp, #32
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	220f      	movs	r2, #15
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d112      	bne.n	8003320 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4013      	ands	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2220      	movs	r2, #32
 8003306:	4013      	ands	r3, r2
 8003308:	d00a      	beq.n	8003320 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	2b00      	cmp	r3, #0
 8003310:	d100      	bne.n	8003314 <HAL_UART_IRQHandler+0x48>
 8003312:	e0f6      	b.n	8003502 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	0010      	movs	r0, r2
 800331c:	4798      	blx	r3
      }
      return;
 800331e:	e0f0      	b.n	8003502 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d100      	bne.n	8003328 <HAL_UART_IRQHandler+0x5c>
 8003326:	e0b8      	b.n	800349a <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d105      	bne.n	800333c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	2390      	movs	r3, #144	; 0x90
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d100      	bne.n	800333c <HAL_UART_IRQHandler+0x70>
 800333a:	e0ae      	b.n	800349a <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_UART_IRQHandler+0x96>
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800335a:	2201      	movs	r2, #1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2202      	movs	r2, #2
 8003366:	4013      	ands	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_UART_IRQHandler+0xba>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2202      	movs	r2, #2
 8003378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337e:	2204      	movs	r2, #4
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2204      	movs	r2, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_UART_IRQHandler+0xde>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2204      	movs	r2, #4
 800339c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	2202      	movs	r2, #2
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2208      	movs	r2, #8
 80033ae:	4013      	ands	r3, r2
 80033b0:	d011      	beq.n	80033d6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2220      	movs	r2, #32
 80033b6:	4013      	ands	r3, r2
 80033b8:	d103      	bne.n	80033c2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033c0:	d009      	beq.n	80033d6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2208      	movs	r2, #8
 80033c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	2208      	movs	r2, #8
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d100      	bne.n	80033e0 <HAL_UART_IRQHandler+0x114>
 80033de:	e092      	b.n	8003506 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2220      	movs	r2, #32
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00c      	beq.n	8003402 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2220      	movs	r2, #32
 80033ec:	4013      	ands	r3, r2
 80033ee:	d008      	beq.n	8003402 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	0010      	movs	r0, r2
 8003400:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003406:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	4013      	ands	r3, r2
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d003      	beq.n	800341e <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2208      	movs	r2, #8
 800341a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800341c:	d033      	beq.n	8003486 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fce5 	bl	8003df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4013      	ands	r3, r2
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d123      	bne.n	800347c <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2140      	movs	r1, #64	; 0x40
 8003440:	438a      	bics	r2, r1
 8003442:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003450:	4a30      	ldr	r2, [pc, #192]	; (8003514 <HAL_UART_IRQHandler+0x248>)
 8003452:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003458:	0018      	movs	r0, r3
 800345a:	f7fe f817 	bl	800148c <HAL_DMA_Abort_IT>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d019      	beq.n	8003496 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346c:	0018      	movs	r0, r3
 800346e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	e011      	b.n	8003496 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f857 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347a:	e00c      	b.n	8003496 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f852 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	e007      	b.n	8003496 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f84d 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003494:	e037      	b.n	8003506 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003496:	46c0      	nop			; (mov r8, r8)
    return;
 8003498:	e035      	b.n	8003506 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	035b      	lsls	r3, r3, #13
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_UART_IRQHandler+0x1f6>
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	03db      	lsls	r3, r3, #15
 80034aa:	4013      	ands	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	0352      	lsls	r2, r2, #13
 80034b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fce9 	bl	8003e92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034c0:	e024      	b.n	800350c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	4013      	ands	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d017      	beq.n	800350a <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	0010      	movs	r0, r2
 80034e2:	4798      	blx	r3
    }
    return;
 80034e4:	e011      	b.n	800350a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_UART_IRQHandler+0x240>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00a      	beq.n	800350c <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fcb0 	bl	8003e5e <UART_EndTransmit_IT>
    return;
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	e004      	b.n	800350c <HAL_UART_IRQHandler+0x240>
      return;
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	e002      	b.n	800350c <HAL_UART_IRQHandler+0x240>
    return;
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	e000      	b.n	800350c <HAL_UART_IRQHandler+0x240>
    return;
 800350a:	46c0      	nop			; (mov r8, r8)
  }

}
 800350c:	46bd      	mov	sp, r7
 800350e:	b008      	add	sp, #32
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	08003e31 	.word	0x08003e31

08003518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b08e      	sub	sp, #56	; 0x38
 800353c:	af00      	add	r7, sp, #0
 800353e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003540:	231b      	movs	r3, #27
 8003542:	2218      	movs	r2, #24
 8003544:	4694      	mov	ip, r2
 8003546:	44bc      	add	ip, r7
 8003548:	4463      	add	r3, ip
 800354a:	2210      	movs	r2, #16
 800354c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003552:	2313      	movs	r3, #19
 8003554:	2218      	movs	r2, #24
 8003556:	4694      	mov	ip, r2
 8003558:	44bc      	add	ip, r7
 800355a:	4463      	add	r3, ip
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4ac8      	ldr	r2, [pc, #800]	; (80038a4 <UART_SetConfig+0x36c>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4ac3      	ldr	r2, [pc, #780]	; (80038a8 <UART_SetConfig+0x370>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4abd      	ldr	r2, [pc, #756]	; (80038ac <UART_SetConfig+0x374>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c0:	4313      	orrs	r3, r2
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4ab9      	ldr	r2, [pc, #740]	; (80038b0 <UART_SetConfig+0x378>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4ab5      	ldr	r2, [pc, #724]	; (80038b4 <UART_SetConfig+0x37c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d134      	bne.n	800364e <UART_SetConfig+0x116>
 80035e4:	4bb4      	ldr	r3, [pc, #720]	; (80038b8 <UART_SetConfig+0x380>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	2203      	movs	r2, #3
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d015      	beq.n	800361c <UART_SetConfig+0xe4>
 80035f0:	d304      	bcc.n	80035fc <UART_SetConfig+0xc4>
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d00a      	beq.n	800360c <UART_SetConfig+0xd4>
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d018      	beq.n	800362c <UART_SetConfig+0xf4>
 80035fa:	e01f      	b.n	800363c <UART_SetConfig+0x104>
 80035fc:	231b      	movs	r3, #27
 80035fe:	2218      	movs	r2, #24
 8003600:	4694      	mov	ip, r2
 8003602:	44bc      	add	ip, r7
 8003604:	4463      	add	r3, ip
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e0ab      	b.n	8003764 <UART_SetConfig+0x22c>
 800360c:	231b      	movs	r3, #27
 800360e:	2218      	movs	r2, #24
 8003610:	4694      	mov	ip, r2
 8003612:	44bc      	add	ip, r7
 8003614:	4463      	add	r3, ip
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e0a3      	b.n	8003764 <UART_SetConfig+0x22c>
 800361c:	231b      	movs	r3, #27
 800361e:	2218      	movs	r2, #24
 8003620:	4694      	mov	ip, r2
 8003622:	44bc      	add	ip, r7
 8003624:	4463      	add	r3, ip
 8003626:	2204      	movs	r2, #4
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e09b      	b.n	8003764 <UART_SetConfig+0x22c>
 800362c:	231b      	movs	r3, #27
 800362e:	2218      	movs	r2, #24
 8003630:	4694      	mov	ip, r2
 8003632:	44bc      	add	ip, r7
 8003634:	4463      	add	r3, ip
 8003636:	2208      	movs	r2, #8
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e093      	b.n	8003764 <UART_SetConfig+0x22c>
 800363c:	231b      	movs	r3, #27
 800363e:	2218      	movs	r2, #24
 8003640:	4694      	mov	ip, r2
 8003642:	44bc      	add	ip, r7
 8003644:	4463      	add	r3, ip
 8003646:	2210      	movs	r2, #16
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	e08a      	b.n	8003764 <UART_SetConfig+0x22c>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a9a      	ldr	r2, [pc, #616]	; (80038bc <UART_SetConfig+0x384>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d137      	bne.n	80036c8 <UART_SetConfig+0x190>
 8003658:	4b97      	ldr	r3, [pc, #604]	; (80038b8 <UART_SetConfig+0x380>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	220c      	movs	r2, #12
 800365e:	4013      	ands	r3, r2
 8003660:	2b04      	cmp	r3, #4
 8003662:	d018      	beq.n	8003696 <UART_SetConfig+0x15e>
 8003664:	d802      	bhi.n	800366c <UART_SetConfig+0x134>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <UART_SetConfig+0x13e>
 800366a:	e024      	b.n	80036b6 <UART_SetConfig+0x17e>
 800366c:	2b08      	cmp	r3, #8
 800366e:	d00a      	beq.n	8003686 <UART_SetConfig+0x14e>
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d018      	beq.n	80036a6 <UART_SetConfig+0x16e>
 8003674:	e01f      	b.n	80036b6 <UART_SetConfig+0x17e>
 8003676:	231b      	movs	r3, #27
 8003678:	2218      	movs	r2, #24
 800367a:	4694      	mov	ip, r2
 800367c:	44bc      	add	ip, r7
 800367e:	4463      	add	r3, ip
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e06e      	b.n	8003764 <UART_SetConfig+0x22c>
 8003686:	231b      	movs	r3, #27
 8003688:	2218      	movs	r2, #24
 800368a:	4694      	mov	ip, r2
 800368c:	44bc      	add	ip, r7
 800368e:	4463      	add	r3, ip
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e066      	b.n	8003764 <UART_SetConfig+0x22c>
 8003696:	231b      	movs	r3, #27
 8003698:	2218      	movs	r2, #24
 800369a:	4694      	mov	ip, r2
 800369c:	44bc      	add	ip, r7
 800369e:	4463      	add	r3, ip
 80036a0:	2204      	movs	r2, #4
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e05e      	b.n	8003764 <UART_SetConfig+0x22c>
 80036a6:	231b      	movs	r3, #27
 80036a8:	2218      	movs	r2, #24
 80036aa:	4694      	mov	ip, r2
 80036ac:	44bc      	add	ip, r7
 80036ae:	4463      	add	r3, ip
 80036b0:	2208      	movs	r2, #8
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e056      	b.n	8003764 <UART_SetConfig+0x22c>
 80036b6:	231b      	movs	r3, #27
 80036b8:	2218      	movs	r2, #24
 80036ba:	4694      	mov	ip, r2
 80036bc:	44bc      	add	ip, r7
 80036be:	4463      	add	r3, ip
 80036c0:	2210      	movs	r2, #16
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	e04d      	b.n	8003764 <UART_SetConfig+0x22c>
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a77      	ldr	r2, [pc, #476]	; (80038ac <UART_SetConfig+0x374>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d141      	bne.n	8003756 <UART_SetConfig+0x21e>
 80036d2:	4b79      	ldr	r3, [pc, #484]	; (80038b8 <UART_SetConfig+0x380>)
 80036d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d6:	23c0      	movs	r3, #192	; 0xc0
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4013      	ands	r3, r2
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01f      	beq.n	8003724 <UART_SetConfig+0x1ec>
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	00d2      	lsls	r2, r2, #3
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d802      	bhi.n	80036f2 <UART_SetConfig+0x1ba>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <UART_SetConfig+0x1cc>
 80036f0:	e028      	b.n	8003744 <UART_SetConfig+0x20c>
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00c      	beq.n	8003714 <UART_SetConfig+0x1dc>
 80036fa:	22c0      	movs	r2, #192	; 0xc0
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <UART_SetConfig+0x1fc>
 8003702:	e01f      	b.n	8003744 <UART_SetConfig+0x20c>
 8003704:	231b      	movs	r3, #27
 8003706:	2218      	movs	r2, #24
 8003708:	4694      	mov	ip, r2
 800370a:	44bc      	add	ip, r7
 800370c:	4463      	add	r3, ip
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e027      	b.n	8003764 <UART_SetConfig+0x22c>
 8003714:	231b      	movs	r3, #27
 8003716:	2218      	movs	r2, #24
 8003718:	4694      	mov	ip, r2
 800371a:	44bc      	add	ip, r7
 800371c:	4463      	add	r3, ip
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e01f      	b.n	8003764 <UART_SetConfig+0x22c>
 8003724:	231b      	movs	r3, #27
 8003726:	2218      	movs	r2, #24
 8003728:	4694      	mov	ip, r2
 800372a:	44bc      	add	ip, r7
 800372c:	4463      	add	r3, ip
 800372e:	2204      	movs	r2, #4
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e017      	b.n	8003764 <UART_SetConfig+0x22c>
 8003734:	231b      	movs	r3, #27
 8003736:	2218      	movs	r2, #24
 8003738:	4694      	mov	ip, r2
 800373a:	44bc      	add	ip, r7
 800373c:	4463      	add	r3, ip
 800373e:	2208      	movs	r2, #8
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x22c>
 8003744:	231b      	movs	r3, #27
 8003746:	2218      	movs	r2, #24
 8003748:	4694      	mov	ip, r2
 800374a:	44bc      	add	ip, r7
 800374c:	4463      	add	r3, ip
 800374e:	2210      	movs	r2, #16
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	e006      	b.n	8003764 <UART_SetConfig+0x22c>
 8003756:	231b      	movs	r3, #27
 8003758:	2218      	movs	r2, #24
 800375a:	4694      	mov	ip, r2
 800375c:	44bc      	add	ip, r7
 800375e:	4463      	add	r3, ip
 8003760:	2210      	movs	r2, #16
 8003762:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a50      	ldr	r2, [pc, #320]	; (80038ac <UART_SetConfig+0x374>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d000      	beq.n	8003770 <UART_SetConfig+0x238>
 800376e:	e083      	b.n	8003878 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003770:	231b      	movs	r3, #27
 8003772:	2218      	movs	r2, #24
 8003774:	4694      	mov	ip, r2
 8003776:	44bc      	add	ip, r7
 8003778:	4463      	add	r3, ip
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d00d      	beq.n	800379c <UART_SetConfig+0x264>
 8003780:	dc02      	bgt.n	8003788 <UART_SetConfig+0x250>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <UART_SetConfig+0x25a>
 8003786:	e01d      	b.n	80037c4 <UART_SetConfig+0x28c>
 8003788:	2b04      	cmp	r3, #4
 800378a:	d012      	beq.n	80037b2 <UART_SetConfig+0x27a>
 800378c:	2b08      	cmp	r3, #8
 800378e:	d015      	beq.n	80037bc <UART_SetConfig+0x284>
 8003790:	e018      	b.n	80037c4 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003792:	f7fe fde1 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003796:	0003      	movs	r3, r0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800379a:	e01b      	b.n	80037d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <UART_SetConfig+0x380>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2210      	movs	r2, #16
 80037a2:	4013      	ands	r3, r2
 80037a4:	d002      	beq.n	80037ac <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <UART_SetConfig+0x388>)
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80037aa:	e013      	b.n	80037d4 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80037ac:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <UART_SetConfig+0x38c>)
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037b0:	e010      	b.n	80037d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037b2:	f7fe fd43 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80037b6:	0003      	movs	r3, r0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037c2:	e007      	b.n	80037d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80037c4:	2313      	movs	r3, #19
 80037c6:	2218      	movs	r2, #24
 80037c8:	4694      	mov	ip, r2
 80037ca:	44bc      	add	ip, r7
 80037cc:	4463      	add	r3, ip
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
        break;
 80037d2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <UART_SetConfig+0x2a4>
 80037da:	e1a6      	b.n	8003b2a <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	0013      	movs	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d305      	bcc.n	80037f8 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d907      	bls.n	8003808 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80037f8:	2313      	movs	r3, #19
 80037fa:	2218      	movs	r2, #24
 80037fc:	4694      	mov	ip, r2
 80037fe:	44bc      	add	ip, r7
 8003800:	4463      	add	r3, ip
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e190      	b.n	8003b2a <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	6939      	ldr	r1, [r7, #16]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	000b      	movs	r3, r1
 8003816:	0e1b      	lsrs	r3, r3, #24
 8003818:	0010      	movs	r0, r2
 800381a:	0205      	lsls	r5, r0, #8
 800381c:	431d      	orrs	r5, r3
 800381e:	000b      	movs	r3, r1
 8003820:	021c      	lsls	r4, r3, #8
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68b8      	ldr	r0, [r7, #8]
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	1900      	adds	r0, r0, r4
 8003834:	4169      	adcs	r1, r5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f7fc fe0c 	bl	8000460 <__aeabi_uldivmod>
 8003848:	0003      	movs	r3, r0
 800384a:	000c      	movs	r4, r1
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <UART_SetConfig+0x390>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d908      	bls.n	8003868 <UART_SetConfig+0x330>
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <UART_SetConfig+0x394>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d804      	bhi.n	8003868 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e160      	b.n	8003b2a <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8003868:	2313      	movs	r3, #19
 800386a:	2218      	movs	r2, #24
 800386c:	4694      	mov	ip, r2
 800386e:	44bc      	add	ip, r7
 8003870:	4463      	add	r3, ip
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e158      	b.n	8003b2a <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	429a      	cmp	r2, r3
 8003882:	d000      	beq.n	8003886 <UART_SetConfig+0x34e>
 8003884:	e0c3      	b.n	8003a0e <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8003886:	231b      	movs	r3, #27
 8003888:	2218      	movs	r2, #24
 800388a:	4694      	mov	ip, r2
 800388c:	44bc      	add	ip, r7
 800388e:	4463      	add	r3, ip
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d900      	bls.n	8003898 <UART_SetConfig+0x360>
 8003896:	e086      	b.n	80039a6 <UART_SetConfig+0x46e>
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <UART_SetConfig+0x398>)
 800389c:	18d3      	adds	r3, r2, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	469f      	mov	pc, r3
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	efff69f3 	.word	0xefff69f3
 80038a8:	ffffcfff 	.word	0xffffcfff
 80038ac:	40004800 	.word	0x40004800
 80038b0:	fffff4ff 	.word	0xfffff4ff
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40004400 	.word	0x40004400
 80038c0:	003d0900 	.word	0x003d0900
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	000002ff 	.word	0x000002ff
 80038cc:	000fffff 	.word	0x000fffff
 80038d0:	080060b0 	.word	0x080060b0
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038d4:	f7fe fd40 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 80038d8:	0003      	movs	r3, r0
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	18d2      	adds	r2, r2, r3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	0019      	movs	r1, r3
 80038ea:	0010      	movs	r0, r2
 80038ec:	f7fc fc1e 	bl	800012c <__udivsi3>
 80038f0:	0003      	movs	r3, r0
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038f6:	e05e      	b.n	80039b6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038f8:	f7fe fd44 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 80038fc:	0003      	movs	r3, r0
 80038fe:	005a      	lsls	r2, r3, #1
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	18d2      	adds	r2, r2, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f7fc fc0c 	bl	800012c <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	b29b      	uxth	r3, r3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800391a:	e04c      	b.n	80039b6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800391c:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <UART_SetConfig+0x614>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d00e      	beq.n	8003944 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	4a88      	ldr	r2, [pc, #544]	; (8003b50 <UART_SetConfig+0x618>)
 800392e:	189a      	adds	r2, r3, r2
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0019      	movs	r1, r3
 8003936:	0010      	movs	r0, r2
 8003938:	f7fc fbf8 	bl	800012c <__udivsi3>
 800393c:	0003      	movs	r3, r0
 800393e:	b29b      	uxth	r3, r3
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003942:	e038      	b.n	80039b6 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	4a82      	ldr	r2, [pc, #520]	; (8003b54 <UART_SetConfig+0x61c>)
 800394c:	189a      	adds	r2, r3, r2
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	0019      	movs	r1, r3
 8003954:	0010      	movs	r0, r2
 8003956:	f7fc fbe9 	bl	800012c <__udivsi3>
 800395a:	0003      	movs	r3, r0
 800395c:	b29b      	uxth	r3, r3
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003960:	e029      	b.n	80039b6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003962:	f7fe fc6b 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8003966:	0003      	movs	r3, r0
 8003968:	005a      	lsls	r2, r3, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	18d2      	adds	r2, r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0019      	movs	r1, r3
 8003978:	0010      	movs	r0, r2
 800397a:	f7fc fbd7 	bl	800012c <__udivsi3>
 800397e:	0003      	movs	r3, r0
 8003980:	b29b      	uxth	r3, r3
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003984:	e017      	b.n	80039b6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	0252      	lsls	r2, r2, #9
 8003990:	189a      	adds	r2, r3, r2
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0019      	movs	r1, r3
 8003998:	0010      	movs	r0, r2
 800399a:	f7fc fbc7 	bl	800012c <__udivsi3>
 800399e:	0003      	movs	r3, r0
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039a4:	e007      	b.n	80039b6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039a6:	2313      	movs	r3, #19
 80039a8:	2218      	movs	r2, #24
 80039aa:	4694      	mov	ip, r2
 80039ac:	44bc      	add	ip, r7
 80039ae:	4463      	add	r3, ip
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
        break;
 80039b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d920      	bls.n	80039fe <UART_SetConfig+0x4c6>
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <UART_SetConfig+0x620>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d81c      	bhi.n	80039fe <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	200a      	movs	r0, #10
 80039ca:	2418      	movs	r4, #24
 80039cc:	193b      	adds	r3, r7, r4
 80039ce:	181b      	adds	r3, r3, r0
 80039d0:	210f      	movs	r1, #15
 80039d2:	438a      	bics	r2, r1
 80039d4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2207      	movs	r2, #7
 80039de:	4013      	ands	r3, r2
 80039e0:	b299      	uxth	r1, r3
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	181b      	adds	r3, r3, r0
 80039e6:	193a      	adds	r2, r7, r4
 80039e8:	1812      	adds	r2, r2, r0
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	193a      	adds	r2, r7, r4
 80039f6:	1812      	adds	r2, r2, r0
 80039f8:	8812      	ldrh	r2, [r2, #0]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	e095      	b.n	8003b2a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80039fe:	2313      	movs	r3, #19
 8003a00:	2218      	movs	r2, #24
 8003a02:	4694      	mov	ip, r2
 8003a04:	44bc      	add	ip, r7
 8003a06:	4463      	add	r3, ip
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e08d      	b.n	8003b2a <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8003a0e:	231b      	movs	r3, #27
 8003a10:	2218      	movs	r2, #24
 8003a12:	4694      	mov	ip, r2
 8003a14:	44bc      	add	ip, r7
 8003a16:	4463      	add	r3, ip
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d86a      	bhi.n	8003af4 <UART_SetConfig+0x5bc>
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	4b4e      	ldr	r3, [pc, #312]	; (8003b5c <UART_SetConfig+0x624>)
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a28:	f7fe fc96 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	18d2      	adds	r2, r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	f7fc fb75 	bl	800012c <__udivsi3>
 8003a42:	0003      	movs	r3, r0
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a48:	e05c      	b.n	8003b04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a4a:	f7fe fc9b 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	18d2      	adds	r2, r2, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	0010      	movs	r0, r2
 8003a60:	f7fc fb64 	bl	800012c <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a6a:	e04b      	b.n	8003b04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <UART_SetConfig+0x614>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2210      	movs	r2, #16
 8003a72:	4013      	ands	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <UART_SetConfig+0x628>)
 8003a7e:	189a      	adds	r2, r3, r2
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0019      	movs	r1, r3
 8003a86:	0010      	movs	r0, r2
 8003a88:	f7fc fb50 	bl	800012c <__udivsi3>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003a92:	e037      	b.n	8003b04 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <UART_SetConfig+0x62c>)
 8003a9c:	189a      	adds	r2, r3, r2
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	f7fc fb41 	bl	800012c <__udivsi3>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ab0:	e028      	b.n	8003b04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ab2:	f7fe fbc3 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	18d2      	adds	r2, r2, r3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	f7fc fb30 	bl	800012c <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ad2:	e017      	b.n	8003b04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	0212      	lsls	r2, r2, #8
 8003ade:	189a      	adds	r2, r3, r2
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	f7fc fb20 	bl	800012c <__udivsi3>
 8003aec:	0003      	movs	r3, r0
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003af2:	e007      	b.n	8003b04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003af4:	2313      	movs	r3, #19
 8003af6:	2218      	movs	r2, #24
 8003af8:	4694      	mov	ip, r2
 8003afa:	44bc      	add	ip, r7
 8003afc:	4463      	add	r3, ip
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
        break;
 8003b02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d908      	bls.n	8003b1c <UART_SetConfig+0x5e4>
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <UART_SetConfig+0x620>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d804      	bhi.n	8003b1c <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e006      	b.n	8003b2a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8003b1c:	2313      	movs	r3, #19
 8003b1e:	2218      	movs	r2, #24
 8003b20:	4694      	mov	ip, r2
 8003b22:	44bc      	add	ip, r7
 8003b24:	4463      	add	r3, ip
 8003b26:	2201      	movs	r2, #1
 8003b28:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b36:	2313      	movs	r3, #19
 8003b38:	2218      	movs	r2, #24
 8003b3a:	4694      	mov	ip, r2
 8003b3c:	44bc      	add	ip, r7
 8003b3e:	4463      	add	r3, ip
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b00e      	add	sp, #56	; 0x38
 8003b48:	bdb0      	pop	{r4, r5, r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	007a1200 	.word	0x007a1200
 8003b54:	01e84800 	.word	0x01e84800
 8003b58:	0000ffff 	.word	0x0000ffff
 8003b5c:	080060d4 	.word	0x080060d4
 8003b60:	003d0900 	.word	0x003d0900
 8003b64:	00f42400 	.word	0x00f42400

08003b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <UART_AdvFeatureConfig+0x144>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2202      	movs	r2, #2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a43      	ldr	r2, [pc, #268]	; (8003cb0 <UART_AdvFeatureConfig+0x148>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2204      	movs	r2, #4
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <UART_AdvFeatureConfig+0x14c>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2208      	movs	r2, #8
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <UART_AdvFeatureConfig+0x150>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <UART_AdvFeatureConfig+0x154>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	2220      	movs	r2, #32
 8003c20:	4013      	ands	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <UART_AdvFeatureConfig+0x158>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	4013      	ands	r3, r2
 8003c44:	d01d      	beq.n	8003c82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <UART_AdvFeatureConfig+0x15c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	0019      	movs	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	035b      	lsls	r3, r3, #13
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d10b      	bne.n	8003c82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <UART_AdvFeatureConfig+0x160>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <UART_AdvFeatureConfig+0x164>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	fffdffff 	.word	0xfffdffff
 8003cb0:	fffeffff 	.word	0xfffeffff
 8003cb4:	fffbffff 	.word	0xfffbffff
 8003cb8:	ffff7fff 	.word	0xffff7fff
 8003cbc:	ffffefff 	.word	0xffffefff
 8003cc0:	ffffdfff 	.word	0xffffdfff
 8003cc4:	ffefffff 	.word	0xffefffff
 8003cc8:	ff9fffff 	.word	0xff9fffff
 8003ccc:	fff7ffff 	.word	0xfff7ffff

08003cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cde:	f7fd fad3 	bl	8001288 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2208      	movs	r2, #8
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d10d      	bne.n	8003d10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	0399      	lsls	r1, r3, #14
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <UART_CheckIdleState+0x88>)
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	0013      	movs	r3, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	f000 f82a 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e01f      	b.n	8003d50 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d10d      	bne.n	8003d3a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	03d9      	lsls	r1, r3, #15
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <UART_CheckIdleState+0x88>)
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f000 f815 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d001      	beq.n	8003d3a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00a      	b.n	8003d50 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2270      	movs	r2, #112	; 0x70
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b004      	add	sp, #16
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	01ffffff 	.word	0x01ffffff

08003d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	1dfb      	adds	r3, r7, #7
 8003d6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	e029      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3301      	adds	r3, #1
 8003d72:	d026      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fd fa88 	bl	8001288 <HAL_GetTick>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11b      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4915      	ldr	r1, [pc, #84]	; (8003dec <UART_WaitOnFlagUntilTimeout+0x90>)
 8003d96:	400a      	ands	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2101      	movs	r1, #1
 8003da6:	438a      	bics	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2270      	movs	r2, #112	; 0x70
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	425a      	negs	r2, r3
 8003dd2:	4153      	adcs	r3, r2
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0c6      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	fffffe5f 	.word	0xfffffe5f

08003df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	490a      	ldr	r1, [pc, #40]	; (8003e2c <UART_EndRxTransfer+0x3c>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	438a      	bics	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffffedf 	.word	0xfffffedf

08003e30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	225a      	movs	r2, #90	; 0x5a
 8003e42:	2100      	movs	r1, #0
 8003e44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2252      	movs	r2, #82	; 0x52
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fb69 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2140      	movs	r1, #64	; 0x40
 8003e72:	438a      	bics	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff fb47 	bl	8003518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	; (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20000008 	.word	0x20000008

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	4d0c      	ldr	r5, [pc, #48]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb6:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	f002 f889 	bl	8005fd8 <_init>
 8003ec6:	4d0a      	ldr	r5, [pc, #40]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	; (8003ef4 <__libc_init_array+0x44>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	00b3      	lsls	r3, r6, #2
 8003ed6:	58eb      	ldr	r3, [r5, r3]
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	00b3      	lsls	r3, r6, #2
 8003ee0:	58eb      	ldr	r3, [r5, r3]
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	080063b8 	.word	0x080063b8
 8003eec:	080063b8 	.word	0x080063b8
 8003ef0:	080063b8 	.word	0x080063b8
 8003ef4:	080063bc 	.word	0x080063bc

08003ef8 <localtime>:
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <localtime+0x20>)
 8003efa:	b570      	push	{r4, r5, r6, lr}
 8003efc:	681c      	ldr	r4, [r3, #0]
 8003efe:	0005      	movs	r5, r0
 8003f00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <localtime+0x16>
 8003f06:	2024      	movs	r0, #36	; 0x24
 8003f08:	f000 f8fe 	bl	8004108 <malloc>
 8003f0c:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003f0e:	0028      	movs	r0, r5
 8003f10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003f12:	f000 f803 	bl	8003f1c <localtime_r>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	20000008 	.word	0x20000008

08003f1c <localtime_r>:
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	000c      	movs	r4, r1
 8003f20:	0007      	movs	r7, r0
 8003f22:	f000 ff15 	bl	8004d50 <__gettzinfo>
 8003f26:	0021      	movs	r1, r4
 8003f28:	0005      	movs	r5, r0
 8003f2a:	0038      	movs	r0, r7
 8003f2c:	f000 ff14 	bl	8004d58 <gmtime_r>
 8003f30:	4a71      	ldr	r2, [pc, #452]	; (80040f8 <localtime_r+0x1dc>)
 8003f32:	6943      	ldr	r3, [r0, #20]
 8003f34:	0004      	movs	r4, r0
 8003f36:	189e      	adds	r6, r3, r2
 8003f38:	07b3      	lsls	r3, r6, #30
 8003f3a:	d106      	bne.n	8003f4a <localtime_r+0x2e>
 8003f3c:	2164      	movs	r1, #100	; 0x64
 8003f3e:	0030      	movs	r0, r6
 8003f40:	f7fc fa64 	bl	800040c <__aeabi_idivmod>
 8003f44:	2301      	movs	r3, #1
 8003f46:	2900      	cmp	r1, #0
 8003f48:	d106      	bne.n	8003f58 <localtime_r+0x3c>
 8003f4a:	21c8      	movs	r1, #200	; 0xc8
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	0049      	lsls	r1, r1, #1
 8003f50:	f7fc fa5c 	bl	800040c <__aeabi_idivmod>
 8003f54:	424b      	negs	r3, r1
 8003f56:	414b      	adcs	r3, r1
 8003f58:	2130      	movs	r1, #48	; 0x30
 8003f5a:	434b      	muls	r3, r1
 8003f5c:	4967      	ldr	r1, [pc, #412]	; (80040fc <localtime_r+0x1e0>)
 8003f5e:	185b      	adds	r3, r3, r1
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	f000 fd13 	bl	800498c <__tz_lock>
 8003f66:	f000 fd13 	bl	8004990 <_tzset_unlocked>
 8003f6a:	4b65      	ldr	r3, [pc, #404]	; (8004100 <localtime_r+0x1e4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d025      	beq.n	8003fbe <localtime_r+0xa2>
 8003f72:	686b      	ldr	r3, [r5, #4]
 8003f74:	42b3      	cmp	r3, r6
 8003f76:	d10c      	bne.n	8003f92 <localtime_r+0x76>
 8003f78:	cf06      	ldmia	r7!, {r1, r2}
 8003f7a:	682e      	ldr	r6, [r5, #0]
 8003f7c:	6a28      	ldr	r0, [r5, #32]
 8003f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	d10e      	bne.n	8003fa2 <localtime_r+0x86>
 8003f84:	4293      	cmp	r3, r2
 8003f86:	dc11      	bgt.n	8003fac <localtime_r+0x90>
 8003f88:	d101      	bne.n	8003f8e <localtime_r+0x72>
 8003f8a:	4288      	cmp	r0, r1
 8003f8c:	d80e      	bhi.n	8003fac <localtime_r+0x90>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e015      	b.n	8003fbe <localtime_r+0xa2>
 8003f92:	0030      	movs	r0, r6
 8003f94:	f000 fc4a 	bl	800482c <__tzcalc_limits>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d1ed      	bne.n	8003f78 <localtime_r+0x5c>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	425b      	negs	r3, r3
 8003fa0:	e00d      	b.n	8003fbe <localtime_r+0xa2>
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	dc0a      	bgt.n	8003fbc <localtime_r+0xa0>
 8003fa6:	d101      	bne.n	8003fac <localtime_r+0x90>
 8003fa8:	4288      	cmp	r0, r1
 8003faa:	d807      	bhi.n	8003fbc <localtime_r+0xa0>
 8003fac:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4290      	cmp	r0, r2
 8003fb2:	dc04      	bgt.n	8003fbe <localtime_r+0xa2>
 8003fb4:	d102      	bne.n	8003fbc <localtime_r+0xa0>
 8003fb6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8003fb8:	428a      	cmp	r2, r1
 8003fba:	d800      	bhi.n	8003fbe <localtime_r+0xa2>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6223      	str	r3, [r4, #32]
 8003fc0:	6a23      	ldr	r3, [r4, #32]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d149      	bne.n	800405a <localtime_r+0x13e>
 8003fc6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003fc8:	21e1      	movs	r1, #225	; 0xe1
 8003fca:	0038      	movs	r0, r7
 8003fcc:	0109      	lsls	r1, r1, #4
 8003fce:	f7fc fa1d 	bl	800040c <__aeabi_idivmod>
 8003fd2:	000e      	movs	r6, r1
 8003fd4:	213c      	movs	r1, #60	; 0x3c
 8003fd6:	0030      	movs	r0, r6
 8003fd8:	f7fc fa18 	bl	800040c <__aeabi_idivmod>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	0030      	movs	r0, r6
 8003fe0:	1a5d      	subs	r5, r3, r1
 8003fe2:	6025      	str	r5, [r4, #0]
 8003fe4:	213c      	movs	r1, #60	; 0x3c
 8003fe6:	f7fc f92b 	bl	8000240 <__divsi3>
 8003fea:	21e1      	movs	r1, #225	; 0xe1
 8003fec:	6863      	ldr	r3, [r4, #4]
 8003fee:	0109      	lsls	r1, r1, #4
 8003ff0:	1a1e      	subs	r6, r3, r0
 8003ff2:	6066      	str	r6, [r4, #4]
 8003ff4:	0038      	movs	r0, r7
 8003ff6:	f7fc f923 	bl	8000240 <__divsi3>
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	1a1b      	subs	r3, r3, r0
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	2d3b      	cmp	r5, #59	; 0x3b
 8004002:	dd2c      	ble.n	800405e <localtime_r+0x142>
 8004004:	3601      	adds	r6, #1
 8004006:	6066      	str	r6, [r4, #4]
 8004008:	3d3c      	subs	r5, #60	; 0x3c
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	6862      	ldr	r2, [r4, #4]
 800400e:	2a3b      	cmp	r2, #59	; 0x3b
 8004010:	dd2b      	ble.n	800406a <localtime_r+0x14e>
 8004012:	3301      	adds	r3, #1
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	3a3c      	subs	r2, #60	; 0x3c
 8004018:	6062      	str	r2, [r4, #4]
 800401a:	68a2      	ldr	r2, [r4, #8]
 800401c:	2a17      	cmp	r2, #23
 800401e:	dd33      	ble.n	8004088 <localtime_r+0x16c>
 8004020:	69e3      	ldr	r3, [r4, #28]
 8004022:	3301      	adds	r3, #1
 8004024:	61e3      	str	r3, [r4, #28]
 8004026:	69a3      	ldr	r3, [r4, #24]
 8004028:	3301      	adds	r3, #1
 800402a:	2b06      	cmp	r3, #6
 800402c:	dc23      	bgt.n	8004076 <localtime_r+0x15a>
 800402e:	61a3      	str	r3, [r4, #24]
 8004030:	3a18      	subs	r2, #24
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	60a2      	str	r2, [r4, #8]
 8004036:	6922      	ldr	r2, [r4, #16]
 8004038:	3301      	adds	r3, #1
 800403a:	9801      	ldr	r0, [sp, #4]
 800403c:	60e3      	str	r3, [r4, #12]
 800403e:	0091      	lsls	r1, r2, #2
 8004040:	5809      	ldr	r1, [r1, r0]
 8004042:	428b      	cmp	r3, r1
 8004044:	dd05      	ble.n	8004052 <localtime_r+0x136>
 8004046:	1a5b      	subs	r3, r3, r1
 8004048:	3201      	adds	r2, #1
 800404a:	60e3      	str	r3, [r4, #12]
 800404c:	2a0c      	cmp	r2, #12
 800404e:	d014      	beq.n	800407a <localtime_r+0x15e>
 8004050:	6122      	str	r2, [r4, #16]
 8004052:	f000 fc9c 	bl	800498e <__tz_unlock>
 8004056:	0020      	movs	r0, r4
 8004058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800405a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800405c:	e7b4      	b.n	8003fc8 <localtime_r+0xac>
 800405e:	2d00      	cmp	r5, #0
 8004060:	dad4      	bge.n	800400c <localtime_r+0xf0>
 8004062:	3e01      	subs	r6, #1
 8004064:	6066      	str	r6, [r4, #4]
 8004066:	353c      	adds	r5, #60	; 0x3c
 8004068:	e7cf      	b.n	800400a <localtime_r+0xee>
 800406a:	2a00      	cmp	r2, #0
 800406c:	dad5      	bge.n	800401a <localtime_r+0xfe>
 800406e:	3b01      	subs	r3, #1
 8004070:	60a3      	str	r3, [r4, #8]
 8004072:	323c      	adds	r2, #60	; 0x3c
 8004074:	e7d0      	b.n	8004018 <localtime_r+0xfc>
 8004076:	2300      	movs	r3, #0
 8004078:	e7d9      	b.n	800402e <localtime_r+0x112>
 800407a:	2200      	movs	r2, #0
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	6122      	str	r2, [r4, #16]
 8004080:	3301      	adds	r3, #1
 8004082:	6163      	str	r3, [r4, #20]
 8004084:	61e2      	str	r2, [r4, #28]
 8004086:	e7e4      	b.n	8004052 <localtime_r+0x136>
 8004088:	2a00      	cmp	r2, #0
 800408a:	dae2      	bge.n	8004052 <localtime_r+0x136>
 800408c:	69e3      	ldr	r3, [r4, #28]
 800408e:	3b01      	subs	r3, #1
 8004090:	61e3      	str	r3, [r4, #28]
 8004092:	69a3      	ldr	r3, [r4, #24]
 8004094:	3b01      	subs	r3, #1
 8004096:	d411      	bmi.n	80040bc <localtime_r+0x1a0>
 8004098:	61a3      	str	r3, [r4, #24]
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	3218      	adds	r2, #24
 800409e:	1e59      	subs	r1, r3, #1
 80040a0:	60e1      	str	r1, [r4, #12]
 80040a2:	60a2      	str	r2, [r4, #8]
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d1d4      	bne.n	8004052 <localtime_r+0x136>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	d408      	bmi.n	80040c0 <localtime_r+0x1a4>
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	6923      	ldr	r3, [r4, #16]
 80040b2:	9a01      	ldr	r2, [sp, #4]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	589b      	ldr	r3, [r3, r2]
 80040b8:	60e3      	str	r3, [r4, #12]
 80040ba:	e7ca      	b.n	8004052 <localtime_r+0x136>
 80040bc:	2306      	movs	r3, #6
 80040be:	e7eb      	b.n	8004098 <localtime_r+0x17c>
 80040c0:	230b      	movs	r3, #11
 80040c2:	6965      	ldr	r5, [r4, #20]
 80040c4:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <localtime_r+0x1e8>)
 80040c6:	6123      	str	r3, [r4, #16]
 80040c8:	1e6b      	subs	r3, r5, #1
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	18ad      	adds	r5, r5, r2
 80040ce:	079b      	lsls	r3, r3, #30
 80040d0:	d106      	bne.n	80040e0 <localtime_r+0x1c4>
 80040d2:	2164      	movs	r1, #100	; 0x64
 80040d4:	0028      	movs	r0, r5
 80040d6:	f7fc f999 	bl	800040c <__aeabi_idivmod>
 80040da:	2301      	movs	r3, #1
 80040dc:	2900      	cmp	r1, #0
 80040de:	d106      	bne.n	80040ee <localtime_r+0x1d2>
 80040e0:	21c8      	movs	r1, #200	; 0xc8
 80040e2:	0028      	movs	r0, r5
 80040e4:	0049      	lsls	r1, r1, #1
 80040e6:	f7fc f991 	bl	800040c <__aeabi_idivmod>
 80040ea:	424b      	negs	r3, r1
 80040ec:	414b      	adcs	r3, r1
 80040ee:	336d      	adds	r3, #109	; 0x6d
 80040f0:	33ff      	adds	r3, #255	; 0xff
 80040f2:	61e3      	str	r3, [r4, #28]
 80040f4:	e7dc      	b.n	80040b0 <localtime_r+0x194>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	0000076c 	.word	0x0000076c
 80040fc:	08006158 	.word	0x08006158
 8004100:	20000290 	.word	0x20000290
 8004104:	0000076b 	.word	0x0000076b

08004108 <malloc>:
 8004108:	b510      	push	{r4, lr}
 800410a:	4b03      	ldr	r3, [pc, #12]	; (8004118 <malloc+0x10>)
 800410c:	0001      	movs	r1, r0
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f000 faf0 	bl	80046f4 <_malloc_r>
 8004114:	bd10      	pop	{r4, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	20000008 	.word	0x20000008

0800411c <free>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <free+0x10>)
 8004120:	0001      	movs	r1, r0
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	f000 fa9c 	bl	8004660 <_free_r>
 8004128:	bd10      	pop	{r4, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000008 	.word	0x20000008

08004130 <memcpy>:
 8004130:	2300      	movs	r3, #0
 8004132:	b510      	push	{r4, lr}
 8004134:	429a      	cmp	r2, r3
 8004136:	d100      	bne.n	800413a <memcpy+0xa>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	5ccc      	ldrb	r4, [r1, r3]
 800413c:	54c4      	strb	r4, [r0, r3]
 800413e:	3301      	adds	r3, #1
 8004140:	e7f8      	b.n	8004134 <memcpy+0x4>

08004142 <memset>:
 8004142:	0003      	movs	r3, r0
 8004144:	1812      	adds	r2, r2, r0
 8004146:	4293      	cmp	r3, r2
 8004148:	d100      	bne.n	800414c <memset+0xa>
 800414a:	4770      	bx	lr
 800414c:	7019      	strb	r1, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	e7f9      	b.n	8004146 <memset+0x4>
	...

08004154 <validate_structure>:
 8004154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004156:	6801      	ldr	r1, [r0, #0]
 8004158:	0004      	movs	r4, r0
 800415a:	293b      	cmp	r1, #59	; 0x3b
 800415c:	d90b      	bls.n	8004176 <validate_structure+0x22>
 800415e:	223c      	movs	r2, #60	; 0x3c
 8004160:	4668      	mov	r0, sp
 8004162:	f000 fd9b 	bl	8004c9c <div>
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	9900      	ldr	r1, [sp, #0]
 800416a:	9a01      	ldr	r2, [sp, #4]
 800416c:	185b      	adds	r3, r3, r1
 800416e:	6063      	str	r3, [r4, #4]
 8004170:	2a00      	cmp	r2, #0
 8004172:	db51      	blt.n	8004218 <validate_structure+0xc4>
 8004174:	6022      	str	r2, [r4, #0]
 8004176:	6861      	ldr	r1, [r4, #4]
 8004178:	293b      	cmp	r1, #59	; 0x3b
 800417a:	d90b      	bls.n	8004194 <validate_structure+0x40>
 800417c:	223c      	movs	r2, #60	; 0x3c
 800417e:	4668      	mov	r0, sp
 8004180:	f000 fd8c 	bl	8004c9c <div>
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	9900      	ldr	r1, [sp, #0]
 8004188:	9a01      	ldr	r2, [sp, #4]
 800418a:	185b      	adds	r3, r3, r1
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	2a00      	cmp	r2, #0
 8004190:	db47      	blt.n	8004222 <validate_structure+0xce>
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	2917      	cmp	r1, #23
 8004198:	d90b      	bls.n	80041b2 <validate_structure+0x5e>
 800419a:	2218      	movs	r2, #24
 800419c:	4668      	mov	r0, sp
 800419e:	f000 fd7d 	bl	8004c9c <div>
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	9900      	ldr	r1, [sp, #0]
 80041a6:	9a01      	ldr	r2, [sp, #4]
 80041a8:	185b      	adds	r3, r3, r1
 80041aa:	60e3      	str	r3, [r4, #12]
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	db3d      	blt.n	800422c <validate_structure+0xd8>
 80041b0:	60a2      	str	r2, [r4, #8]
 80041b2:	6921      	ldr	r1, [r4, #16]
 80041b4:	290b      	cmp	r1, #11
 80041b6:	d90b      	bls.n	80041d0 <validate_structure+0x7c>
 80041b8:	220c      	movs	r2, #12
 80041ba:	4668      	mov	r0, sp
 80041bc:	f000 fd6e 	bl	8004c9c <div>
 80041c0:	6963      	ldr	r3, [r4, #20]
 80041c2:	9900      	ldr	r1, [sp, #0]
 80041c4:	9a01      	ldr	r2, [sp, #4]
 80041c6:	185b      	adds	r3, r3, r1
 80041c8:	6163      	str	r3, [r4, #20]
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	db33      	blt.n	8004236 <validate_structure+0xe2>
 80041ce:	6122      	str	r2, [r4, #16]
 80041d0:	6965      	ldr	r5, [r4, #20]
 80041d2:	231c      	movs	r3, #28
 80041d4:	07aa      	lsls	r2, r5, #30
 80041d6:	d10f      	bne.n	80041f8 <validate_structure+0xa4>
 80041d8:	2164      	movs	r1, #100	; 0x64
 80041da:	0028      	movs	r0, r5
 80041dc:	f7fc f916 	bl	800040c <__aeabi_idivmod>
 80041e0:	231d      	movs	r3, #29
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d108      	bne.n	80041f8 <validate_structure+0xa4>
 80041e6:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <validate_structure+0x184>)
 80041e8:	3191      	adds	r1, #145	; 0x91
 80041ea:	18e8      	adds	r0, r5, r3
 80041ec:	31ff      	adds	r1, #255	; 0xff
 80041ee:	f7fc f90d 	bl	800040c <__aeabi_idivmod>
 80041f2:	424b      	negs	r3, r1
 80041f4:	414b      	adcs	r3, r1
 80041f6:	331c      	adds	r3, #28
 80041f8:	68e2      	ldr	r2, [r4, #12]
 80041fa:	271d      	movs	r7, #29
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	dd45      	ble.n	800428c <validate_structure+0x138>
 8004200:	2603      	movs	r6, #3
 8004202:	271c      	movs	r7, #28
 8004204:	6922      	ldr	r2, [r4, #16]
 8004206:	68e1      	ldr	r1, [r4, #12]
 8004208:	2a01      	cmp	r2, #1
 800420a:	d043      	beq.n	8004294 <validate_structure+0x140>
 800420c:	4d33      	ldr	r5, [pc, #204]	; (80042dc <validate_structure+0x188>)
 800420e:	0090      	lsls	r0, r2, #2
 8004210:	5940      	ldr	r0, [r0, r5]
 8004212:	4281      	cmp	r1, r0
 8004214:	dc41      	bgt.n	800429a <validate_structure+0x146>
 8004216:	e03c      	b.n	8004292 <validate_structure+0x13e>
 8004218:	323c      	adds	r2, #60	; 0x3c
 800421a:	3b01      	subs	r3, #1
 800421c:	6022      	str	r2, [r4, #0]
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	e7a9      	b.n	8004176 <validate_structure+0x22>
 8004222:	323c      	adds	r2, #60	; 0x3c
 8004224:	3b01      	subs	r3, #1
 8004226:	6062      	str	r2, [r4, #4]
 8004228:	60a3      	str	r3, [r4, #8]
 800422a:	e7b3      	b.n	8004194 <validate_structure+0x40>
 800422c:	3218      	adds	r2, #24
 800422e:	3b01      	subs	r3, #1
 8004230:	60a2      	str	r2, [r4, #8]
 8004232:	60e3      	str	r3, [r4, #12]
 8004234:	e7bd      	b.n	80041b2 <validate_structure+0x5e>
 8004236:	320c      	adds	r2, #12
 8004238:	3b01      	subs	r3, #1
 800423a:	6122      	str	r2, [r4, #16]
 800423c:	6163      	str	r3, [r4, #20]
 800423e:	e7c7      	b.n	80041d0 <validate_structure+0x7c>
 8004240:	6922      	ldr	r2, [r4, #16]
 8004242:	3a01      	subs	r2, #1
 8004244:	6122      	str	r2, [r4, #16]
 8004246:	3201      	adds	r2, #1
 8004248:	d117      	bne.n	800427a <validate_structure+0x126>
 800424a:	230b      	movs	r3, #11
 800424c:	2203      	movs	r2, #3
 800424e:	6965      	ldr	r5, [r4, #20]
 8004250:	6123      	str	r3, [r4, #16]
 8004252:	1e68      	subs	r0, r5, #1
 8004254:	6160      	str	r0, [r4, #20]
 8004256:	3311      	adds	r3, #17
 8004258:	4210      	tst	r0, r2
 800425a:	d10e      	bne.n	800427a <validate_structure+0x126>
 800425c:	2164      	movs	r1, #100	; 0x64
 800425e:	f7fc f8d5 	bl	800040c <__aeabi_idivmod>
 8004262:	003b      	movs	r3, r7
 8004264:	2900      	cmp	r1, #0
 8004266:	d108      	bne.n	800427a <validate_structure+0x126>
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <validate_structure+0x18c>)
 800426a:	3191      	adds	r1, #145	; 0x91
 800426c:	18e8      	adds	r0, r5, r3
 800426e:	31ff      	adds	r1, #255	; 0xff
 8004270:	f7fc f8cc 	bl	800040c <__aeabi_idivmod>
 8004274:	424b      	negs	r3, r1
 8004276:	414b      	adcs	r3, r1
 8004278:	331c      	adds	r3, #28
 800427a:	6921      	ldr	r1, [r4, #16]
 800427c:	001a      	movs	r2, r3
 800427e:	2901      	cmp	r1, #1
 8004280:	d002      	beq.n	8004288 <validate_structure+0x134>
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <validate_structure+0x188>)
 8004284:	0089      	lsls	r1, r1, #2
 8004286:	588a      	ldr	r2, [r1, r2]
 8004288:	18b6      	adds	r6, r6, r2
 800428a:	60e6      	str	r6, [r4, #12]
 800428c:	68e6      	ldr	r6, [r4, #12]
 800428e:	2e00      	cmp	r6, #0
 8004290:	ddd6      	ble.n	8004240 <validate_structure+0xec>
 8004292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004294:	428b      	cmp	r3, r1
 8004296:	dafc      	bge.n	8004292 <validate_structure+0x13e>
 8004298:	0018      	movs	r0, r3
 800429a:	1a09      	subs	r1, r1, r0
 800429c:	3201      	adds	r2, #1
 800429e:	60e1      	str	r1, [r4, #12]
 80042a0:	6122      	str	r2, [r4, #16]
 80042a2:	2a0c      	cmp	r2, #12
 80042a4:	d1ae      	bne.n	8004204 <validate_structure+0xb0>
 80042a6:	2300      	movs	r3, #0
 80042a8:	6965      	ldr	r5, [r4, #20]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	1c68      	adds	r0, r5, #1
 80042ae:	6160      	str	r0, [r4, #20]
 80042b0:	003b      	movs	r3, r7
 80042b2:	4230      	tst	r0, r6
 80042b4:	d1a6      	bne.n	8004204 <validate_structure+0xb0>
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	f7fc f8a8 	bl	800040c <__aeabi_idivmod>
 80042bc:	231d      	movs	r3, #29
 80042be:	2900      	cmp	r1, #0
 80042c0:	d1a0      	bne.n	8004204 <validate_structure+0xb0>
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <validate_structure+0x190>)
 80042c4:	3191      	adds	r1, #145	; 0x91
 80042c6:	18e8      	adds	r0, r5, r3
 80042c8:	31ff      	adds	r1, #255	; 0xff
 80042ca:	f7fc f89f 	bl	800040c <__aeabi_idivmod>
 80042ce:	424b      	negs	r3, r1
 80042d0:	414b      	adcs	r3, r1
 80042d2:	331c      	adds	r3, #28
 80042d4:	e796      	b.n	8004204 <validate_structure+0xb0>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	0000076c 	.word	0x0000076c
 80042dc:	080060f8 	.word	0x080060f8
 80042e0:	0000076b 	.word	0x0000076b
 80042e4:	0000076d 	.word	0x0000076d

080042e8 <mktime>:
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ea:	b08b      	sub	sp, #44	; 0x2c
 80042ec:	0004      	movs	r4, r0
 80042ee:	f000 fd2f 	bl	8004d50 <__gettzinfo>
 80042f2:	0007      	movs	r7, r0
 80042f4:	0020      	movs	r0, r4
 80042f6:	f7ff ff2d 	bl	8004154 <validate_structure>
 80042fa:	233c      	movs	r3, #60	; 0x3c
 80042fc:	6862      	ldr	r2, [r4, #4]
 80042fe:	68a1      	ldr	r1, [r4, #8]
 8004300:	4353      	muls	r3, r2
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	189b      	adds	r3, r3, r2
 8004306:	22e1      	movs	r2, #225	; 0xe1
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	434a      	muls	r2, r1
 800430c:	189b      	adds	r3, r3, r2
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	68e2      	ldr	r2, [r4, #12]
 8004312:	17db      	asrs	r3, r3, #31
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	1e50      	subs	r0, r2, #1
 800431a:	4ab5      	ldr	r2, [pc, #724]	; (80045f0 <mktime+0x308>)
 800431c:	0099      	lsls	r1, r3, #2
 800431e:	588a      	ldr	r2, [r1, r2]
 8004320:	1882      	adds	r2, r0, r2
 8004322:	9204      	str	r2, [sp, #16]
 8004324:	6962      	ldr	r2, [r4, #20]
 8004326:	9203      	str	r2, [sp, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	dd14      	ble.n	8004356 <mktime+0x6e>
 800432c:	0013      	movs	r3, r2
 800432e:	079b      	lsls	r3, r3, #30
 8004330:	d111      	bne.n	8004356 <mktime+0x6e>
 8004332:	2164      	movs	r1, #100	; 0x64
 8004334:	0010      	movs	r0, r2
 8004336:	f7fc f869 	bl	800040c <__aeabi_idivmod>
 800433a:	2900      	cmp	r1, #0
 800433c:	d108      	bne.n	8004350 <mktime+0x68>
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	4aac      	ldr	r2, [pc, #688]	; (80045f4 <mktime+0x30c>)
 8004342:	3191      	adds	r1, #145	; 0x91
 8004344:	31ff      	adds	r1, #255	; 0xff
 8004346:	1898      	adds	r0, r3, r2
 8004348:	f7fc f860 	bl	800040c <__aeabi_idivmod>
 800434c:	2900      	cmp	r1, #0
 800434e:	d102      	bne.n	8004356 <mktime+0x6e>
 8004350:	9b04      	ldr	r3, [sp, #16]
 8004352:	3301      	adds	r3, #1
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	9b04      	ldr	r3, [sp, #16]
 8004358:	49a7      	ldr	r1, [pc, #668]	; (80045f8 <mktime+0x310>)
 800435a:	61e3      	str	r3, [r4, #28]
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	4aa7      	ldr	r2, [pc, #668]	; (80045fc <mktime+0x314>)
 8004360:	185b      	adds	r3, r3, r1
 8004362:	4293      	cmp	r3, r2
 8004364:	d900      	bls.n	8004368 <mktime+0x80>
 8004366:	e174      	b.n	8004652 <mktime+0x36a>
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	2b46      	cmp	r3, #70	; 0x46
 800436c:	dc00      	bgt.n	8004370 <mktime+0x88>
 800436e:	e088      	b.n	8004482 <mktime+0x19a>
 8004370:	26c8      	movs	r6, #200	; 0xc8
 8004372:	2546      	movs	r5, #70	; 0x46
 8004374:	0076      	lsls	r6, r6, #1
 8004376:	2303      	movs	r3, #3
 8004378:	421d      	tst	r5, r3
 800437a:	d000      	beq.n	800437e <mktime+0x96>
 800437c:	e07f      	b.n	800447e <mktime+0x196>
 800437e:	2164      	movs	r1, #100	; 0x64
 8004380:	0028      	movs	r0, r5
 8004382:	f7fc f843 	bl	800040c <__aeabi_idivmod>
 8004386:	23b7      	movs	r3, #183	; 0xb7
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2900      	cmp	r1, #0
 800438c:	d108      	bne.n	80043a0 <mktime+0xb8>
 800438e:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <mktime+0x30c>)
 8004390:	0031      	movs	r1, r6
 8004392:	18e8      	adds	r0, r5, r3
 8004394:	f7fc f83a 	bl	800040c <__aeabi_idivmod>
 8004398:	424b      	negs	r3, r1
 800439a:	414b      	adcs	r3, r1
 800439c:	336e      	adds	r3, #110	; 0x6e
 800439e:	33ff      	adds	r3, #255	; 0xff
 80043a0:	9a04      	ldr	r2, [sp, #16]
 80043a2:	3501      	adds	r5, #1
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	42ab      	cmp	r3, r5
 80043ac:	d1e3      	bne.n	8004376 <mktime+0x8e>
 80043ae:	9a04      	ldr	r2, [sp, #16]
 80043b0:	4b93      	ldr	r3, [pc, #588]	; (8004600 <mktime+0x318>)
 80043b2:	4353      	muls	r3, r2
 80043b4:	0018      	movs	r0, r3
 80043b6:	17d9      	asrs	r1, r3, #31
 80043b8:	9a00      	ldr	r2, [sp, #0]
 80043ba:	9b01      	ldr	r3, [sp, #4]
 80043bc:	1812      	adds	r2, r2, r0
 80043be:	414b      	adcs	r3, r1
 80043c0:	9200      	str	r2, [sp, #0]
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	f000 fae2 	bl	800498c <__tz_lock>
 80043c8:	f000 fae2 	bl	8004990 <_tzset_unlocked>
 80043cc:	4b8d      	ldr	r3, [pc, #564]	; (8004604 <mktime+0x31c>)
 80043ce:	681d      	ldr	r5, [r3, #0]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	d04c      	beq.n	800446e <mktime+0x186>
 80043d4:	6963      	ldr	r3, [r4, #20]
 80043d6:	4a87      	ldr	r2, [pc, #540]	; (80045f4 <mktime+0x30c>)
 80043d8:	1898      	adds	r0, r3, r2
 80043da:	6a23      	ldr	r3, [r4, #32]
 80043dc:	9305      	str	r3, [sp, #20]
 80043de:	9308      	str	r3, [sp, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	dd01      	ble.n	80043e8 <mktime+0x100>
 80043e4:	2301      	movs	r3, #1
 80043e6:	9308      	str	r3, [sp, #32]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4283      	cmp	r3, r0
 80043ec:	d000      	beq.n	80043f0 <mktime+0x108>
 80043ee:	e089      	b.n	8004504 <mktime+0x21c>
 80043f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f6:	0002      	movs	r2, r0
 80043f8:	9309      	str	r3, [sp, #36]	; 0x24
 80043fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fc:	9306      	str	r3, [sp, #24]
 80043fe:	17db      	asrs	r3, r3, #31
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	001d      	movs	r5, r3
 8004406:	17de      	asrs	r6, r3, #31
 8004408:	469c      	mov	ip, r3
 800440a:	000b      	movs	r3, r1
 800440c:	1b52      	subs	r2, r2, r5
 800440e:	41b3      	sbcs	r3, r6
 8004410:	001e      	movs	r6, r3
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	0015      	movs	r5, r2
 8004416:	429e      	cmp	r6, r3
 8004418:	dc0e      	bgt.n	8004438 <mktime+0x150>
 800441a:	d102      	bne.n	8004422 <mktime+0x13a>
 800441c:	9b00      	ldr	r3, [sp, #0]
 800441e:	429d      	cmp	r5, r3
 8004420:	d80a      	bhi.n	8004438 <mktime+0x150>
 8004422:	9a06      	ldr	r2, [sp, #24]
 8004424:	9b07      	ldr	r3, [sp, #28]
 8004426:	1a80      	subs	r0, r0, r2
 8004428:	4199      	sbcs	r1, r3
 800442a:	9b01      	ldr	r3, [sp, #4]
 800442c:	4299      	cmp	r1, r3
 800442e:	dc6e      	bgt.n	800450e <mktime+0x226>
 8004430:	d102      	bne.n	8004438 <mktime+0x150>
 8004432:	9b00      	ldr	r3, [sp, #0]
 8004434:	4298      	cmp	r0, r3
 8004436:	d86a      	bhi.n	800450e <mktime+0x226>
 8004438:	9806      	ldr	r0, [sp, #24]
 800443a:	9907      	ldr	r1, [sp, #28]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1a12      	subs	r2, r2, r0
 8004442:	418b      	sbcs	r3, r1
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	2900      	cmp	r1, #0
 8004448:	d063      	beq.n	8004512 <mktime+0x22a>
 800444a:	9901      	ldr	r1, [sp, #4]
 800444c:	428b      	cmp	r3, r1
 800444e:	dc0a      	bgt.n	8004466 <mktime+0x17e>
 8004450:	d102      	bne.n	8004458 <mktime+0x170>
 8004452:	9900      	ldr	r1, [sp, #0]
 8004454:	428a      	cmp	r2, r1
 8004456:	d806      	bhi.n	8004466 <mktime+0x17e>
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	429e      	cmp	r6, r3
 800445c:	dc60      	bgt.n	8004520 <mktime+0x238>
 800445e:	d102      	bne.n	8004466 <mktime+0x17e>
 8004460:	9b00      	ldr	r3, [sp, #0]
 8004462:	429d      	cmp	r5, r3
 8004464:	d85c      	bhi.n	8004520 <mktime+0x238>
 8004466:	9b05      	ldr	r3, [sp, #20]
 8004468:	2500      	movs	r5, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	da5c      	bge.n	8004528 <mktime+0x240>
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	001e      	movs	r6, r3
 8004472:	17df      	asrs	r7, r3, #31
 8004474:	9a00      	ldr	r2, [sp, #0]
 8004476:	9b01      	ldr	r3, [sp, #4]
 8004478:	18b6      	adds	r6, r6, r2
 800447a:	415f      	adcs	r7, r3
 800447c:	e0a6      	b.n	80045cc <mktime+0x2e4>
 800447e:	236e      	movs	r3, #110	; 0x6e
 8004480:	e78d      	b.n	800439e <mktime+0xb6>
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	2b46      	cmp	r3, #70	; 0x46
 8004486:	d092      	beq.n	80043ae <mktime+0xc6>
 8004488:	26c8      	movs	r6, #200	; 0xc8
 800448a:	2545      	movs	r5, #69	; 0x45
 800448c:	0076      	lsls	r6, r6, #1
 800448e:	e016      	b.n	80044be <mktime+0x1d6>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d130      	bne.n	80044f6 <mktime+0x20e>
 8004494:	2164      	movs	r1, #100	; 0x64
 8004496:	0028      	movs	r0, r5
 8004498:	f7fb ffb8 	bl	800040c <__aeabi_idivmod>
 800449c:	23b7      	movs	r3, #183	; 0xb7
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d108      	bne.n	80044b6 <mktime+0x1ce>
 80044a4:	4b53      	ldr	r3, [pc, #332]	; (80045f4 <mktime+0x30c>)
 80044a6:	0031      	movs	r1, r6
 80044a8:	18e8      	adds	r0, r5, r3
 80044aa:	f7fb ffaf 	bl	800040c <__aeabi_idivmod>
 80044ae:	424b      	negs	r3, r1
 80044b0:	414b      	adcs	r3, r1
 80044b2:	336e      	adds	r3, #110	; 0x6e
 80044b4:	33ff      	adds	r3, #255	; 0xff
 80044b6:	9a04      	ldr	r2, [sp, #16]
 80044b8:	3d01      	subs	r5, #1
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	2303      	movs	r3, #3
 80044c0:	9a03      	ldr	r2, [sp, #12]
 80044c2:	402b      	ands	r3, r5
 80044c4:	42aa      	cmp	r2, r5
 80044c6:	dbe3      	blt.n	8004490 <mktime+0x1a8>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <mktime+0x212>
 80044cc:	2164      	movs	r1, #100	; 0x64
 80044ce:	0010      	movs	r0, r2
 80044d0:	f7fb ff9c 	bl	800040c <__aeabi_idivmod>
 80044d4:	2900      	cmp	r1, #0
 80044d6:	d112      	bne.n	80044fe <mktime+0x216>
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <mktime+0x30c>)
 80044dc:	3191      	adds	r1, #145	; 0x91
 80044de:	1898      	adds	r0, r3, r2
 80044e0:	31ff      	adds	r1, #255	; 0xff
 80044e2:	f7fb ff93 	bl	800040c <__aeabi_idivmod>
 80044e6:	424b      	negs	r3, r1
 80044e8:	4159      	adcs	r1, r3
 80044ea:	316e      	adds	r1, #110	; 0x6e
 80044ec:	31ff      	adds	r1, #255	; 0xff
 80044ee:	9b04      	ldr	r3, [sp, #16]
 80044f0:	1a5b      	subs	r3, r3, r1
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	e75b      	b.n	80043ae <mktime+0xc6>
 80044f6:	236e      	movs	r3, #110	; 0x6e
 80044f8:	e7dc      	b.n	80044b4 <mktime+0x1cc>
 80044fa:	216e      	movs	r1, #110	; 0x6e
 80044fc:	e7f6      	b.n	80044ec <mktime+0x204>
 80044fe:	21b7      	movs	r1, #183	; 0xb7
 8004500:	0049      	lsls	r1, r1, #1
 8004502:	e7f4      	b.n	80044ee <mktime+0x206>
 8004504:	f000 f992 	bl	800482c <__tzcalc_limits>
 8004508:	2800      	cmp	r0, #0
 800450a:	d000      	beq.n	800450e <mktime+0x226>
 800450c:	e770      	b.n	80043f0 <mktime+0x108>
 800450e:	9d08      	ldr	r5, [sp, #32]
 8004510:	e051      	b.n	80045b6 <mktime+0x2ce>
 8004512:	9901      	ldr	r1, [sp, #4]
 8004514:	428b      	cmp	r3, r1
 8004516:	dc9f      	bgt.n	8004458 <mktime+0x170>
 8004518:	d102      	bne.n	8004520 <mktime+0x238>
 800451a:	9900      	ldr	r1, [sp, #0]
 800451c:	428a      	cmp	r2, r1
 800451e:	d89b      	bhi.n	8004458 <mktime+0x170>
 8004520:	9b05      	ldr	r3, [sp, #20]
 8004522:	2501      	movs	r5, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	db49      	blt.n	80045bc <mktime+0x2d4>
 8004528:	9e08      	ldr	r6, [sp, #32]
 800452a:	406e      	eors	r6, r5
 800452c:	2e01      	cmp	r6, #1
 800452e:	d142      	bne.n	80045b6 <mktime+0x2ce>
 8004530:	4663      	mov	r3, ip
 8004532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	2d00      	cmp	r5, #0
 8004538:	d100      	bne.n	800453c <mktime+0x254>
 800453a:	425b      	negs	r3, r3
 800453c:	0018      	movs	r0, r3
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	17d9      	asrs	r1, r3, #31
 8004542:	18d2      	adds	r2, r2, r3
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	9a00      	ldr	r2, [sp, #0]
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	1812      	adds	r2, r2, r0
 800454c:	414b      	adcs	r3, r1
 800454e:	9200      	str	r2, [sp, #0]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	0020      	movs	r0, r4
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	f7ff fdfc 	bl	8004154 <validate_structure>
 800455c:	68e3      	ldr	r3, [r4, #12]
 800455e:	9a05      	ldr	r2, [sp, #20]
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	d028      	beq.n	80045b6 <mktime+0x2ce>
 8004564:	2b01      	cmp	r3, #1
 8004566:	dc20      	bgt.n	80045aa <mktime+0x2c2>
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	db00      	blt.n	800456e <mktime+0x286>
 800456c:	001e      	movs	r6, r3
 800456e:	9b04      	ldr	r3, [sp, #16]
 8004570:	69e2      	ldr	r2, [r4, #28]
 8004572:	199b      	adds	r3, r3, r6
 8004574:	9304      	str	r3, [sp, #16]
 8004576:	2303      	movs	r3, #3
 8004578:	18b6      	adds	r6, r6, r2
 800457a:	d547      	bpl.n	800460c <mktime+0x324>
 800457c:	9a03      	ldr	r2, [sp, #12]
 800457e:	1e50      	subs	r0, r2, #1
 8004580:	4218      	tst	r0, r3
 8004582:	d115      	bne.n	80045b0 <mktime+0x2c8>
 8004584:	2164      	movs	r1, #100	; 0x64
 8004586:	f7fb ff41 	bl	800040c <__aeabi_idivmod>
 800458a:	2900      	cmp	r1, #0
 800458c:	d12d      	bne.n	80045ea <mktime+0x302>
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <mktime+0x320>)
 8004590:	9b03      	ldr	r3, [sp, #12]
 8004592:	4694      	mov	ip, r2
 8004594:	3191      	adds	r1, #145	; 0x91
 8004596:	4463      	add	r3, ip
 8004598:	0018      	movs	r0, r3
 800459a:	31ff      	adds	r1, #255	; 0xff
 800459c:	f7fb ff36 	bl	800040c <__aeabi_idivmod>
 80045a0:	424b      	negs	r3, r1
 80045a2:	4159      	adcs	r1, r3
 80045a4:	316d      	adds	r1, #109	; 0x6d
 80045a6:	31ff      	adds	r1, #255	; 0xff
 80045a8:	e004      	b.n	80045b4 <mktime+0x2cc>
 80045aa:	2601      	movs	r6, #1
 80045ac:	4276      	negs	r6, r6
 80045ae:	e7de      	b.n	800456e <mktime+0x286>
 80045b0:	21b6      	movs	r1, #182	; 0xb6
 80045b2:	0049      	lsls	r1, r1, #1
 80045b4:	61e1      	str	r1, [r4, #28]
 80045b6:	2d01      	cmp	r5, #1
 80045b8:	d000      	beq.n	80045bc <mktime+0x2d4>
 80045ba:	e758      	b.n	800446e <mktime+0x186>
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	2501      	movs	r5, #1
 80045c0:	001e      	movs	r6, r3
 80045c2:	17df      	asrs	r7, r3, #31
 80045c4:	9a00      	ldr	r2, [sp, #0]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	18b6      	adds	r6, r6, r2
 80045ca:	415f      	adcs	r7, r3
 80045cc:	f000 f9df 	bl	800498e <__tz_unlock>
 80045d0:	9804      	ldr	r0, [sp, #16]
 80045d2:	6225      	str	r5, [r4, #32]
 80045d4:	3004      	adds	r0, #4
 80045d6:	2107      	movs	r1, #7
 80045d8:	f7fb ff18 	bl	800040c <__aeabi_idivmod>
 80045dc:	2900      	cmp	r1, #0
 80045de:	db36      	blt.n	800464e <mktime+0x366>
 80045e0:	61a1      	str	r1, [r4, #24]
 80045e2:	0030      	movs	r0, r6
 80045e4:	0039      	movs	r1, r7
 80045e6:	b00b      	add	sp, #44	; 0x2c
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ea:	216e      	movs	r1, #110	; 0x6e
 80045ec:	e7db      	b.n	80045a6 <mktime+0x2be>
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	08006128 	.word	0x08006128
 80045f4:	0000076c 	.word	0x0000076c
 80045f8:	00002710 	.word	0x00002710
 80045fc:	00004e20 	.word	0x00004e20
 8004600:	00015180 	.word	0x00015180
 8004604:	20000290 	.word	0x20000290
 8004608:	0000076b 	.word	0x0000076b
 800460c:	9a03      	ldr	r2, [sp, #12]
 800460e:	421a      	tst	r2, r3
 8004610:	d116      	bne.n	8004640 <mktime+0x358>
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	0010      	movs	r0, r2
 8004616:	f7fb fef9 	bl	800040c <__aeabi_idivmod>
 800461a:	2900      	cmp	r1, #0
 800461c:	d112      	bne.n	8004644 <mktime+0x35c>
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <mktime+0x374>)
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	4694      	mov	ip, r2
 8004624:	3191      	adds	r1, #145	; 0x91
 8004626:	4463      	add	r3, ip
 8004628:	0018      	movs	r0, r3
 800462a:	31ff      	adds	r1, #255	; 0xff
 800462c:	f7fb feee 	bl	800040c <__aeabi_idivmod>
 8004630:	424b      	negs	r3, r1
 8004632:	4159      	adcs	r1, r3
 8004634:	316e      	adds	r1, #110	; 0x6e
 8004636:	31ff      	adds	r1, #255	; 0xff
 8004638:	428e      	cmp	r6, r1
 800463a:	da06      	bge.n	800464a <mktime+0x362>
 800463c:	61e6      	str	r6, [r4, #28]
 800463e:	e7ba      	b.n	80045b6 <mktime+0x2ce>
 8004640:	216e      	movs	r1, #110	; 0x6e
 8004642:	e7f8      	b.n	8004636 <mktime+0x34e>
 8004644:	21b7      	movs	r1, #183	; 0xb7
 8004646:	0049      	lsls	r1, r1, #1
 8004648:	e7f6      	b.n	8004638 <mktime+0x350>
 800464a:	1a76      	subs	r6, r6, r1
 800464c:	e7f6      	b.n	800463c <mktime+0x354>
 800464e:	3107      	adds	r1, #7
 8004650:	e7c6      	b.n	80045e0 <mktime+0x2f8>
 8004652:	2601      	movs	r6, #1
 8004654:	4276      	negs	r6, r6
 8004656:	17f7      	asrs	r7, r6, #31
 8004658:	e7c3      	b.n	80045e2 <mktime+0x2fa>
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	0000076c 	.word	0x0000076c

08004660 <_free_r>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	0005      	movs	r5, r0
 8004664:	2900      	cmp	r1, #0
 8004666:	d010      	beq.n	800468a <_free_r+0x2a>
 8004668:	1f0c      	subs	r4, r1, #4
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da00      	bge.n	8004672 <_free_r+0x12>
 8004670:	18e4      	adds	r4, r4, r3
 8004672:	0028      	movs	r0, r5
 8004674:	f000 fc3e 	bl	8004ef4 <__malloc_lock>
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <_free_r+0x90>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <_free_r+0x2c>
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	6014      	str	r4, [r2, #0]
 8004684:	0028      	movs	r0, r5
 8004686:	f000 fc36 	bl	8004ef6 <__malloc_unlock>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	42a3      	cmp	r3, r4
 800468e:	d909      	bls.n	80046a4 <_free_r+0x44>
 8004690:	6821      	ldr	r1, [r4, #0]
 8004692:	1860      	adds	r0, r4, r1
 8004694:	4283      	cmp	r3, r0
 8004696:	d1f3      	bne.n	8004680 <_free_r+0x20>
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	1841      	adds	r1, r0, r1
 800469e:	6021      	str	r1, [r4, #0]
 80046a0:	e7ee      	b.n	8004680 <_free_r+0x20>
 80046a2:	0013      	movs	r3, r2
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	d001      	beq.n	80046ae <_free_r+0x4e>
 80046aa:	42a2      	cmp	r2, r4
 80046ac:	d9f9      	bls.n	80046a2 <_free_r+0x42>
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	1858      	adds	r0, r3, r1
 80046b2:	42a0      	cmp	r0, r4
 80046b4:	d10b      	bne.n	80046ce <_free_r+0x6e>
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1809      	adds	r1, r1, r0
 80046ba:	1858      	adds	r0, r3, r1
 80046bc:	6019      	str	r1, [r3, #0]
 80046be:	4282      	cmp	r2, r0
 80046c0:	d1e0      	bne.n	8004684 <_free_r+0x24>
 80046c2:	6810      	ldr	r0, [r2, #0]
 80046c4:	6852      	ldr	r2, [r2, #4]
 80046c6:	1841      	adds	r1, r0, r1
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e7da      	b.n	8004684 <_free_r+0x24>
 80046ce:	42a0      	cmp	r0, r4
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x78>
 80046d2:	230c      	movs	r3, #12
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	e7d5      	b.n	8004684 <_free_r+0x24>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	1860      	adds	r0, r4, r1
 80046dc:	4282      	cmp	r2, r0
 80046de:	d103      	bne.n	80046e8 <_free_r+0x88>
 80046e0:	6810      	ldr	r0, [r2, #0]
 80046e2:	6852      	ldr	r2, [r2, #4]
 80046e4:	1841      	adds	r1, r0, r1
 80046e6:	6021      	str	r1, [r4, #0]
 80046e8:	6062      	str	r2, [r4, #4]
 80046ea:	605c      	str	r4, [r3, #4]
 80046ec:	e7ca      	b.n	8004684 <_free_r+0x24>
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	2000026c 	.word	0x2000026c

080046f4 <_malloc_r>:
 80046f4:	2303      	movs	r3, #3
 80046f6:	b570      	push	{r4, r5, r6, lr}
 80046f8:	1ccd      	adds	r5, r1, #3
 80046fa:	439d      	bics	r5, r3
 80046fc:	3508      	adds	r5, #8
 80046fe:	0006      	movs	r6, r0
 8004700:	2d0c      	cmp	r5, #12
 8004702:	d21e      	bcs.n	8004742 <_malloc_r+0x4e>
 8004704:	250c      	movs	r5, #12
 8004706:	42a9      	cmp	r1, r5
 8004708:	d81d      	bhi.n	8004746 <_malloc_r+0x52>
 800470a:	0030      	movs	r0, r6
 800470c:	f000 fbf2 	bl	8004ef4 <__malloc_lock>
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <_malloc_r+0xb4>)
 8004712:	6814      	ldr	r4, [r2, #0]
 8004714:	0021      	movs	r1, r4
 8004716:	2900      	cmp	r1, #0
 8004718:	d119      	bne.n	800474e <_malloc_r+0x5a>
 800471a:	4c24      	ldr	r4, [pc, #144]	; (80047ac <_malloc_r+0xb8>)
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <_malloc_r+0x36>
 8004722:	0030      	movs	r0, r6
 8004724:	f000 f844 	bl	80047b0 <_sbrk_r>
 8004728:	6020      	str	r0, [r4, #0]
 800472a:	0029      	movs	r1, r5
 800472c:	0030      	movs	r0, r6
 800472e:	f000 f83f 	bl	80047b0 <_sbrk_r>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d12b      	bne.n	800478e <_malloc_r+0x9a>
 8004736:	230c      	movs	r3, #12
 8004738:	0030      	movs	r0, r6
 800473a:	6033      	str	r3, [r6, #0]
 800473c:	f000 fbdb 	bl	8004ef6 <__malloc_unlock>
 8004740:	e003      	b.n	800474a <_malloc_r+0x56>
 8004742:	2d00      	cmp	r5, #0
 8004744:	dadf      	bge.n	8004706 <_malloc_r+0x12>
 8004746:	230c      	movs	r3, #12
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	2000      	movs	r0, #0
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	680b      	ldr	r3, [r1, #0]
 8004750:	1b5b      	subs	r3, r3, r5
 8004752:	d419      	bmi.n	8004788 <_malloc_r+0x94>
 8004754:	2b0b      	cmp	r3, #11
 8004756:	d903      	bls.n	8004760 <_malloc_r+0x6c>
 8004758:	600b      	str	r3, [r1, #0]
 800475a:	18cc      	adds	r4, r1, r3
 800475c:	6025      	str	r5, [r4, #0]
 800475e:	e003      	b.n	8004768 <_malloc_r+0x74>
 8004760:	684b      	ldr	r3, [r1, #4]
 8004762:	428c      	cmp	r4, r1
 8004764:	d10d      	bne.n	8004782 <_malloc_r+0x8e>
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	0030      	movs	r0, r6
 800476a:	f000 fbc4 	bl	8004ef6 <__malloc_unlock>
 800476e:	0020      	movs	r0, r4
 8004770:	2207      	movs	r2, #7
 8004772:	300b      	adds	r0, #11
 8004774:	1d23      	adds	r3, r4, #4
 8004776:	4390      	bics	r0, r2
 8004778:	1ac3      	subs	r3, r0, r3
 800477a:	d0e7      	beq.n	800474c <_malloc_r+0x58>
 800477c:	425a      	negs	r2, r3
 800477e:	50e2      	str	r2, [r4, r3]
 8004780:	e7e4      	b.n	800474c <_malloc_r+0x58>
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	000c      	movs	r4, r1
 8004786:	e7ef      	b.n	8004768 <_malloc_r+0x74>
 8004788:	000c      	movs	r4, r1
 800478a:	6849      	ldr	r1, [r1, #4]
 800478c:	e7c3      	b.n	8004716 <_malloc_r+0x22>
 800478e:	2303      	movs	r3, #3
 8004790:	1cc4      	adds	r4, r0, #3
 8004792:	439c      	bics	r4, r3
 8004794:	42a0      	cmp	r0, r4
 8004796:	d0e1      	beq.n	800475c <_malloc_r+0x68>
 8004798:	1a21      	subs	r1, r4, r0
 800479a:	0030      	movs	r0, r6
 800479c:	f000 f808 	bl	80047b0 <_sbrk_r>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d1db      	bne.n	800475c <_malloc_r+0x68>
 80047a4:	e7c7      	b.n	8004736 <_malloc_r+0x42>
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	2000026c 	.word	0x2000026c
 80047ac:	20000270 	.word	0x20000270

080047b0 <_sbrk_r>:
 80047b0:	2300      	movs	r3, #0
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	4c06      	ldr	r4, [pc, #24]	; (80047d0 <_sbrk_r+0x20>)
 80047b6:	0005      	movs	r5, r0
 80047b8:	0008      	movs	r0, r1
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	f7fc fc7a 	bl	80010b4 <_sbrk>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d103      	bne.n	80047cc <_sbrk_r+0x1c>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d000      	beq.n	80047cc <_sbrk_r+0x1c>
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000340 	.word	0x20000340

080047d4 <siprintf>:
 80047d4:	b40e      	push	{r1, r2, r3}
 80047d6:	b500      	push	{lr}
 80047d8:	490b      	ldr	r1, [pc, #44]	; (8004808 <siprintf+0x34>)
 80047da:	b09c      	sub	sp, #112	; 0x70
 80047dc:	ab1d      	add	r3, sp, #116	; 0x74
 80047de:	9002      	str	r0, [sp, #8]
 80047e0:	9006      	str	r0, [sp, #24]
 80047e2:	9107      	str	r1, [sp, #28]
 80047e4:	9104      	str	r1, [sp, #16]
 80047e6:	4809      	ldr	r0, [pc, #36]	; (800480c <siprintf+0x38>)
 80047e8:	4909      	ldr	r1, [pc, #36]	; (8004810 <siprintf+0x3c>)
 80047ea:	cb04      	ldmia	r3!, {r2}
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	a902      	add	r1, sp, #8
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	f000 fbe2 	bl	8004fbc <_svfiprintf_r>
 80047f8:	2300      	movs	r3, #0
 80047fa:	9a02      	ldr	r2, [sp, #8]
 80047fc:	7013      	strb	r3, [r2, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	bc08      	pop	{r3}
 8004802:	b003      	add	sp, #12
 8004804:	4718      	bx	r3
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	7fffffff 	.word	0x7fffffff
 800480c:	20000008 	.word	0x20000008
 8004810:	ffff0208 	.word	0xffff0208

08004814 <strnlen>:
 8004814:	0003      	movs	r3, r0
 8004816:	1841      	adds	r1, r0, r1
 8004818:	428b      	cmp	r3, r1
 800481a:	d002      	beq.n	8004822 <strnlen+0xe>
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	2a00      	cmp	r2, #0
 8004820:	d101      	bne.n	8004826 <strnlen+0x12>
 8004822:	1a18      	subs	r0, r3, r0
 8004824:	4770      	bx	lr
 8004826:	3301      	adds	r3, #1
 8004828:	e7f6      	b.n	8004818 <strnlen+0x4>
	...

0800482c <__tzcalc_limits>:
 800482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	0004      	movs	r4, r0
 8004832:	f000 fa8d 	bl	8004d50 <__gettzinfo>
 8004836:	4b4e      	ldr	r3, [pc, #312]	; (8004970 <__tzcalc_limits+0x144>)
 8004838:	0006      	movs	r6, r0
 800483a:	2000      	movs	r0, #0
 800483c:	429c      	cmp	r4, r3
 800483e:	dd5f      	ble.n	8004900 <__tzcalc_limits+0xd4>
 8004840:	256e      	movs	r5, #110	; 0x6e
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <__tzcalc_limits+0x148>)
 8004846:	35ff      	adds	r5, #255	; 0xff
 8004848:	18e0      	adds	r0, r4, r3
 800484a:	4345      	muls	r5, r0
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <__tzcalc_limits+0x14c>)
 800484e:	6074      	str	r4, [r6, #4]
 8004850:	18e0      	adds	r0, r4, r3
 8004852:	4b4a      	ldr	r3, [pc, #296]	; (800497c <__tzcalc_limits+0x150>)
 8004854:	1080      	asrs	r0, r0, #2
 8004856:	182d      	adds	r5, r5, r0
 8004858:	4249      	negs	r1, r1
 800485a:	18e0      	adds	r0, r4, r3
 800485c:	f7fb fcf0 	bl	8000240 <__divsi3>
 8004860:	21c8      	movs	r1, #200	; 0xc8
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <__tzcalc_limits+0x154>)
 8004864:	182d      	adds	r5, r5, r0
 8004866:	0049      	lsls	r1, r1, #1
 8004868:	18e0      	adds	r0, r4, r3
 800486a:	f7fb fce9 	bl	8000240 <__divsi3>
 800486e:	2164      	movs	r1, #100	; 0x64
 8004870:	182b      	adds	r3, r5, r0
 8004872:	0020      	movs	r0, r4
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f7fb fdc9 	bl	800040c <__aeabi_idivmod>
 800487a:	9101      	str	r1, [sp, #4]
 800487c:	21c8      	movs	r1, #200	; 0xc8
 800487e:	0020      	movs	r0, r4
 8004880:	0049      	lsls	r1, r1, #1
 8004882:	f7fb fdc3 	bl	800040c <__aeabi_idivmod>
 8004886:	000a      	movs	r2, r1
 8004888:	4253      	negs	r3, r2
 800488a:	415a      	adcs	r2, r3
 800488c:	0033      	movs	r3, r6
 800488e:	3358      	adds	r3, #88	; 0x58
 8004890:	9307      	str	r3, [sp, #28]
 8004892:	2303      	movs	r3, #3
 8004894:	0035      	movs	r5, r6
 8004896:	401c      	ands	r4, r3
 8004898:	9102      	str	r1, [sp, #8]
 800489a:	9204      	str	r2, [sp, #16]
 800489c:	3508      	adds	r5, #8
 800489e:	9405      	str	r4, [sp, #20]
 80048a0:	782b      	ldrb	r3, [r5, #0]
 80048a2:	68ef      	ldr	r7, [r5, #12]
 80048a4:	2b4a      	cmp	r3, #74	; 0x4a
 80048a6:	d12d      	bne.n	8004904 <__tzcalc_limits+0xd8>
 80048a8:	9b00      	ldr	r3, [sp, #0]
 80048aa:	19dc      	adds	r4, r3, r7
 80048ac:	9b05      	ldr	r3, [sp, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <__tzcalc_limits+0x8c>
 80048b2:	9b01      	ldr	r3, [sp, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <__tzcalc_limits+0x94>
 80048b8:	2100      	movs	r1, #0
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	428b      	cmp	r3, r1
 80048be:	d103      	bne.n	80048c8 <__tzcalc_limits+0x9c>
 80048c0:	2101      	movs	r1, #1
 80048c2:	2f3b      	cmp	r7, #59	; 0x3b
 80048c4:	dc00      	bgt.n	80048c8 <__tzcalc_limits+0x9c>
 80048c6:	2100      	movs	r1, #0
 80048c8:	1864      	adds	r4, r4, r1
 80048ca:	3c01      	subs	r4, #1
 80048cc:	492d      	ldr	r1, [pc, #180]	; (8004984 <__tzcalc_limits+0x158>)
 80048ce:	692b      	ldr	r3, [r5, #16]
 80048d0:	434c      	muls	r4, r1
 80048d2:	18e4      	adds	r4, r4, r3
 80048d4:	6a2b      	ldr	r3, [r5, #32]
 80048d6:	18e4      	adds	r4, r4, r3
 80048d8:	61ac      	str	r4, [r5, #24]
 80048da:	9b07      	ldr	r3, [sp, #28]
 80048dc:	17e4      	asrs	r4, r4, #31
 80048de:	61ec      	str	r4, [r5, #28]
 80048e0:	3528      	adds	r5, #40	; 0x28
 80048e2:	42ab      	cmp	r3, r5
 80048e4:	d1dc      	bne.n	80048a0 <__tzcalc_limits+0x74>
 80048e6:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 80048e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80048ea:	2301      	movs	r3, #1
 80048ec:	4291      	cmp	r1, r2
 80048ee:	dc05      	bgt.n	80048fc <__tzcalc_limits+0xd0>
 80048f0:	d103      	bne.n	80048fa <__tzcalc_limits+0xce>
 80048f2:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 80048f4:	6a31      	ldr	r1, [r6, #32]
 80048f6:	428a      	cmp	r2, r1
 80048f8:	d800      	bhi.n	80048fc <__tzcalc_limits+0xd0>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2001      	movs	r0, #1
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	b009      	add	sp, #36	; 0x24
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	2b44      	cmp	r3, #68	; 0x44
 8004906:	d102      	bne.n	800490e <__tzcalc_limits+0xe2>
 8004908:	9b00      	ldr	r3, [sp, #0]
 800490a:	19dc      	adds	r4, r3, r7
 800490c:	e7de      	b.n	80048cc <__tzcalc_limits+0xa0>
 800490e:	9b05      	ldr	r3, [sp, #20]
 8004910:	9a04      	ldr	r2, [sp, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <__tzcalc_limits+0xf2>
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d000      	beq.n	800491e <__tzcalc_limits+0xf2>
 800491c:	2201      	movs	r2, #1
 800491e:	2330      	movs	r3, #48	; 0x30
 8004920:	4353      	muls	r3, r2
 8004922:	9306      	str	r3, [sp, #24]
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <__tzcalc_limits+0x15c>)
 8004926:	2100      	movs	r1, #0
 8004928:	469c      	mov	ip, r3
 800492a:	6868      	ldr	r0, [r5, #4]
 800492c:	9c00      	ldr	r4, [sp, #0]
 800492e:	9a06      	ldr	r2, [sp, #24]
 8004930:	3101      	adds	r1, #1
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	189b      	adds	r3, r3, r2
 8004936:	4662      	mov	r2, ip
 8004938:	3b04      	subs	r3, #4
 800493a:	58d3      	ldr	r3, [r2, r3]
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	4288      	cmp	r0, r1
 8004940:	dc10      	bgt.n	8004964 <__tzcalc_limits+0x138>
 8004942:	1d20      	adds	r0, r4, #4
 8004944:	2107      	movs	r1, #7
 8004946:	f7fb fd61 	bl	800040c <__aeabi_idivmod>
 800494a:	1a79      	subs	r1, r7, r1
 800494c:	d500      	bpl.n	8004950 <__tzcalc_limits+0x124>
 800494e:	3107      	adds	r1, #7
 8004950:	68ab      	ldr	r3, [r5, #8]
 8004952:	1e5a      	subs	r2, r3, #1
 8004954:	2307      	movs	r3, #7
 8004956:	4353      	muls	r3, r2
 8004958:	1859      	adds	r1, r3, r1
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	4299      	cmp	r1, r3
 800495e:	da04      	bge.n	800496a <__tzcalc_limits+0x13e>
 8004960:	1864      	adds	r4, r4, r1
 8004962:	e7b3      	b.n	80048cc <__tzcalc_limits+0xa0>
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	18e4      	adds	r4, r4, r3
 8004968:	e7e1      	b.n	800492e <__tzcalc_limits+0x102>
 800496a:	3907      	subs	r1, #7
 800496c:	e7f5      	b.n	800495a <__tzcalc_limits+0x12e>
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	000007b1 	.word	0x000007b1
 8004974:	fffff84e 	.word	0xfffff84e
 8004978:	fffff84f 	.word	0xfffff84f
 800497c:	fffff893 	.word	0xfffff893
 8004980:	fffff9bf 	.word	0xfffff9bf
 8004984:	00015180 	.word	0x00015180
 8004988:	08006158 	.word	0x08006158

0800498c <__tz_lock>:
 800498c:	4770      	bx	lr

0800498e <__tz_unlock>:
 800498e:	4770      	bx	lr

08004990 <_tzset_unlocked>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4b02      	ldr	r3, [pc, #8]	; (800499c <_tzset_unlocked+0xc>)
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	f000 f803 	bl	80049a0 <_tzset_unlocked_r>
 800499a:	bd10      	pop	{r4, pc}
 800499c:	20000008 	.word	0x20000008

080049a0 <_tzset_unlocked_r>:
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b08d      	sub	sp, #52	; 0x34
 80049a4:	0007      	movs	r7, r0
 80049a6:	f000 f9d3 	bl	8004d50 <__gettzinfo>
 80049aa:	49af      	ldr	r1, [pc, #700]	; (8004c68 <_tzset_unlocked_r+0x2c8>)
 80049ac:	0006      	movs	r6, r0
 80049ae:	0038      	movs	r0, r7
 80049b0:	f000 f9c8 	bl	8004d44 <_getenv_r>
 80049b4:	4dad      	ldr	r5, [pc, #692]	; (8004c6c <_tzset_unlocked_r+0x2cc>)
 80049b6:	1e04      	subs	r4, r0, #0
 80049b8:	d10d      	bne.n	80049d6 <_tzset_unlocked_r+0x36>
 80049ba:	4bad      	ldr	r3, [pc, #692]	; (8004c70 <_tzset_unlocked_r+0x2d0>)
 80049bc:	4aad      	ldr	r2, [pc, #692]	; (8004c74 <_tzset_unlocked_r+0x2d4>)
 80049be:	6018      	str	r0, [r3, #0]
 80049c0:	4bad      	ldr	r3, [pc, #692]	; (8004c78 <_tzset_unlocked_r+0x2d8>)
 80049c2:	6018      	str	r0, [r3, #0]
 80049c4:	4bad      	ldr	r3, [pc, #692]	; (8004c7c <_tzset_unlocked_r+0x2dc>)
 80049c6:	6828      	ldr	r0, [r5, #0]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	f7ff fba6 	bl	800411c <free>
 80049d0:	602c      	str	r4, [r5, #0]
 80049d2:	b00d      	add	sp, #52	; 0x34
 80049d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d6:	6829      	ldr	r1, [r5, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	d159      	bne.n	8004a90 <_tzset_unlocked_r+0xf0>
 80049dc:	6828      	ldr	r0, [r5, #0]
 80049de:	f7ff fb9d 	bl	800411c <free>
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7fb fb9a 	bl	800011c <strlen>
 80049e8:	1c41      	adds	r1, r0, #1
 80049ea:	0038      	movs	r0, r7
 80049ec:	f7ff fe82 	bl	80046f4 <_malloc_r>
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d151      	bne.n	8004a9a <_tzset_unlocked_r+0xfa>
 80049f6:	7823      	ldrb	r3, [r4, #0]
 80049f8:	49a1      	ldr	r1, [pc, #644]	; (8004c80 <_tzset_unlocked_r+0x2e0>)
 80049fa:	3b3a      	subs	r3, #58	; 0x3a
 80049fc:	425a      	negs	r2, r3
 80049fe:	4153      	adcs	r3, r2
 8004a00:	18e4      	adds	r4, r4, r3
 8004a02:	4aa0      	ldr	r2, [pc, #640]	; (8004c84 <_tzset_unlocked_r+0x2e4>)
 8004a04:	ab0a      	add	r3, sp, #40	; 0x28
 8004a06:	0020      	movs	r0, r4
 8004a08:	f000 fd4c 	bl	80054a4 <siscanf>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dde0      	ble.n	80049d2 <_tzset_unlocked_r+0x32>
 8004a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a12:	18e4      	adds	r4, r4, r3
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2d      	cmp	r3, #45	; 0x2d
 8004a18:	d143      	bne.n	8004aa2 <_tzset_unlocked_r+0x102>
 8004a1a:	3b2e      	subs	r3, #46	; 0x2e
 8004a1c:	3401      	adds	r4, #1
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	2716      	movs	r7, #22
 8004a22:	ab02      	add	r3, sp, #8
 8004a24:	18ff      	adds	r7, r7, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	ad08      	add	r5, sp, #32
 8004a2a:	803b      	strh	r3, [r7, #0]
 8004a2c:	802b      	strh	r3, [r5, #0]
 8004a2e:	ab0a      	add	r3, sp, #40	; 0x28
 8004a30:	9303      	str	r3, [sp, #12]
 8004a32:	9502      	str	r5, [sp, #8]
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	9700      	str	r7, [sp, #0]
 8004a38:	aa07      	add	r2, sp, #28
 8004a3a:	4993      	ldr	r1, [pc, #588]	; (8004c88 <_tzset_unlocked_r+0x2e8>)
 8004a3c:	0020      	movs	r0, r4
 8004a3e:	f000 fd31 	bl	80054a4 <siscanf>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	ddc5      	ble.n	80049d2 <_tzset_unlocked_r+0x32>
 8004a46:	233c      	movs	r3, #60	; 0x3c
 8004a48:	883a      	ldrh	r2, [r7, #0]
 8004a4a:	4f90      	ldr	r7, [pc, #576]	; (8004c8c <_tzset_unlocked_r+0x2ec>)
 8004a4c:	4353      	muls	r3, r2
 8004a4e:	882a      	ldrh	r2, [r5, #0]
 8004a50:	4d8a      	ldr	r5, [pc, #552]	; (8004c7c <_tzset_unlocked_r+0x2dc>)
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	aa02      	add	r2, sp, #8
 8004a56:	8a91      	ldrh	r1, [r2, #20]
 8004a58:	22e1      	movs	r2, #225	; 0xe1
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	434a      	muls	r2, r1
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	9a04      	ldr	r2, [sp, #16]
 8004a62:	4987      	ldr	r1, [pc, #540]	; (8004c80 <_tzset_unlocked_r+0x2e0>)
 8004a64:	435a      	muls	r2, r3
 8004a66:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <_tzset_unlocked_r+0x2e4>)
 8004a68:	62b2      	str	r2, [r6, #40]	; 0x28
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6e:	003a      	movs	r2, r7
 8004a70:	18e4      	adds	r4, r4, r3
 8004a72:	0020      	movs	r0, r4
 8004a74:	ab0a      	add	r3, sp, #40	; 0x28
 8004a76:	f000 fd15 	bl	80054a4 <siscanf>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	dc18      	bgt.n	8004ab0 <_tzset_unlocked_r+0x110>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004a82:	606b      	str	r3, [r5, #4]
 8004a84:	4b7a      	ldr	r3, [pc, #488]	; (8004c70 <_tzset_unlocked_r+0x2d0>)
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4b7b      	ldr	r3, [pc, #492]	; (8004c78 <_tzset_unlocked_r+0x2d8>)
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e7a0      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004a90:	f7fb fb3a 	bl	8000108 <strcmp>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d09c      	beq.n	80049d2 <_tzset_unlocked_r+0x32>
 8004a98:	e7a0      	b.n	80049dc <_tzset_unlocked_r+0x3c>
 8004a9a:	0021      	movs	r1, r4
 8004a9c:	f000 fd2c 	bl	80054f8 <strcpy>
 8004aa0:	e7a9      	b.n	80049f6 <_tzset_unlocked_r+0x56>
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	3b2b      	subs	r3, #43	; 0x2b
 8004aa6:	9204      	str	r2, [sp, #16]
 8004aa8:	425a      	negs	r2, r3
 8004aaa:	4153      	adcs	r3, r2
 8004aac:	18e4      	adds	r4, r4, r3
 8004aae:	e7b7      	b.n	8004a20 <_tzset_unlocked_r+0x80>
 8004ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab2:	606f      	str	r7, [r5, #4]
 8004ab4:	18e4      	adds	r4, r4, r3
 8004ab6:	7823      	ldrb	r3, [r4, #0]
 8004ab8:	2b2d      	cmp	r3, #45	; 0x2d
 8004aba:	d000      	beq.n	8004abe <_tzset_unlocked_r+0x11e>
 8004abc:	e08d      	b.n	8004bda <_tzset_unlocked_r+0x23a>
 8004abe:	3b2e      	subs	r3, #46	; 0x2e
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	2716      	movs	r7, #22
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	aa02      	add	r2, sp, #8
 8004aca:	18bf      	adds	r7, r7, r2
 8004acc:	ad07      	add	r5, sp, #28
 8004ace:	8313      	strh	r3, [r2, #24]
 8004ad0:	802b      	strh	r3, [r5, #0]
 8004ad2:	803b      	strh	r3, [r7, #0]
 8004ad4:	aa08      	add	r2, sp, #32
 8004ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad8:	ab0a      	add	r3, sp, #40	; 0x28
 8004ada:	9202      	str	r2, [sp, #8]
 8004adc:	9303      	str	r3, [sp, #12]
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	9700      	str	r7, [sp, #0]
 8004ae2:	002a      	movs	r2, r5
 8004ae4:	4968      	ldr	r1, [pc, #416]	; (8004c88 <_tzset_unlocked_r+0x2e8>)
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	f000 fcdc 	bl	80054a4 <siscanf>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	dd00      	ble.n	8004af2 <_tzset_unlocked_r+0x152>
 8004af0:	e07a      	b.n	8004be8 <_tzset_unlocked_r+0x248>
 8004af2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004af4:	4a66      	ldr	r2, [pc, #408]	; (8004c90 <_tzset_unlocked_r+0x2f0>)
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	6533      	str	r3, [r6, #80]	; 0x50
 8004afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afc:	0037      	movs	r7, r6
 8004afe:	18e4      	adds	r4, r4, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	3708      	adds	r7, #8
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	7823      	ldrb	r3, [r4, #0]
 8004b08:	3b2c      	subs	r3, #44	; 0x2c
 8004b0a:	425a      	negs	r2, r3
 8004b0c:	4153      	adcs	r3, r2
 8004b0e:	18e4      	adds	r4, r4, r3
 8004b10:	7825      	ldrb	r5, [r4, #0]
 8004b12:	2d4d      	cmp	r5, #77	; 0x4d
 8004b14:	d000      	beq.n	8004b18 <_tzset_unlocked_r+0x178>
 8004b16:	e078      	b.n	8004c0a <_tzset_unlocked_r+0x26a>
 8004b18:	221e      	movs	r2, #30
 8004b1a:	a902      	add	r1, sp, #8
 8004b1c:	1852      	adds	r2, r2, r1
 8004b1e:	9202      	str	r2, [sp, #8]
 8004b20:	aa09      	add	r2, sp, #36	; 0x24
 8004b22:	9200      	str	r2, [sp, #0]
 8004b24:	221a      	movs	r2, #26
 8004b26:	ab0a      	add	r3, sp, #40	; 0x28
 8004b28:	1852      	adds	r2, r2, r1
 8004b2a:	9303      	str	r3, [sp, #12]
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	4959      	ldr	r1, [pc, #356]	; (8004c94 <_tzset_unlocked_r+0x2f4>)
 8004b30:	0020      	movs	r0, r4
 8004b32:	f000 fcb7 	bl	80054a4 <siscanf>
 8004b36:	2803      	cmp	r0, #3
 8004b38:	d000      	beq.n	8004b3c <_tzset_unlocked_r+0x19c>
 8004b3a:	e74a      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004b3c:	ab02      	add	r3, sp, #8
 8004b3e:	8b59      	ldrh	r1, [r3, #26]
 8004b40:	1e4b      	subs	r3, r1, #1
 8004b42:	2b0b      	cmp	r3, #11
 8004b44:	d900      	bls.n	8004b48 <_tzset_unlocked_r+0x1a8>
 8004b46:	e744      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004b48:	ab02      	add	r3, sp, #8
 8004b4a:	8b9a      	ldrh	r2, [r3, #28]
 8004b4c:	1e53      	subs	r3, r2, #1
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d900      	bls.n	8004b54 <_tzset_unlocked_r+0x1b4>
 8004b52:	e73e      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004b54:	ab02      	add	r3, sp, #8
 8004b56:	8bdb      	ldrh	r3, [r3, #30]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d900      	bls.n	8004b5e <_tzset_unlocked_r+0x1be>
 8004b5c:	e739      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004b5e:	703d      	strb	r5, [r7, #0]
 8004b60:	6079      	str	r1, [r7, #4]
 8004b62:	60ba      	str	r2, [r7, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b68:	18e5      	adds	r5, r4, r3
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	aa07      	add	r2, sp, #28
 8004b6e:	8013      	strh	r3, [r2, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	a902      	add	r1, sp, #8
 8004b74:	ac08      	add	r4, sp, #32
 8004b76:	82cb      	strh	r3, [r1, #22]
 8004b78:	8023      	strh	r3, [r4, #0]
 8004b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004b7c:	782b      	ldrb	r3, [r5, #0]
 8004b7e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b80:	d10b      	bne.n	8004b9a <_tzset_unlocked_r+0x1fa>
 8004b82:	2116      	movs	r1, #22
 8004b84:	a802      	add	r0, sp, #8
 8004b86:	1809      	adds	r1, r1, r0
 8004b88:	ab0a      	add	r3, sp, #40	; 0x28
 8004b8a:	9100      	str	r1, [sp, #0]
 8004b8c:	9303      	str	r3, [sp, #12]
 8004b8e:	9402      	str	r4, [sp, #8]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	4941      	ldr	r1, [pc, #260]	; (8004c98 <_tzset_unlocked_r+0x2f8>)
 8004b94:	0028      	movs	r0, r5
 8004b96:	f000 fc85 	bl	80054a4 <siscanf>
 8004b9a:	ab02      	add	r3, sp, #8
 8004b9c:	8ada      	ldrh	r2, [r3, #22]
 8004b9e:	233c      	movs	r3, #60	; 0x3c
 8004ba0:	4353      	muls	r3, r2
 8004ba2:	8822      	ldrh	r2, [r4, #0]
 8004ba4:	189b      	adds	r3, r3, r2
 8004ba6:	aa07      	add	r2, sp, #28
 8004ba8:	8811      	ldrh	r1, [r2, #0]
 8004baa:	22e1      	movs	r2, #225	; 0xe1
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	434a      	muls	r2, r1
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	18ec      	adds	r4, r5, r3
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d122      	bne.n	8004c06 <_tzset_unlocked_r+0x266>
 8004bc0:	6870      	ldr	r0, [r6, #4]
 8004bc2:	f7ff fe33 	bl	800482c <__tzcalc_limits>
 8004bc6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004bc8:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <_tzset_unlocked_r+0x2d0>)
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	4193      	sbcs	r3, r2
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <_tzset_unlocked_r+0x2d8>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e6fb      	b.n	80049d2 <_tzset_unlocked_r+0x32>
 8004bda:	2201      	movs	r2, #1
 8004bdc:	3b2b      	subs	r3, #43	; 0x2b
 8004bde:	9204      	str	r2, [sp, #16]
 8004be0:	425a      	negs	r2, r3
 8004be2:	4153      	adcs	r3, r2
 8004be4:	18e4      	adds	r4, r4, r3
 8004be6:	e76d      	b.n	8004ac4 <_tzset_unlocked_r+0x124>
 8004be8:	233c      	movs	r3, #60	; 0x3c
 8004bea:	883a      	ldrh	r2, [r7, #0]
 8004bec:	8829      	ldrh	r1, [r5, #0]
 8004bee:	4353      	muls	r3, r2
 8004bf0:	aa02      	add	r2, sp, #8
 8004bf2:	8b12      	ldrh	r2, [r2, #24]
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	22e1      	movs	r2, #225	; 0xe1
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	434a      	muls	r2, r1
 8004bfc:	189b      	adds	r3, r3, r2
 8004bfe:	9a04      	ldr	r2, [sp, #16]
 8004c00:	435a      	muls	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	e778      	b.n	8004af8 <_tzset_unlocked_r+0x158>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e77c      	b.n	8004b04 <_tzset_unlocked_r+0x164>
 8004c0a:	2344      	movs	r3, #68	; 0x44
 8004c0c:	9305      	str	r3, [sp, #20]
 8004c0e:	2d4a      	cmp	r5, #74	; 0x4a
 8004c10:	d101      	bne.n	8004c16 <_tzset_unlocked_r+0x276>
 8004c12:	3401      	adds	r4, #1
 8004c14:	9505      	str	r5, [sp, #20]
 8004c16:	220a      	movs	r2, #10
 8004c18:	a90b      	add	r1, sp, #44	; 0x2c
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	f000 fd18 	bl	8005650 <strtoul>
 8004c20:	231e      	movs	r3, #30
 8004c22:	aa02      	add	r2, sp, #8
 8004c24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	8018      	strh	r0, [r3, #0]
 8004c2a:	42a5      	cmp	r5, r4
 8004c2c:	d116      	bne.n	8004c5c <_tzset_unlocked_r+0x2bc>
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <_tzset_unlocked_r+0x2a6>
 8004c34:	334d      	adds	r3, #77	; 0x4d
 8004c36:	7233      	strb	r3, [r6, #8]
 8004c38:	2303      	movs	r3, #3
 8004c3a:	60f3      	str	r3, [r6, #12]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	6133      	str	r3, [r6, #16]
 8004c40:	9b04      	ldr	r3, [sp, #16]
 8004c42:	6173      	str	r3, [r6, #20]
 8004c44:	e791      	b.n	8004b6a <_tzset_unlocked_r+0x1ca>
 8004c46:	0033      	movs	r3, r6
 8004c48:	224d      	movs	r2, #77	; 0x4d
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	230b      	movs	r3, #11
 8004c50:	6373      	str	r3, [r6, #52]	; 0x34
 8004c52:	3b0a      	subs	r3, #10
 8004c54:	63b3      	str	r3, [r6, #56]	; 0x38
 8004c56:	2300      	movs	r3, #0
 8004c58:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004c5a:	e786      	b.n	8004b6a <_tzset_unlocked_r+0x1ca>
 8004c5c:	9b05      	ldr	r3, [sp, #20]
 8004c5e:	b280      	uxth	r0, r0
 8004c60:	703b      	strb	r3, [r7, #0]
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	e781      	b.n	8004b6a <_tzset_unlocked_r+0x1ca>
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	080061b8 	.word	0x080061b8
 8004c6c:	2000028c 	.word	0x2000028c
 8004c70:	20000294 	.word	0x20000294
 8004c74:	080061bb 	.word	0x080061bb
 8004c78:	20000290 	.word	0x20000290
 8004c7c:	2000006c 	.word	0x2000006c
 8004c80:	080061bf 	.word	0x080061bf
 8004c84:	2000027f 	.word	0x2000027f
 8004c88:	080061e2 	.word	0x080061e2
 8004c8c:	20000274 	.word	0x20000274
 8004c90:	fffff1f0 	.word	0xfffff1f0
 8004c94:	080061ce 	.word	0x080061ce
 8004c98:	080061e1 	.word	0x080061e1

08004c9c <div>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	000e      	movs	r6, r1
 8004ca0:	0004      	movs	r4, r0
 8004ca2:	0011      	movs	r1, r2
 8004ca4:	0030      	movs	r0, r6
 8004ca6:	0015      	movs	r5, r2
 8004ca8:	f7fb fbb0 	bl	800040c <__aeabi_idivmod>
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	db07      	blt.n	8004cc0 <div+0x24>
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	da01      	bge.n	8004cb8 <div+0x1c>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	1b49      	subs	r1, r1, r5
 8004cb8:	6020      	str	r0, [r4, #0]
 8004cba:	6061      	str	r1, [r4, #4]
 8004cbc:	0020      	movs	r0, r4
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	ddf9      	ble.n	8004cb8 <div+0x1c>
 8004cc4:	3801      	subs	r0, #1
 8004cc6:	1949      	adds	r1, r1, r5
 8004cc8:	e7f6      	b.n	8004cb8 <div+0x1c>
	...

08004ccc <_findenv_r>:
 8004ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cce:	000e      	movs	r6, r1
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	0007      	movs	r7, r0
 8004cd4:	9203      	str	r2, [sp, #12]
 8004cd6:	f000 fccf 	bl	8005678 <__env_lock>
 8004cda:	4c19      	ldr	r4, [pc, #100]	; (8004d40 <_findenv_r+0x74>)
 8004cdc:	0033      	movs	r3, r6
 8004cde:	6825      	ldr	r5, [r4, #0]
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	d106      	bne.n	8004cf2 <_findenv_r+0x26>
 8004ce4:	0038      	movs	r0, r7
 8004ce6:	f000 fcc8 	bl	800567a <__env_unlock>
 8004cea:	2000      	movs	r0, #0
 8004cec:	b005      	add	sp, #20
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	d01f      	beq.n	8004d38 <_findenv_r+0x6c>
 8004cf8:	2a3d      	cmp	r2, #61	; 0x3d
 8004cfa:	d1f9      	bne.n	8004cf0 <_findenv_r+0x24>
 8004cfc:	e7f2      	b.n	8004ce4 <_findenv_r+0x18>
 8004cfe:	3504      	adds	r5, #4
 8004d00:	6828      	ldr	r0, [r5, #0]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d0ee      	beq.n	8004ce4 <_findenv_r+0x18>
 8004d06:	9a01      	ldr	r2, [sp, #4]
 8004d08:	0031      	movs	r1, r6
 8004d0a:	f000 fbfd 	bl	8005508 <strncmp>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1f5      	bne.n	8004cfe <_findenv_r+0x32>
 8004d12:	9a01      	ldr	r2, [sp, #4]
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	4694      	mov	ip, r2
 8004d18:	4463      	add	r3, ip
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b3d      	cmp	r3, #61	; 0x3d
 8004d20:	d1ed      	bne.n	8004cfe <_findenv_r+0x32>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	0038      	movs	r0, r7
 8004d26:	1aed      	subs	r5, r5, r3
 8004d28:	9b03      	ldr	r3, [sp, #12]
 8004d2a:	10ad      	asrs	r5, r5, #2
 8004d2c:	601d      	str	r5, [r3, #0]
 8004d2e:	f000 fca4 	bl	800567a <__env_unlock>
 8004d32:	9802      	ldr	r0, [sp, #8]
 8004d34:	3001      	adds	r0, #1
 8004d36:	e7d9      	b.n	8004cec <_findenv_r+0x20>
 8004d38:	1b9b      	subs	r3, r3, r6
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	e7e0      	b.n	8004d00 <_findenv_r+0x34>
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000000 	.word	0x20000000

08004d44 <_getenv_r>:
 8004d44:	b507      	push	{r0, r1, r2, lr}
 8004d46:	aa01      	add	r2, sp, #4
 8004d48:	f7ff ffc0 	bl	8004ccc <_findenv_r>
 8004d4c:	bd0e      	pop	{r1, r2, r3, pc}
	...

08004d50 <__gettzinfo>:
 8004d50:	4800      	ldr	r0, [pc, #0]	; (8004d54 <__gettzinfo+0x4>)
 8004d52:	4770      	bx	lr
 8004d54:	20000078 	.word	0x20000078

08004d58 <gmtime_r>:
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	6806      	ldr	r6, [r0, #0]
 8004d5c:	6847      	ldr	r7, [r0, #4]
 8004d5e:	b085      	sub	sp, #20
 8004d60:	4a59      	ldr	r2, [pc, #356]	; (8004ec8 <gmtime_r+0x170>)
 8004d62:	2300      	movs	r3, #0
 8004d64:	0030      	movs	r0, r6
 8004d66:	000c      	movs	r4, r1
 8004d68:	0039      	movs	r1, r7
 8004d6a:	f7fb fb55 	bl	8000418 <__aeabi_ldivmod>
 8004d6e:	4a57      	ldr	r2, [pc, #348]	; (8004ecc <gmtime_r+0x174>)
 8004d70:	9001      	str	r0, [sp, #4]
 8004d72:	1885      	adds	r5, r0, r2
 8004d74:	2300      	movs	r3, #0
 8004d76:	0030      	movs	r0, r6
 8004d78:	4a53      	ldr	r2, [pc, #332]	; (8004ec8 <gmtime_r+0x170>)
 8004d7a:	0039      	movs	r1, r7
 8004d7c:	f7fb fb4c 	bl	8000418 <__aeabi_ldivmod>
 8004d80:	1e16      	subs	r6, r2, #0
 8004d82:	da06      	bge.n	8004d92 <gmtime_r+0x3a>
 8004d84:	4a52      	ldr	r2, [pc, #328]	; (8004ed0 <gmtime_r+0x178>)
 8004d86:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <gmtime_r+0x170>)
 8004d88:	4694      	mov	ip, r2
 8004d8a:	18f6      	adds	r6, r6, r3
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	4463      	add	r3, ip
 8004d90:	001d      	movs	r5, r3
 8004d92:	21e1      	movs	r1, #225	; 0xe1
 8004d94:	0030      	movs	r0, r6
 8004d96:	0109      	lsls	r1, r1, #4
 8004d98:	f7fb fa52 	bl	8000240 <__divsi3>
 8004d9c:	21e1      	movs	r1, #225	; 0xe1
 8004d9e:	60a0      	str	r0, [r4, #8]
 8004da0:	0109      	lsls	r1, r1, #4
 8004da2:	0030      	movs	r0, r6
 8004da4:	f7fb fb32 	bl	800040c <__aeabi_idivmod>
 8004da8:	000e      	movs	r6, r1
 8004daa:	213c      	movs	r1, #60	; 0x3c
 8004dac:	0030      	movs	r0, r6
 8004dae:	f7fb fa47 	bl	8000240 <__divsi3>
 8004db2:	213c      	movs	r1, #60	; 0x3c
 8004db4:	6060      	str	r0, [r4, #4]
 8004db6:	0030      	movs	r0, r6
 8004db8:	f7fb fb28 	bl	800040c <__aeabi_idivmod>
 8004dbc:	1ce8      	adds	r0, r5, #3
 8004dbe:	6021      	str	r1, [r4, #0]
 8004dc0:	2107      	movs	r1, #7
 8004dc2:	f7fb fb23 	bl	800040c <__aeabi_idivmod>
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	da00      	bge.n	8004dcc <gmtime_r+0x74>
 8004dca:	3107      	adds	r1, #7
 8004dcc:	61a1      	str	r1, [r4, #24]
 8004dce:	1e28      	subs	r0, r5, #0
 8004dd0:	4940      	ldr	r1, [pc, #256]	; (8004ed4 <gmtime_r+0x17c>)
 8004dd2:	da01      	bge.n	8004dd8 <gmtime_r+0x80>
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <gmtime_r+0x180>)
 8004dd6:	18e8      	adds	r0, r5, r3
 8004dd8:	f7fb fa32 	bl	8000240 <__divsi3>
 8004ddc:	0007      	movs	r7, r0
 8004dde:	483f      	ldr	r0, [pc, #252]	; (8004edc <gmtime_r+0x184>)
 8004de0:	493f      	ldr	r1, [pc, #252]	; (8004ee0 <gmtime_r+0x188>)
 8004de2:	4378      	muls	r0, r7
 8004de4:	1945      	adds	r5, r0, r5
 8004de6:	0028      	movs	r0, r5
 8004de8:	f7fb f9a0 	bl	800012c <__udivsi3>
 8004dec:	493d      	ldr	r1, [pc, #244]	; (8004ee4 <gmtime_r+0x18c>)
 8004dee:	1946      	adds	r6, r0, r5
 8004df0:	0028      	movs	r0, r5
 8004df2:	f7fb f99b 	bl	800012c <__udivsi3>
 8004df6:	493c      	ldr	r1, [pc, #240]	; (8004ee8 <gmtime_r+0x190>)
 8004df8:	1a36      	subs	r6, r6, r0
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f7fb f996 	bl	800012c <__udivsi3>
 8004e00:	216e      	movs	r1, #110	; 0x6e
 8004e02:	1a36      	subs	r6, r6, r0
 8004e04:	31ff      	adds	r1, #255	; 0xff
 8004e06:	0030      	movs	r0, r6
 8004e08:	f7fb f990 	bl	800012c <__udivsi3>
 8004e0c:	4937      	ldr	r1, [pc, #220]	; (8004eec <gmtime_r+0x194>)
 8004e0e:	9001      	str	r0, [sp, #4]
 8004e10:	0030      	movs	r0, r6
 8004e12:	f7fb f98b 	bl	800012c <__udivsi3>
 8004e16:	4933      	ldr	r1, [pc, #204]	; (8004ee4 <gmtime_r+0x18c>)
 8004e18:	1945      	adds	r5, r0, r5
 8004e1a:	0030      	movs	r0, r6
 8004e1c:	f7fb f986 	bl	800012c <__udivsi3>
 8004e20:	216e      	movs	r1, #110	; 0x6e
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	31ff      	adds	r1, #255	; 0xff
 8004e26:	4359      	muls	r1, r3
 8004e28:	1a2d      	subs	r5, r5, r0
 8004e2a:	1a6b      	subs	r3, r5, r1
 8004e2c:	2605      	movs	r6, #5
 8004e2e:	0018      	movs	r0, r3
 8004e30:	4370      	muls	r0, r6
 8004e32:	2199      	movs	r1, #153	; 0x99
 8004e34:	3002      	adds	r0, #2
 8004e36:	9302      	str	r3, [sp, #8]
 8004e38:	f7fb f978 	bl	800012c <__udivsi3>
 8004e3c:	0005      	movs	r5, r0
 8004e3e:	2099      	movs	r0, #153	; 0x99
 8004e40:	4368      	muls	r0, r5
 8004e42:	9b02      	ldr	r3, [sp, #8]
 8004e44:	0031      	movs	r1, r6
 8004e46:	3301      	adds	r3, #1
 8004e48:	3002      	adds	r0, #2
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	f7fb f96e 	bl	800012c <__udivsi3>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	3e03      	subs	r6, #3
 8004e54:	1a1b      	subs	r3, r3, r0
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	2d09      	cmp	r5, #9
 8004e5a:	d900      	bls.n	8004e5e <gmtime_r+0x106>
 8004e5c:	3e0c      	subs	r6, #12
 8004e5e:	23c8      	movs	r3, #200	; 0xc8
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	435f      	muls	r7, r3
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	1976      	adds	r6, r6, r5
 8004e68:	18ff      	adds	r7, r7, r3
 8004e6a:	2501      	movs	r5, #1
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	415b      	adcs	r3, r3
 8004e72:	18ff      	adds	r7, r7, r3
 8004e74:	2332      	movs	r3, #50	; 0x32
 8004e76:	9a02      	ldr	r2, [sp, #8]
 8004e78:	33ff      	adds	r3, #255	; 0xff
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d90e      	bls.n	8004e9c <gmtime_r+0x144>
 8004e7e:	0015      	movs	r5, r2
 8004e80:	3d33      	subs	r5, #51	; 0x33
 8004e82:	3dff      	subs	r5, #255	; 0xff
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <gmtime_r+0x198>)
 8004e86:	0020      	movs	r0, r4
 8004e88:	18ff      	adds	r7, r7, r3
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	61e5      	str	r5, [r4, #28]
 8004e8e:	60e3      	str	r3, [r4, #12]
 8004e90:	2300      	movs	r3, #0
 8004e92:	6167      	str	r7, [r4, #20]
 8004e94:	6126      	str	r6, [r4, #16]
 8004e96:	6223      	str	r3, [r4, #32]
 8004e98:	b005      	add	sp, #20
 8004e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9c:	9b01      	ldr	r3, [sp, #4]
 8004e9e:	079b      	lsls	r3, r3, #30
 8004ea0:	d106      	bne.n	8004eb0 <gmtime_r+0x158>
 8004ea2:	2164      	movs	r1, #100	; 0x64
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	f7fb f9c7 	bl	8000238 <__aeabi_uidivmod>
 8004eaa:	0028      	movs	r0, r5
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d106      	bne.n	8004ebe <gmtime_r+0x166>
 8004eb0:	21c8      	movs	r1, #200	; 0xc8
 8004eb2:	9801      	ldr	r0, [sp, #4]
 8004eb4:	0049      	lsls	r1, r1, #1
 8004eb6:	f7fb f9bf 	bl	8000238 <__aeabi_uidivmod>
 8004eba:	4248      	negs	r0, r1
 8004ebc:	4148      	adcs	r0, r1
 8004ebe:	9d02      	ldr	r5, [sp, #8]
 8004ec0:	353b      	adds	r5, #59	; 0x3b
 8004ec2:	182d      	adds	r5, r5, r0
 8004ec4:	e7de      	b.n	8004e84 <gmtime_r+0x12c>
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	00015180 	.word	0x00015180
 8004ecc:	000afa6c 	.word	0x000afa6c
 8004ed0:	000afa6b 	.word	0x000afa6b
 8004ed4:	00023ab1 	.word	0x00023ab1
 8004ed8:	fffdc550 	.word	0xfffdc550
 8004edc:	fffdc54f 	.word	0xfffdc54f
 8004ee0:	00008eac 	.word	0x00008eac
 8004ee4:	000005b4 	.word	0x000005b4
 8004ee8:	00023ab0 	.word	0x00023ab0
 8004eec:	00008e94 	.word	0x00008e94
 8004ef0:	fffff894 	.word	0xfffff894

08004ef4 <__malloc_lock>:
 8004ef4:	4770      	bx	lr

08004ef6 <__malloc_unlock>:
 8004ef6:	4770      	bx	lr

08004ef8 <__ssputs_r>:
 8004ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efa:	688e      	ldr	r6, [r1, #8]
 8004efc:	b085      	sub	sp, #20
 8004efe:	0007      	movs	r7, r0
 8004f00:	000c      	movs	r4, r1
 8004f02:	9203      	str	r2, [sp, #12]
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	429e      	cmp	r6, r3
 8004f08:	d83c      	bhi.n	8004f84 <__ssputs_r+0x8c>
 8004f0a:	2390      	movs	r3, #144	; 0x90
 8004f0c:	898a      	ldrh	r2, [r1, #12]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	421a      	tst	r2, r3
 8004f12:	d034      	beq.n	8004f7e <__ssputs_r+0x86>
 8004f14:	2503      	movs	r5, #3
 8004f16:	6909      	ldr	r1, [r1, #16]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	6963      	ldr	r3, [r4, #20]
 8004f20:	9802      	ldr	r0, [sp, #8]
 8004f22:	435d      	muls	r5, r3
 8004f24:	0feb      	lsrs	r3, r5, #31
 8004f26:	195d      	adds	r5, r3, r5
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	106d      	asrs	r5, r5, #1
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	181b      	adds	r3, r3, r0
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	d900      	bls.n	8004f36 <__ssputs_r+0x3e>
 8004f34:	001d      	movs	r5, r3
 8004f36:	0553      	lsls	r3, r2, #21
 8004f38:	d532      	bpl.n	8004fa0 <__ssputs_r+0xa8>
 8004f3a:	0029      	movs	r1, r5
 8004f3c:	0038      	movs	r0, r7
 8004f3e:	f7ff fbd9 	bl	80046f4 <_malloc_r>
 8004f42:	1e06      	subs	r6, r0, #0
 8004f44:	d109      	bne.n	8004f5a <__ssputs_r+0x62>
 8004f46:	230c      	movs	r3, #12
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	89a2      	ldrh	r2, [r4, #12]
 8004f50:	4240      	negs	r0, r0
 8004f52:	4313      	orrs	r3, r2
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	b005      	add	sp, #20
 8004f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5a:	9a02      	ldr	r2, [sp, #8]
 8004f5c:	6921      	ldr	r1, [r4, #16]
 8004f5e:	f7ff f8e7 	bl	8004130 <memcpy>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <__ssputs_r+0xc0>)
 8004f66:	401a      	ands	r2, r3
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	9b02      	ldr	r3, [sp, #8]
 8004f70:	6126      	str	r6, [r4, #16]
 8004f72:	18f6      	adds	r6, r6, r3
 8004f74:	6026      	str	r6, [r4, #0]
 8004f76:	6165      	str	r5, [r4, #20]
 8004f78:	9e01      	ldr	r6, [sp, #4]
 8004f7a:	1aed      	subs	r5, r5, r3
 8004f7c:	60a5      	str	r5, [r4, #8]
 8004f7e:	9b01      	ldr	r3, [sp, #4]
 8004f80:	429e      	cmp	r6, r3
 8004f82:	d900      	bls.n	8004f86 <__ssputs_r+0x8e>
 8004f84:	9e01      	ldr	r6, [sp, #4]
 8004f86:	0032      	movs	r2, r6
 8004f88:	9903      	ldr	r1, [sp, #12]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	f000 fba5 	bl	80056da <memmove>
 8004f90:	68a3      	ldr	r3, [r4, #8]
 8004f92:	2000      	movs	r0, #0
 8004f94:	1b9b      	subs	r3, r3, r6
 8004f96:	60a3      	str	r3, [r4, #8]
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	199e      	adds	r6, r3, r6
 8004f9c:	6026      	str	r6, [r4, #0]
 8004f9e:	e7da      	b.n	8004f56 <__ssputs_r+0x5e>
 8004fa0:	002a      	movs	r2, r5
 8004fa2:	0038      	movs	r0, r7
 8004fa4:	f000 fbac 	bl	8005700 <_realloc_r>
 8004fa8:	1e06      	subs	r6, r0, #0
 8004faa:	d1e0      	bne.n	8004f6e <__ssputs_r+0x76>
 8004fac:	6921      	ldr	r1, [r4, #16]
 8004fae:	0038      	movs	r0, r7
 8004fb0:	f7ff fb56 	bl	8004660 <_free_r>
 8004fb4:	e7c7      	b.n	8004f46 <__ssputs_r+0x4e>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	fffffb7f 	.word	0xfffffb7f

08004fbc <_svfiprintf_r>:
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b0a1      	sub	sp, #132	; 0x84
 8004fc0:	9003      	str	r0, [sp, #12]
 8004fc2:	001d      	movs	r5, r3
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	000f      	movs	r7, r1
 8004fc8:	0016      	movs	r6, r2
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	d511      	bpl.n	8004ff2 <_svfiprintf_r+0x36>
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10e      	bne.n	8004ff2 <_svfiprintf_r+0x36>
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	f7ff fb8d 	bl	80046f4 <_malloc_r>
 8004fda:	6038      	str	r0, [r7, #0]
 8004fdc:	6138      	str	r0, [r7, #16]
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d105      	bne.n	8004fee <_svfiprintf_r+0x32>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	9a03      	ldr	r2, [sp, #12]
 8004fe6:	3801      	subs	r0, #1
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	b021      	add	sp, #132	; 0x84
 8004fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	ac08      	add	r4, sp, #32
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	3320      	adds	r3, #32
 8004ffa:	7663      	strb	r3, [r4, #25]
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	76a3      	strb	r3, [r4, #26]
 8005000:	9507      	str	r5, [sp, #28]
 8005002:	0035      	movs	r5, r6
 8005004:	782b      	ldrb	r3, [r5, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <_svfiprintf_r+0x52>
 800500a:	2b25      	cmp	r3, #37	; 0x25
 800500c:	d146      	bne.n	800509c <_svfiprintf_r+0xe0>
 800500e:	1bab      	subs	r3, r5, r6
 8005010:	9305      	str	r3, [sp, #20]
 8005012:	d00c      	beq.n	800502e <_svfiprintf_r+0x72>
 8005014:	0032      	movs	r2, r6
 8005016:	0039      	movs	r1, r7
 8005018:	9803      	ldr	r0, [sp, #12]
 800501a:	f7ff ff6d 	bl	8004ef8 <__ssputs_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d100      	bne.n	8005024 <_svfiprintf_r+0x68>
 8005022:	e0ae      	b.n	8005182 <_svfiprintf_r+0x1c6>
 8005024:	6962      	ldr	r2, [r4, #20]
 8005026:	9b05      	ldr	r3, [sp, #20]
 8005028:	4694      	mov	ip, r2
 800502a:	4463      	add	r3, ip
 800502c:	6163      	str	r3, [r4, #20]
 800502e:	782b      	ldrb	r3, [r5, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d100      	bne.n	8005036 <_svfiprintf_r+0x7a>
 8005034:	e0a5      	b.n	8005182 <_svfiprintf_r+0x1c6>
 8005036:	2201      	movs	r2, #1
 8005038:	2300      	movs	r3, #0
 800503a:	4252      	negs	r2, r2
 800503c:	6062      	str	r2, [r4, #4]
 800503e:	a904      	add	r1, sp, #16
 8005040:	3254      	adds	r2, #84	; 0x54
 8005042:	1852      	adds	r2, r2, r1
 8005044:	1c6e      	adds	r6, r5, #1
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	60e3      	str	r3, [r4, #12]
 800504a:	60a3      	str	r3, [r4, #8]
 800504c:	7013      	strb	r3, [r2, #0]
 800504e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005050:	7831      	ldrb	r1, [r6, #0]
 8005052:	2205      	movs	r2, #5
 8005054:	4853      	ldr	r0, [pc, #332]	; (80051a4 <_svfiprintf_r+0x1e8>)
 8005056:	f000 fb35 	bl	80056c4 <memchr>
 800505a:	1c75      	adds	r5, r6, #1
 800505c:	2800      	cmp	r0, #0
 800505e:	d11f      	bne.n	80050a0 <_svfiprintf_r+0xe4>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	06d3      	lsls	r3, r2, #27
 8005064:	d504      	bpl.n	8005070 <_svfiprintf_r+0xb4>
 8005066:	2353      	movs	r3, #83	; 0x53
 8005068:	a904      	add	r1, sp, #16
 800506a:	185b      	adds	r3, r3, r1
 800506c:	2120      	movs	r1, #32
 800506e:	7019      	strb	r1, [r3, #0]
 8005070:	0713      	lsls	r3, r2, #28
 8005072:	d504      	bpl.n	800507e <_svfiprintf_r+0xc2>
 8005074:	2353      	movs	r3, #83	; 0x53
 8005076:	a904      	add	r1, sp, #16
 8005078:	185b      	adds	r3, r3, r1
 800507a:	212b      	movs	r1, #43	; 0x2b
 800507c:	7019      	strb	r1, [r3, #0]
 800507e:	7833      	ldrb	r3, [r6, #0]
 8005080:	2b2a      	cmp	r3, #42	; 0x2a
 8005082:	d016      	beq.n	80050b2 <_svfiprintf_r+0xf6>
 8005084:	0035      	movs	r5, r6
 8005086:	2100      	movs	r1, #0
 8005088:	200a      	movs	r0, #10
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	782a      	ldrb	r2, [r5, #0]
 800508e:	1c6e      	adds	r6, r5, #1
 8005090:	3a30      	subs	r2, #48	; 0x30
 8005092:	2a09      	cmp	r2, #9
 8005094:	d94e      	bls.n	8005134 <_svfiprintf_r+0x178>
 8005096:	2900      	cmp	r1, #0
 8005098:	d018      	beq.n	80050cc <_svfiprintf_r+0x110>
 800509a:	e010      	b.n	80050be <_svfiprintf_r+0x102>
 800509c:	3501      	adds	r5, #1
 800509e:	e7b1      	b.n	8005004 <_svfiprintf_r+0x48>
 80050a0:	4b40      	ldr	r3, [pc, #256]	; (80051a4 <_svfiprintf_r+0x1e8>)
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	1ac0      	subs	r0, r0, r3
 80050a6:	2301      	movs	r3, #1
 80050a8:	4083      	lsls	r3, r0
 80050aa:	4313      	orrs	r3, r2
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	002e      	movs	r6, r5
 80050b0:	e7ce      	b.n	8005050 <_svfiprintf_r+0x94>
 80050b2:	9b07      	ldr	r3, [sp, #28]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	9107      	str	r1, [sp, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db01      	blt.n	80050c2 <_svfiprintf_r+0x106>
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c0:	e004      	b.n	80050cc <_svfiprintf_r+0x110>
 80050c2:	425b      	negs	r3, r3
 80050c4:	60e3      	str	r3, [r4, #12]
 80050c6:	2302      	movs	r3, #2
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	782b      	ldrb	r3, [r5, #0]
 80050ce:	2b2e      	cmp	r3, #46	; 0x2e
 80050d0:	d10a      	bne.n	80050e8 <_svfiprintf_r+0x12c>
 80050d2:	786b      	ldrb	r3, [r5, #1]
 80050d4:	2b2a      	cmp	r3, #42	; 0x2a
 80050d6:	d135      	bne.n	8005144 <_svfiprintf_r+0x188>
 80050d8:	9b07      	ldr	r3, [sp, #28]
 80050da:	3502      	adds	r5, #2
 80050dc:	1d1a      	adds	r2, r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	9207      	str	r2, [sp, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	db2b      	blt.n	800513e <_svfiprintf_r+0x182>
 80050e6:	9309      	str	r3, [sp, #36]	; 0x24
 80050e8:	4e2f      	ldr	r6, [pc, #188]	; (80051a8 <_svfiprintf_r+0x1ec>)
 80050ea:	7829      	ldrb	r1, [r5, #0]
 80050ec:	2203      	movs	r2, #3
 80050ee:	0030      	movs	r0, r6
 80050f0:	f000 fae8 	bl	80056c4 <memchr>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d006      	beq.n	8005106 <_svfiprintf_r+0x14a>
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	1b80      	subs	r0, r0, r6
 80050fc:	4083      	lsls	r3, r0
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	3501      	adds	r5, #1
 8005102:	4313      	orrs	r3, r2
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	7829      	ldrb	r1, [r5, #0]
 8005108:	2206      	movs	r2, #6
 800510a:	4828      	ldr	r0, [pc, #160]	; (80051ac <_svfiprintf_r+0x1f0>)
 800510c:	1c6e      	adds	r6, r5, #1
 800510e:	7621      	strb	r1, [r4, #24]
 8005110:	f000 fad8 	bl	80056c4 <memchr>
 8005114:	2800      	cmp	r0, #0
 8005116:	d03c      	beq.n	8005192 <_svfiprintf_r+0x1d6>
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <_svfiprintf_r+0x1f4>)
 800511a:	2b00      	cmp	r3, #0
 800511c:	d125      	bne.n	800516a <_svfiprintf_r+0x1ae>
 800511e:	2207      	movs	r2, #7
 8005120:	9b07      	ldr	r3, [sp, #28]
 8005122:	3307      	adds	r3, #7
 8005124:	4393      	bics	r3, r2
 8005126:	3308      	adds	r3, #8
 8005128:	9307      	str	r3, [sp, #28]
 800512a:	6963      	ldr	r3, [r4, #20]
 800512c:	9a04      	ldr	r2, [sp, #16]
 800512e:	189b      	adds	r3, r3, r2
 8005130:	6163      	str	r3, [r4, #20]
 8005132:	e766      	b.n	8005002 <_svfiprintf_r+0x46>
 8005134:	4343      	muls	r3, r0
 8005136:	2101      	movs	r1, #1
 8005138:	189b      	adds	r3, r3, r2
 800513a:	0035      	movs	r5, r6
 800513c:	e7a6      	b.n	800508c <_svfiprintf_r+0xd0>
 800513e:	2301      	movs	r3, #1
 8005140:	425b      	negs	r3, r3
 8005142:	e7d0      	b.n	80050e6 <_svfiprintf_r+0x12a>
 8005144:	2300      	movs	r3, #0
 8005146:	200a      	movs	r0, #10
 8005148:	001a      	movs	r2, r3
 800514a:	3501      	adds	r5, #1
 800514c:	6063      	str	r3, [r4, #4]
 800514e:	7829      	ldrb	r1, [r5, #0]
 8005150:	1c6e      	adds	r6, r5, #1
 8005152:	3930      	subs	r1, #48	; 0x30
 8005154:	2909      	cmp	r1, #9
 8005156:	d903      	bls.n	8005160 <_svfiprintf_r+0x1a4>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0c5      	beq.n	80050e8 <_svfiprintf_r+0x12c>
 800515c:	9209      	str	r2, [sp, #36]	; 0x24
 800515e:	e7c3      	b.n	80050e8 <_svfiprintf_r+0x12c>
 8005160:	4342      	muls	r2, r0
 8005162:	2301      	movs	r3, #1
 8005164:	1852      	adds	r2, r2, r1
 8005166:	0035      	movs	r5, r6
 8005168:	e7f1      	b.n	800514e <_svfiprintf_r+0x192>
 800516a:	ab07      	add	r3, sp, #28
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	003a      	movs	r2, r7
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <_svfiprintf_r+0x1f8>)
 8005172:	0021      	movs	r1, r4
 8005174:	9803      	ldr	r0, [sp, #12]
 8005176:	e000      	b.n	800517a <_svfiprintf_r+0x1be>
 8005178:	bf00      	nop
 800517a:	9004      	str	r0, [sp, #16]
 800517c:	9b04      	ldr	r3, [sp, #16]
 800517e:	3301      	adds	r3, #1
 8005180:	d1d3      	bne.n	800512a <_svfiprintf_r+0x16e>
 8005182:	89bb      	ldrh	r3, [r7, #12]
 8005184:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005186:	065b      	lsls	r3, r3, #25
 8005188:	d400      	bmi.n	800518c <_svfiprintf_r+0x1d0>
 800518a:	e72e      	b.n	8004fea <_svfiprintf_r+0x2e>
 800518c:	2001      	movs	r0, #1
 800518e:	4240      	negs	r0, r0
 8005190:	e72b      	b.n	8004fea <_svfiprintf_r+0x2e>
 8005192:	ab07      	add	r3, sp, #28
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	003a      	movs	r2, r7
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <_svfiprintf_r+0x1f8>)
 800519a:	0021      	movs	r1, r4
 800519c:	9803      	ldr	r0, [sp, #12]
 800519e:	f000 f879 	bl	8005294 <_printf_i>
 80051a2:	e7ea      	b.n	800517a <_svfiprintf_r+0x1be>
 80051a4:	080061f4 	.word	0x080061f4
 80051a8:	080061fa 	.word	0x080061fa
 80051ac:	080061fe 	.word	0x080061fe
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004ef9 	.word	0x08004ef9

080051b8 <_printf_common>:
 80051b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ba:	0015      	movs	r5, r2
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	688a      	ldr	r2, [r1, #8]
 80051c0:	690b      	ldr	r3, [r1, #16]
 80051c2:	9000      	str	r0, [sp, #0]
 80051c4:	000c      	movs	r4, r1
 80051c6:	4293      	cmp	r3, r2
 80051c8:	da00      	bge.n	80051cc <_printf_common+0x14>
 80051ca:	0013      	movs	r3, r2
 80051cc:	0022      	movs	r2, r4
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	3243      	adds	r2, #67	; 0x43
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	d001      	beq.n	80051dc <_printf_common+0x24>
 80051d8:	3301      	adds	r3, #1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	069b      	lsls	r3, r3, #26
 80051e0:	d502      	bpl.n	80051e8 <_printf_common+0x30>
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	3302      	adds	r3, #2
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	2706      	movs	r7, #6
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	401f      	ands	r7, r3
 80051ee:	d027      	beq.n	8005240 <_printf_common+0x88>
 80051f0:	0023      	movs	r3, r4
 80051f2:	3343      	adds	r3, #67	; 0x43
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	4193      	sbcs	r3, r2
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	0692      	lsls	r2, r2, #26
 80051fe:	d430      	bmi.n	8005262 <_printf_common+0xaa>
 8005200:	0022      	movs	r2, r4
 8005202:	9901      	ldr	r1, [sp, #4]
 8005204:	3243      	adds	r2, #67	; 0x43
 8005206:	9800      	ldr	r0, [sp, #0]
 8005208:	9e08      	ldr	r6, [sp, #32]
 800520a:	47b0      	blx	r6
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d025      	beq.n	800525c <_printf_common+0xa4>
 8005210:	2306      	movs	r3, #6
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	682a      	ldr	r2, [r5, #0]
 8005216:	68e1      	ldr	r1, [r4, #12]
 8005218:	4003      	ands	r3, r0
 800521a:	2500      	movs	r5, #0
 800521c:	2b04      	cmp	r3, #4
 800521e:	d103      	bne.n	8005228 <_printf_common+0x70>
 8005220:	1a8d      	subs	r5, r1, r2
 8005222:	43eb      	mvns	r3, r5
 8005224:	17db      	asrs	r3, r3, #31
 8005226:	401d      	ands	r5, r3
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	6922      	ldr	r2, [r4, #16]
 800522c:	4293      	cmp	r3, r2
 800522e:	dd01      	ble.n	8005234 <_printf_common+0x7c>
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	18ed      	adds	r5, r5, r3
 8005234:	2700      	movs	r7, #0
 8005236:	42bd      	cmp	r5, r7
 8005238:	d120      	bne.n	800527c <_printf_common+0xc4>
 800523a:	2000      	movs	r0, #0
 800523c:	e010      	b.n	8005260 <_printf_common+0xa8>
 800523e:	3701      	adds	r7, #1
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	682a      	ldr	r2, [r5, #0]
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	42bb      	cmp	r3, r7
 8005248:	ddd2      	ble.n	80051f0 <_printf_common+0x38>
 800524a:	0022      	movs	r2, r4
 800524c:	2301      	movs	r3, #1
 800524e:	3219      	adds	r2, #25
 8005250:	9901      	ldr	r1, [sp, #4]
 8005252:	9800      	ldr	r0, [sp, #0]
 8005254:	9e08      	ldr	r6, [sp, #32]
 8005256:	47b0      	blx	r6
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d1f0      	bne.n	800523e <_printf_common+0x86>
 800525c:	2001      	movs	r0, #1
 800525e:	4240      	negs	r0, r0
 8005260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005262:	2030      	movs	r0, #48	; 0x30
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	3143      	adds	r1, #67	; 0x43
 8005268:	7008      	strb	r0, [r1, #0]
 800526a:	0021      	movs	r1, r4
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	3145      	adds	r1, #69	; 0x45
 8005270:	7809      	ldrb	r1, [r1, #0]
 8005272:	18a2      	adds	r2, r4, r2
 8005274:	3243      	adds	r2, #67	; 0x43
 8005276:	3302      	adds	r3, #2
 8005278:	7011      	strb	r1, [r2, #0]
 800527a:	e7c1      	b.n	8005200 <_printf_common+0x48>
 800527c:	0022      	movs	r2, r4
 800527e:	2301      	movs	r3, #1
 8005280:	321a      	adds	r2, #26
 8005282:	9901      	ldr	r1, [sp, #4]
 8005284:	9800      	ldr	r0, [sp, #0]
 8005286:	9e08      	ldr	r6, [sp, #32]
 8005288:	47b0      	blx	r6
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	d0e6      	beq.n	800525c <_printf_common+0xa4>
 800528e:	3701      	adds	r7, #1
 8005290:	e7d1      	b.n	8005236 <_printf_common+0x7e>
	...

08005294 <_printf_i>:
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	9204      	str	r2, [sp, #16]
 800529a:	000a      	movs	r2, r1
 800529c:	3243      	adds	r2, #67	; 0x43
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	9003      	str	r0, [sp, #12]
 80052a2:	9202      	str	r2, [sp, #8]
 80052a4:	7e0a      	ldrb	r2, [r1, #24]
 80052a6:	000c      	movs	r4, r1
 80052a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052aa:	2a6e      	cmp	r2, #110	; 0x6e
 80052ac:	d100      	bne.n	80052b0 <_printf_i+0x1c>
 80052ae:	e086      	b.n	80053be <_printf_i+0x12a>
 80052b0:	d81f      	bhi.n	80052f2 <_printf_i+0x5e>
 80052b2:	2a63      	cmp	r2, #99	; 0x63
 80052b4:	d033      	beq.n	800531e <_printf_i+0x8a>
 80052b6:	d808      	bhi.n	80052ca <_printf_i+0x36>
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	d100      	bne.n	80052be <_printf_i+0x2a>
 80052bc:	e08c      	b.n	80053d8 <_printf_i+0x144>
 80052be:	2a58      	cmp	r2, #88	; 0x58
 80052c0:	d04d      	beq.n	800535e <_printf_i+0xca>
 80052c2:	0025      	movs	r5, r4
 80052c4:	3542      	adds	r5, #66	; 0x42
 80052c6:	702a      	strb	r2, [r5, #0]
 80052c8:	e030      	b.n	800532c <_printf_i+0x98>
 80052ca:	2a64      	cmp	r2, #100	; 0x64
 80052cc:	d001      	beq.n	80052d2 <_printf_i+0x3e>
 80052ce:	2a69      	cmp	r2, #105	; 0x69
 80052d0:	d1f7      	bne.n	80052c2 <_printf_i+0x2e>
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	6825      	ldr	r5, [r4, #0]
 80052d6:	1d0a      	adds	r2, r1, #4
 80052d8:	0628      	lsls	r0, r5, #24
 80052da:	d529      	bpl.n	8005330 <_printf_i+0x9c>
 80052dc:	6808      	ldr	r0, [r1, #0]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	2800      	cmp	r0, #0
 80052e2:	da03      	bge.n	80052ec <_printf_i+0x58>
 80052e4:	232d      	movs	r3, #45	; 0x2d
 80052e6:	9a02      	ldr	r2, [sp, #8]
 80052e8:	4240      	negs	r0, r0
 80052ea:	7013      	strb	r3, [r2, #0]
 80052ec:	4e6b      	ldr	r6, [pc, #428]	; (800549c <_printf_i+0x208>)
 80052ee:	270a      	movs	r7, #10
 80052f0:	e04f      	b.n	8005392 <_printf_i+0xfe>
 80052f2:	2a73      	cmp	r2, #115	; 0x73
 80052f4:	d074      	beq.n	80053e0 <_printf_i+0x14c>
 80052f6:	d808      	bhi.n	800530a <_printf_i+0x76>
 80052f8:	2a6f      	cmp	r2, #111	; 0x6f
 80052fa:	d01f      	beq.n	800533c <_printf_i+0xa8>
 80052fc:	2a70      	cmp	r2, #112	; 0x70
 80052fe:	d1e0      	bne.n	80052c2 <_printf_i+0x2e>
 8005300:	2220      	movs	r2, #32
 8005302:	6809      	ldr	r1, [r1, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	6022      	str	r2, [r4, #0]
 8005308:	e003      	b.n	8005312 <_printf_i+0x7e>
 800530a:	2a75      	cmp	r2, #117	; 0x75
 800530c:	d016      	beq.n	800533c <_printf_i+0xa8>
 800530e:	2a78      	cmp	r2, #120	; 0x78
 8005310:	d1d7      	bne.n	80052c2 <_printf_i+0x2e>
 8005312:	0022      	movs	r2, r4
 8005314:	2178      	movs	r1, #120	; 0x78
 8005316:	3245      	adds	r2, #69	; 0x45
 8005318:	7011      	strb	r1, [r2, #0]
 800531a:	4e61      	ldr	r6, [pc, #388]	; (80054a0 <_printf_i+0x20c>)
 800531c:	e022      	b.n	8005364 <_printf_i+0xd0>
 800531e:	0025      	movs	r5, r4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	3542      	adds	r5, #66	; 0x42
 8005324:	1d11      	adds	r1, r2, #4
 8005326:	6019      	str	r1, [r3, #0]
 8005328:	6813      	ldr	r3, [r2, #0]
 800532a:	702b      	strb	r3, [r5, #0]
 800532c:	2301      	movs	r3, #1
 800532e:	e065      	b.n	80053fc <_printf_i+0x168>
 8005330:	6808      	ldr	r0, [r1, #0]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	0669      	lsls	r1, r5, #25
 8005336:	d5d3      	bpl.n	80052e0 <_printf_i+0x4c>
 8005338:	b200      	sxth	r0, r0
 800533a:	e7d1      	b.n	80052e0 <_printf_i+0x4c>
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	1d08      	adds	r0, r1, #4
 8005342:	6018      	str	r0, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	062e      	lsls	r6, r5, #24
 8005348:	d505      	bpl.n	8005356 <_printf_i+0xc2>
 800534a:	4e54      	ldr	r6, [pc, #336]	; (800549c <_printf_i+0x208>)
 800534c:	2708      	movs	r7, #8
 800534e:	2a6f      	cmp	r2, #111	; 0x6f
 8005350:	d01b      	beq.n	800538a <_printf_i+0xf6>
 8005352:	270a      	movs	r7, #10
 8005354:	e019      	b.n	800538a <_printf_i+0xf6>
 8005356:	066d      	lsls	r5, r5, #25
 8005358:	d5f7      	bpl.n	800534a <_printf_i+0xb6>
 800535a:	b280      	uxth	r0, r0
 800535c:	e7f5      	b.n	800534a <_printf_i+0xb6>
 800535e:	3145      	adds	r1, #69	; 0x45
 8005360:	4e4e      	ldr	r6, [pc, #312]	; (800549c <_printf_i+0x208>)
 8005362:	700a      	strb	r2, [r1, #0]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	1d01      	adds	r1, r0, #4
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6019      	str	r1, [r3, #0]
 800536e:	0615      	lsls	r5, r2, #24
 8005370:	d521      	bpl.n	80053b6 <_printf_i+0x122>
 8005372:	07d3      	lsls	r3, r2, #31
 8005374:	d502      	bpl.n	800537c <_printf_i+0xe8>
 8005376:	2320      	movs	r3, #32
 8005378:	431a      	orrs	r2, r3
 800537a:	6022      	str	r2, [r4, #0]
 800537c:	2710      	movs	r7, #16
 800537e:	2800      	cmp	r0, #0
 8005380:	d103      	bne.n	800538a <_printf_i+0xf6>
 8005382:	2320      	movs	r3, #32
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	439a      	bics	r2, r3
 8005388:	6022      	str	r2, [r4, #0]
 800538a:	0023      	movs	r3, r4
 800538c:	2200      	movs	r2, #0
 800538e:	3343      	adds	r3, #67	; 0x43
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	6863      	ldr	r3, [r4, #4]
 8005394:	60a3      	str	r3, [r4, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	db58      	blt.n	800544c <_printf_i+0x1b8>
 800539a:	2204      	movs	r2, #4
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	4391      	bics	r1, r2
 80053a0:	6021      	str	r1, [r4, #0]
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d154      	bne.n	8005450 <_printf_i+0x1bc>
 80053a6:	9d02      	ldr	r5, [sp, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05a      	beq.n	8005462 <_printf_i+0x1ce>
 80053ac:	0025      	movs	r5, r4
 80053ae:	7833      	ldrb	r3, [r6, #0]
 80053b0:	3542      	adds	r5, #66	; 0x42
 80053b2:	702b      	strb	r3, [r5, #0]
 80053b4:	e055      	b.n	8005462 <_printf_i+0x1ce>
 80053b6:	0655      	lsls	r5, r2, #25
 80053b8:	d5db      	bpl.n	8005372 <_printf_i+0xde>
 80053ba:	b280      	uxth	r0, r0
 80053bc:	e7d9      	b.n	8005372 <_printf_i+0xde>
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	680d      	ldr	r5, [r1, #0]
 80053c2:	1d10      	adds	r0, r2, #4
 80053c4:	6949      	ldr	r1, [r1, #20]
 80053c6:	6018      	str	r0, [r3, #0]
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	062e      	lsls	r6, r5, #24
 80053cc:	d501      	bpl.n	80053d2 <_printf_i+0x13e>
 80053ce:	6019      	str	r1, [r3, #0]
 80053d0:	e002      	b.n	80053d8 <_printf_i+0x144>
 80053d2:	066d      	lsls	r5, r5, #25
 80053d4:	d5fb      	bpl.n	80053ce <_printf_i+0x13a>
 80053d6:	8019      	strh	r1, [r3, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	9d02      	ldr	r5, [sp, #8]
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	e04f      	b.n	8005480 <_printf_i+0x1ec>
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	1d11      	adds	r1, r2, #4
 80053e4:	6019      	str	r1, [r3, #0]
 80053e6:	6815      	ldr	r5, [r2, #0]
 80053e8:	2100      	movs	r1, #0
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	0028      	movs	r0, r5
 80053ee:	f000 f969 	bl	80056c4 <memchr>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d001      	beq.n	80053fa <_printf_i+0x166>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	9a02      	ldr	r2, [sp, #8]
 8005402:	7013      	strb	r3, [r2, #0]
 8005404:	e03c      	b.n	8005480 <_printf_i+0x1ec>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	002a      	movs	r2, r5
 800540a:	9904      	ldr	r1, [sp, #16]
 800540c:	9803      	ldr	r0, [sp, #12]
 800540e:	9d05      	ldr	r5, [sp, #20]
 8005410:	47a8      	blx	r5
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d03e      	beq.n	8005494 <_printf_i+0x200>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	079b      	lsls	r3, r3, #30
 800541a:	d415      	bmi.n	8005448 <_printf_i+0x1b4>
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	68e0      	ldr	r0, [r4, #12]
 8005420:	4298      	cmp	r0, r3
 8005422:	da39      	bge.n	8005498 <_printf_i+0x204>
 8005424:	0018      	movs	r0, r3
 8005426:	e037      	b.n	8005498 <_printf_i+0x204>
 8005428:	0022      	movs	r2, r4
 800542a:	2301      	movs	r3, #1
 800542c:	3219      	adds	r2, #25
 800542e:	9904      	ldr	r1, [sp, #16]
 8005430:	9803      	ldr	r0, [sp, #12]
 8005432:	9e05      	ldr	r6, [sp, #20]
 8005434:	47b0      	blx	r6
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	d02c      	beq.n	8005494 <_printf_i+0x200>
 800543a:	3501      	adds	r5, #1
 800543c:	68e3      	ldr	r3, [r4, #12]
 800543e:	9a07      	ldr	r2, [sp, #28]
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	42ab      	cmp	r3, r5
 8005444:	dcf0      	bgt.n	8005428 <_printf_i+0x194>
 8005446:	e7e9      	b.n	800541c <_printf_i+0x188>
 8005448:	2500      	movs	r5, #0
 800544a:	e7f7      	b.n	800543c <_printf_i+0x1a8>
 800544c:	2800      	cmp	r0, #0
 800544e:	d0ad      	beq.n	80053ac <_printf_i+0x118>
 8005450:	9d02      	ldr	r5, [sp, #8]
 8005452:	0039      	movs	r1, r7
 8005454:	f7fa fef0 	bl	8000238 <__aeabi_uidivmod>
 8005458:	5c73      	ldrb	r3, [r6, r1]
 800545a:	3d01      	subs	r5, #1
 800545c:	702b      	strb	r3, [r5, #0]
 800545e:	2800      	cmp	r0, #0
 8005460:	d1f7      	bne.n	8005452 <_printf_i+0x1be>
 8005462:	2f08      	cmp	r7, #8
 8005464:	d109      	bne.n	800547a <_printf_i+0x1e6>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	07db      	lsls	r3, r3, #31
 800546a:	d506      	bpl.n	800547a <_printf_i+0x1e6>
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	6922      	ldr	r2, [r4, #16]
 8005470:	4293      	cmp	r3, r2
 8005472:	dc02      	bgt.n	800547a <_printf_i+0x1e6>
 8005474:	2330      	movs	r3, #48	; 0x30
 8005476:	3d01      	subs	r5, #1
 8005478:	702b      	strb	r3, [r5, #0]
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	1b5b      	subs	r3, r3, r5
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	9b05      	ldr	r3, [sp, #20]
 8005482:	aa07      	add	r2, sp, #28
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	0021      	movs	r1, r4
 8005488:	9b04      	ldr	r3, [sp, #16]
 800548a:	9803      	ldr	r0, [sp, #12]
 800548c:	f7ff fe94 	bl	80051b8 <_printf_common>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d1b8      	bne.n	8005406 <_printf_i+0x172>
 8005494:	2001      	movs	r0, #1
 8005496:	4240      	negs	r0, r0
 8005498:	b009      	add	sp, #36	; 0x24
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	08006205 	.word	0x08006205
 80054a0:	08006216 	.word	0x08006216

080054a4 <siscanf>:
 80054a4:	b40e      	push	{r1, r2, r3}
 80054a6:	2381      	movs	r3, #129	; 0x81
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	b09d      	sub	sp, #116	; 0x74
 80054ac:	ac02      	add	r4, sp, #8
 80054ae:	ad21      	add	r5, sp, #132	; 0x84
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	cd40      	ldmia	r5!, {r6}
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	9002      	str	r0, [sp, #8]
 80054b8:	9006      	str	r0, [sp, #24]
 80054ba:	f7fa fe2f 	bl	800011c <strlen>
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <siscanf+0x48>)
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	6263      	str	r3, [r4, #36]	; 0x24
 80054c4:	2300      	movs	r3, #0
 80054c6:	6160      	str	r0, [r4, #20]
 80054c8:	4809      	ldr	r0, [pc, #36]	; (80054f0 <siscanf+0x4c>)
 80054ca:	6363      	str	r3, [r4, #52]	; 0x34
 80054cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80054ce:	3b01      	subs	r3, #1
 80054d0:	81e3      	strh	r3, [r4, #14]
 80054d2:	0032      	movs	r2, r6
 80054d4:	002b      	movs	r3, r5
 80054d6:	0021      	movs	r1, r4
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	9501      	str	r5, [sp, #4]
 80054dc:	f000 f992 	bl	8005804 <__ssvfiscanf_r>
 80054e0:	b01d      	add	sp, #116	; 0x74
 80054e2:	bc70      	pop	{r4, r5, r6}
 80054e4:	bc08      	pop	{r3}
 80054e6:	b003      	add	sp, #12
 80054e8:	4718      	bx	r3
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	080054f5 	.word	0x080054f5
 80054f0:	20000008 	.word	0x20000008

080054f4 <__seofread>:
 80054f4:	2000      	movs	r0, #0
 80054f6:	4770      	bx	lr

080054f8 <strcpy>:
 80054f8:	0003      	movs	r3, r0
 80054fa:	780a      	ldrb	r2, [r1, #0]
 80054fc:	3101      	adds	r1, #1
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	2a00      	cmp	r2, #0
 8005504:	d1f9      	bne.n	80054fa <strcpy+0x2>
 8005506:	4770      	bx	lr

08005508 <strncmp>:
 8005508:	2300      	movs	r3, #0
 800550a:	b530      	push	{r4, r5, lr}
 800550c:	429a      	cmp	r2, r3
 800550e:	d00a      	beq.n	8005526 <strncmp+0x1e>
 8005510:	3a01      	subs	r2, #1
 8005512:	5cc4      	ldrb	r4, [r0, r3]
 8005514:	5ccd      	ldrb	r5, [r1, r3]
 8005516:	42ac      	cmp	r4, r5
 8005518:	d104      	bne.n	8005524 <strncmp+0x1c>
 800551a:	4293      	cmp	r3, r2
 800551c:	d002      	beq.n	8005524 <strncmp+0x1c>
 800551e:	3301      	adds	r3, #1
 8005520:	2c00      	cmp	r4, #0
 8005522:	d1f6      	bne.n	8005512 <strncmp+0xa>
 8005524:	1b63      	subs	r3, r4, r5
 8005526:	0018      	movs	r0, r3
 8005528:	bd30      	pop	{r4, r5, pc}

0800552a <_strtoul_l.isra.0>:
 800552a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552c:	001f      	movs	r7, r3
 800552e:	000e      	movs	r6, r1
 8005530:	b085      	sub	sp, #20
 8005532:	9003      	str	r0, [sp, #12]
 8005534:	9101      	str	r1, [sp, #4]
 8005536:	9202      	str	r2, [sp, #8]
 8005538:	980a      	ldr	r0, [sp, #40]	; 0x28
 800553a:	7834      	ldrb	r4, [r6, #0]
 800553c:	f000 f89e 	bl	800567c <__locale_ctype_ptr_l>
 8005540:	2208      	movs	r2, #8
 8005542:	1900      	adds	r0, r0, r4
 8005544:	7843      	ldrb	r3, [r0, #1]
 8005546:	1c75      	adds	r5, r6, #1
 8005548:	4013      	ands	r3, r2
 800554a:	d138      	bne.n	80055be <_strtoul_l.isra.0+0x94>
 800554c:	2c2d      	cmp	r4, #45	; 0x2d
 800554e:	d138      	bne.n	80055c2 <_strtoul_l.isra.0+0x98>
 8005550:	7874      	ldrb	r4, [r6, #1]
 8005552:	1cb5      	adds	r5, r6, #2
 8005554:	3301      	adds	r3, #1
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2f00      	cmp	r7, #0
 800555a:	d065      	beq.n	8005628 <_strtoul_l.isra.0+0xfe>
 800555c:	2f10      	cmp	r7, #16
 800555e:	d109      	bne.n	8005574 <_strtoul_l.isra.0+0x4a>
 8005560:	2c30      	cmp	r4, #48	; 0x30
 8005562:	d107      	bne.n	8005574 <_strtoul_l.isra.0+0x4a>
 8005564:	2220      	movs	r2, #32
 8005566:	782b      	ldrb	r3, [r5, #0]
 8005568:	4393      	bics	r3, r2
 800556a:	2b58      	cmp	r3, #88	; 0x58
 800556c:	d157      	bne.n	800561e <_strtoul_l.isra.0+0xf4>
 800556e:	2710      	movs	r7, #16
 8005570:	786c      	ldrb	r4, [r5, #1]
 8005572:	3502      	adds	r5, #2
 8005574:	2001      	movs	r0, #1
 8005576:	0039      	movs	r1, r7
 8005578:	4240      	negs	r0, r0
 800557a:	f7fa fdd7 	bl	800012c <__udivsi3>
 800557e:	0006      	movs	r6, r0
 8005580:	2001      	movs	r0, #1
 8005582:	0039      	movs	r1, r7
 8005584:	4240      	negs	r0, r0
 8005586:	f7fa fe57 	bl	8000238 <__aeabi_uidivmod>
 800558a:	2300      	movs	r3, #0
 800558c:	2201      	movs	r2, #1
 800558e:	468c      	mov	ip, r1
 8005590:	0018      	movs	r0, r3
 8005592:	4252      	negs	r2, r2
 8005594:	0021      	movs	r1, r4
 8005596:	3930      	subs	r1, #48	; 0x30
 8005598:	2909      	cmp	r1, #9
 800559a:	d817      	bhi.n	80055cc <_strtoul_l.isra.0+0xa2>
 800559c:	000c      	movs	r4, r1
 800559e:	42a7      	cmp	r7, r4
 80055a0:	dd22      	ble.n	80055e8 <_strtoul_l.isra.0+0xbe>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db1e      	blt.n	80055e4 <_strtoul_l.isra.0+0xba>
 80055a6:	0013      	movs	r3, r2
 80055a8:	4286      	cmp	r6, r0
 80055aa:	d305      	bcc.n	80055b8 <_strtoul_l.isra.0+0x8e>
 80055ac:	d101      	bne.n	80055b2 <_strtoul_l.isra.0+0x88>
 80055ae:	45a4      	cmp	ip, r4
 80055b0:	db02      	blt.n	80055b8 <_strtoul_l.isra.0+0x8e>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4378      	muls	r0, r7
 80055b6:	1820      	adds	r0, r4, r0
 80055b8:	782c      	ldrb	r4, [r5, #0]
 80055ba:	3501      	adds	r5, #1
 80055bc:	e7ea      	b.n	8005594 <_strtoul_l.isra.0+0x6a>
 80055be:	002e      	movs	r6, r5
 80055c0:	e7ba      	b.n	8005538 <_strtoul_l.isra.0+0xe>
 80055c2:	2c2b      	cmp	r4, #43	; 0x2b
 80055c4:	d1c7      	bne.n	8005556 <_strtoul_l.isra.0+0x2c>
 80055c6:	1cb5      	adds	r5, r6, #2
 80055c8:	7874      	ldrb	r4, [r6, #1]
 80055ca:	e7c4      	b.n	8005556 <_strtoul_l.isra.0+0x2c>
 80055cc:	0021      	movs	r1, r4
 80055ce:	3941      	subs	r1, #65	; 0x41
 80055d0:	2919      	cmp	r1, #25
 80055d2:	d801      	bhi.n	80055d8 <_strtoul_l.isra.0+0xae>
 80055d4:	3c37      	subs	r4, #55	; 0x37
 80055d6:	e7e2      	b.n	800559e <_strtoul_l.isra.0+0x74>
 80055d8:	0021      	movs	r1, r4
 80055da:	3961      	subs	r1, #97	; 0x61
 80055dc:	2919      	cmp	r1, #25
 80055de:	d803      	bhi.n	80055e8 <_strtoul_l.isra.0+0xbe>
 80055e0:	3c57      	subs	r4, #87	; 0x57
 80055e2:	e7dc      	b.n	800559e <_strtoul_l.isra.0+0x74>
 80055e4:	0013      	movs	r3, r2
 80055e6:	e7e7      	b.n	80055b8 <_strtoul_l.isra.0+0x8e>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	da09      	bge.n	8005600 <_strtoul_l.isra.0+0xd6>
 80055ec:	2322      	movs	r3, #34	; 0x22
 80055ee:	2001      	movs	r0, #1
 80055f0:	9a03      	ldr	r2, [sp, #12]
 80055f2:	4240      	negs	r0, r0
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	9b02      	ldr	r3, [sp, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <_strtoul_l.isra.0+0xe8>
 80055fc:	b005      	add	sp, #20
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	9a00      	ldr	r2, [sp, #0]
 8005602:	2a00      	cmp	r2, #0
 8005604:	d000      	beq.n	8005608 <_strtoul_l.isra.0+0xde>
 8005606:	4240      	negs	r0, r0
 8005608:	9a02      	ldr	r2, [sp, #8]
 800560a:	2a00      	cmp	r2, #0
 800560c:	d0f6      	beq.n	80055fc <_strtoul_l.isra.0+0xd2>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <_strtoul_l.isra.0+0xec>
 8005612:	1e6b      	subs	r3, r5, #1
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	9b02      	ldr	r3, [sp, #8]
 8005618:	9a01      	ldr	r2, [sp, #4]
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e7ee      	b.n	80055fc <_strtoul_l.isra.0+0xd2>
 800561e:	2430      	movs	r4, #48	; 0x30
 8005620:	2f00      	cmp	r7, #0
 8005622:	d1a7      	bne.n	8005574 <_strtoul_l.isra.0+0x4a>
 8005624:	2708      	movs	r7, #8
 8005626:	e7a5      	b.n	8005574 <_strtoul_l.isra.0+0x4a>
 8005628:	2c30      	cmp	r4, #48	; 0x30
 800562a:	d09b      	beq.n	8005564 <_strtoul_l.isra.0+0x3a>
 800562c:	270a      	movs	r7, #10
 800562e:	e7a1      	b.n	8005574 <_strtoul_l.isra.0+0x4a>

08005630 <_strtoul_r>:
 8005630:	b513      	push	{r0, r1, r4, lr}
 8005632:	4c05      	ldr	r4, [pc, #20]	; (8005648 <_strtoul_r+0x18>)
 8005634:	6824      	ldr	r4, [r4, #0]
 8005636:	6a24      	ldr	r4, [r4, #32]
 8005638:	2c00      	cmp	r4, #0
 800563a:	d100      	bne.n	800563e <_strtoul_r+0xe>
 800563c:	4c03      	ldr	r4, [pc, #12]	; (800564c <_strtoul_r+0x1c>)
 800563e:	9400      	str	r4, [sp, #0]
 8005640:	f7ff ff73 	bl	800552a <_strtoul_l.isra.0>
 8005644:	bd16      	pop	{r1, r2, r4, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	20000008 	.word	0x20000008
 800564c:	200000d0 	.word	0x200000d0

08005650 <strtoul>:
 8005650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005652:	0013      	movs	r3, r2
 8005654:	4a06      	ldr	r2, [pc, #24]	; (8005670 <strtoul+0x20>)
 8005656:	0005      	movs	r5, r0
 8005658:	6810      	ldr	r0, [r2, #0]
 800565a:	6a04      	ldr	r4, [r0, #32]
 800565c:	2c00      	cmp	r4, #0
 800565e:	d100      	bne.n	8005662 <strtoul+0x12>
 8005660:	4c04      	ldr	r4, [pc, #16]	; (8005674 <strtoul+0x24>)
 8005662:	000a      	movs	r2, r1
 8005664:	9400      	str	r4, [sp, #0]
 8005666:	0029      	movs	r1, r5
 8005668:	f7ff ff5f 	bl	800552a <_strtoul_l.isra.0>
 800566c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	20000008 	.word	0x20000008
 8005674:	200000d0 	.word	0x200000d0

08005678 <__env_lock>:
 8005678:	4770      	bx	lr

0800567a <__env_unlock>:
 800567a:	4770      	bx	lr

0800567c <__locale_ctype_ptr_l>:
 800567c:	30ec      	adds	r0, #236	; 0xec
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	4770      	bx	lr
	...

08005684 <__locale_ctype_ptr>:
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <__locale_ctype_ptr+0x14>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d100      	bne.n	8005690 <__locale_ctype_ptr+0xc>
 800568e:	4b03      	ldr	r3, [pc, #12]	; (800569c <__locale_ctype_ptr+0x18>)
 8005690:	33ec      	adds	r3, #236	; 0xec
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	4770      	bx	lr
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	20000008 	.word	0x20000008
 800569c:	200000d0 	.word	0x200000d0

080056a0 <__ascii_mbtowc>:
 80056a0:	b082      	sub	sp, #8
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d100      	bne.n	80056a8 <__ascii_mbtowc+0x8>
 80056a6:	a901      	add	r1, sp, #4
 80056a8:	1e10      	subs	r0, r2, #0
 80056aa:	d006      	beq.n	80056ba <__ascii_mbtowc+0x1a>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <__ascii_mbtowc+0x1e>
 80056b0:	7813      	ldrb	r3, [r2, #0]
 80056b2:	600b      	str	r3, [r1, #0]
 80056b4:	7810      	ldrb	r0, [r2, #0]
 80056b6:	1e43      	subs	r3, r0, #1
 80056b8:	4198      	sbcs	r0, r3
 80056ba:	b002      	add	sp, #8
 80056bc:	4770      	bx	lr
 80056be:	2002      	movs	r0, #2
 80056c0:	4240      	negs	r0, r0
 80056c2:	e7fa      	b.n	80056ba <__ascii_mbtowc+0x1a>

080056c4 <memchr>:
 80056c4:	b2c9      	uxtb	r1, r1
 80056c6:	1882      	adds	r2, r0, r2
 80056c8:	4290      	cmp	r0, r2
 80056ca:	d101      	bne.n	80056d0 <memchr+0xc>
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr
 80056d0:	7803      	ldrb	r3, [r0, #0]
 80056d2:	428b      	cmp	r3, r1
 80056d4:	d0fb      	beq.n	80056ce <memchr+0xa>
 80056d6:	3001      	adds	r0, #1
 80056d8:	e7f6      	b.n	80056c8 <memchr+0x4>

080056da <memmove>:
 80056da:	b510      	push	{r4, lr}
 80056dc:	4288      	cmp	r0, r1
 80056de:	d902      	bls.n	80056e6 <memmove+0xc>
 80056e0:	188b      	adds	r3, r1, r2
 80056e2:	4298      	cmp	r0, r3
 80056e4:	d303      	bcc.n	80056ee <memmove+0x14>
 80056e6:	2300      	movs	r3, #0
 80056e8:	e007      	b.n	80056fa <memmove+0x20>
 80056ea:	5c8b      	ldrb	r3, [r1, r2]
 80056ec:	5483      	strb	r3, [r0, r2]
 80056ee:	3a01      	subs	r2, #1
 80056f0:	d2fb      	bcs.n	80056ea <memmove+0x10>
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	5ccc      	ldrb	r4, [r1, r3]
 80056f6:	54c4      	strb	r4, [r0, r3]
 80056f8:	3301      	adds	r3, #1
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d1fa      	bne.n	80056f4 <memmove+0x1a>
 80056fe:	e7f8      	b.n	80056f2 <memmove+0x18>

08005700 <_realloc_r>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	0007      	movs	r7, r0
 8005704:	000d      	movs	r5, r1
 8005706:	0016      	movs	r6, r2
 8005708:	2900      	cmp	r1, #0
 800570a:	d105      	bne.n	8005718 <_realloc_r+0x18>
 800570c:	0011      	movs	r1, r2
 800570e:	f7fe fff1 	bl	80046f4 <_malloc_r>
 8005712:	0004      	movs	r4, r0
 8005714:	0020      	movs	r0, r4
 8005716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005718:	2a00      	cmp	r2, #0
 800571a:	d103      	bne.n	8005724 <_realloc_r+0x24>
 800571c:	f7fe ffa0 	bl	8004660 <_free_r>
 8005720:	0034      	movs	r4, r6
 8005722:	e7f7      	b.n	8005714 <_realloc_r+0x14>
 8005724:	f000 fc50 	bl	8005fc8 <_malloc_usable_size_r>
 8005728:	002c      	movs	r4, r5
 800572a:	42b0      	cmp	r0, r6
 800572c:	d2f2      	bcs.n	8005714 <_realloc_r+0x14>
 800572e:	0031      	movs	r1, r6
 8005730:	0038      	movs	r0, r7
 8005732:	f7fe ffdf 	bl	80046f4 <_malloc_r>
 8005736:	1e04      	subs	r4, r0, #0
 8005738:	d0ec      	beq.n	8005714 <_realloc_r+0x14>
 800573a:	0029      	movs	r1, r5
 800573c:	0032      	movs	r2, r6
 800573e:	f7fe fcf7 	bl	8004130 <memcpy>
 8005742:	0029      	movs	r1, r5
 8005744:	0038      	movs	r0, r7
 8005746:	f7fe ff8b 	bl	8004660 <_free_r>
 800574a:	e7e3      	b.n	8005714 <_realloc_r+0x14>

0800574c <_sungetc_r>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	0014      	movs	r4, r2
 8005750:	1c4b      	adds	r3, r1, #1
 8005752:	d103      	bne.n	800575c <_sungetc_r+0x10>
 8005754:	2501      	movs	r5, #1
 8005756:	426d      	negs	r5, r5
 8005758:	0028      	movs	r0, r5
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	8993      	ldrh	r3, [r2, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	4393      	bics	r3, r2
 8005762:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	b2ce      	uxtb	r6, r1
 8005768:	b2cd      	uxtb	r5, r1
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	2a00      	cmp	r2, #0
 800576e:	d010      	beq.n	8005792 <_sungetc_r+0x46>
 8005770:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005772:	429a      	cmp	r2, r3
 8005774:	dd07      	ble.n	8005786 <_sungetc_r+0x3a>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	701e      	strb	r6, [r3, #0]
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	3301      	adds	r3, #1
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	e7e8      	b.n	8005758 <_sungetc_r+0xc>
 8005786:	0021      	movs	r1, r4
 8005788:	f000 fbd4 	bl	8005f34 <__submore>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0f2      	beq.n	8005776 <_sungetc_r+0x2a>
 8005790:	e7e0      	b.n	8005754 <_sungetc_r+0x8>
 8005792:	6921      	ldr	r1, [r4, #16]
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	2900      	cmp	r1, #0
 8005798:	d007      	beq.n	80057aa <_sungetc_r+0x5e>
 800579a:	4291      	cmp	r1, r2
 800579c:	d205      	bcs.n	80057aa <_sungetc_r+0x5e>
 800579e:	1e51      	subs	r1, r2, #1
 80057a0:	7808      	ldrb	r0, [r1, #0]
 80057a2:	42a8      	cmp	r0, r5
 80057a4:	d101      	bne.n	80057aa <_sungetc_r+0x5e>
 80057a6:	6021      	str	r1, [r4, #0]
 80057a8:	e7ea      	b.n	8005780 <_sungetc_r+0x34>
 80057aa:	6423      	str	r3, [r4, #64]	; 0x40
 80057ac:	0023      	movs	r3, r4
 80057ae:	3344      	adds	r3, #68	; 0x44
 80057b0:	6363      	str	r3, [r4, #52]	; 0x34
 80057b2:	2303      	movs	r3, #3
 80057b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80057b6:	0023      	movs	r3, r4
 80057b8:	3346      	adds	r3, #70	; 0x46
 80057ba:	63e2      	str	r2, [r4, #60]	; 0x3c
 80057bc:	701e      	strb	r6, [r3, #0]
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	2301      	movs	r3, #1
 80057c2:	e7de      	b.n	8005782 <_sungetc_r+0x36>

080057c4 <__ssrefill_r>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	000c      	movs	r4, r1
 80057c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d00e      	beq.n	80057ec <__ssrefill_r+0x28>
 80057ce:	0023      	movs	r3, r4
 80057d0:	3344      	adds	r3, #68	; 0x44
 80057d2:	4299      	cmp	r1, r3
 80057d4:	d001      	beq.n	80057da <__ssrefill_r+0x16>
 80057d6:	f7fe ff43 	bl	8004660 <_free_r>
 80057da:	2000      	movs	r0, #0
 80057dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057de:	6360      	str	r0, [r4, #52]	; 0x34
 80057e0:	6063      	str	r3, [r4, #4]
 80057e2:	4283      	cmp	r3, r0
 80057e4:	d002      	beq.n	80057ec <__ssrefill_r+0x28>
 80057e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd10      	pop	{r4, pc}
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	2001      	movs	r0, #1
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	89a2      	ldrh	r2, [r4, #12]
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	3320      	adds	r3, #32
 80057fa:	4313      	orrs	r3, r2
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	4240      	negs	r0, r0
 8005800:	e7f3      	b.n	80057ea <__ssrefill_r+0x26>
	...

08005804 <__ssvfiscanf_r>:
 8005804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005806:	0017      	movs	r7, r2
 8005808:	2200      	movs	r2, #0
 800580a:	4cb0      	ldr	r4, [pc, #704]	; (8005acc <__ssvfiscanf_r+0x2c8>)
 800580c:	25c0      	movs	r5, #192	; 0xc0
 800580e:	44a5      	add	sp, r4
 8005810:	9248      	str	r2, [sp, #288]	; 0x120
 8005812:	9249      	str	r2, [sp, #292]	; 0x124
 8005814:	aa05      	add	r2, sp, #20
 8005816:	924a      	str	r2, [sp, #296]	; 0x128
 8005818:	22be      	movs	r2, #190	; 0xbe
 800581a:	000c      	movs	r4, r1
 800581c:	49ac      	ldr	r1, [pc, #688]	; (8005ad0 <__ssvfiscanf_r+0x2cc>)
 800581e:	9000      	str	r0, [sp, #0]
 8005820:	0052      	lsls	r2, r2, #1
 8005822:	a845      	add	r0, sp, #276	; 0x114
 8005824:	5081      	str	r1, [r0, r2]
 8005826:	49ab      	ldr	r1, [pc, #684]	; (8005ad4 <__ssvfiscanf_r+0x2d0>)
 8005828:	006d      	lsls	r5, r5, #1
 800582a:	5141      	str	r1, [r0, r5]
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	783b      	ldrb	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <__ssvfiscanf_r+0x32>
 8005834:	e148      	b.n	8005ac8 <__ssvfiscanf_r+0x2c4>
 8005836:	f7ff ff25 	bl	8005684 <__locale_ctype_ptr>
 800583a:	2208      	movs	r2, #8
 800583c:	783b      	ldrb	r3, [r7, #0]
 800583e:	1c7e      	adds	r6, r7, #1
 8005840:	18c0      	adds	r0, r0, r3
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	7843      	ldrb	r3, [r0, #1]
 8005846:	4013      	ands	r3, r2
 8005848:	d020      	beq.n	800588c <__ssvfiscanf_r+0x88>
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd14      	ble.n	800587a <__ssvfiscanf_r+0x76>
 8005850:	f7ff ff18 	bl	8005684 <__locale_ctype_ptr>
 8005854:	2108      	movs	r1, #8
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	1880      	adds	r0, r0, r2
 800585c:	7842      	ldrb	r2, [r0, #1]
 800585e:	420a      	tst	r2, r1
 8005860:	d101      	bne.n	8005866 <__ssvfiscanf_r+0x62>
 8005862:	0037      	movs	r7, r6
 8005864:	e7e3      	b.n	800582e <__ssvfiscanf_r+0x2a>
 8005866:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8005868:	3301      	adds	r3, #1
 800586a:	9201      	str	r2, [sp, #4]
 800586c:	3201      	adds	r2, #1
 800586e:	9249      	str	r2, [sp, #292]	; 0x124
 8005870:	6862      	ldr	r2, [r4, #4]
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	3a01      	subs	r2, #1
 8005876:	6062      	str	r2, [r4, #4]
 8005878:	e7e7      	b.n	800584a <__ssvfiscanf_r+0x46>
 800587a:	ab45      	add	r3, sp, #276	; 0x114
 800587c:	595b      	ldr	r3, [r3, r5]
 800587e:	0021      	movs	r1, r4
 8005880:	9800      	ldr	r0, [sp, #0]
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	4798      	blx	r3
 8005886:	2800      	cmp	r0, #0
 8005888:	d0e2      	beq.n	8005850 <__ssvfiscanf_r+0x4c>
 800588a:	e7ea      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 800588c:	9a01      	ldr	r2, [sp, #4]
 800588e:	2a25      	cmp	r2, #37	; 0x25
 8005890:	d16d      	bne.n	800596e <__ssvfiscanf_r+0x16a>
 8005892:	9347      	str	r3, [sp, #284]	; 0x11c
 8005894:	9345      	str	r3, [sp, #276]	; 0x114
 8005896:	787b      	ldrb	r3, [r7, #1]
 8005898:	2b2a      	cmp	r3, #42	; 0x2a
 800589a:	d102      	bne.n	80058a2 <__ssvfiscanf_r+0x9e>
 800589c:	3b1a      	subs	r3, #26
 800589e:	9345      	str	r3, [sp, #276]	; 0x114
 80058a0:	1cbe      	adds	r6, r7, #2
 80058a2:	0037      	movs	r7, r6
 80058a4:	220a      	movs	r2, #10
 80058a6:	7839      	ldrb	r1, [r7, #0]
 80058a8:	1c7b      	adds	r3, r7, #1
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	000b      	movs	r3, r1
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d924      	bls.n	80058fe <__ssvfiscanf_r+0xfa>
 80058b4:	4e88      	ldr	r6, [pc, #544]	; (8005ad8 <__ssvfiscanf_r+0x2d4>)
 80058b6:	2203      	movs	r2, #3
 80058b8:	0030      	movs	r0, r6
 80058ba:	f7ff ff03 	bl	80056c4 <memchr>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d007      	beq.n	80058d2 <__ssvfiscanf_r+0xce>
 80058c2:	2301      	movs	r3, #1
 80058c4:	1b80      	subs	r0, r0, r6
 80058c6:	4083      	lsls	r3, r0
 80058c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80058ca:	9f02      	ldr	r7, [sp, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	9203      	str	r2, [sp, #12]
 80058d0:	9345      	str	r3, [sp, #276]	; 0x114
 80058d2:	783b      	ldrb	r3, [r7, #0]
 80058d4:	1c7e      	adds	r6, r7, #1
 80058d6:	2b67      	cmp	r3, #103	; 0x67
 80058d8:	d835      	bhi.n	8005946 <__ssvfiscanf_r+0x142>
 80058da:	2b65      	cmp	r3, #101	; 0x65
 80058dc:	d300      	bcc.n	80058e0 <__ssvfiscanf_r+0xdc>
 80058de:	e0b8      	b.n	8005a52 <__ssvfiscanf_r+0x24e>
 80058e0:	2b47      	cmp	r3, #71	; 0x47
 80058e2:	d814      	bhi.n	800590e <__ssvfiscanf_r+0x10a>
 80058e4:	2b45      	cmp	r3, #69	; 0x45
 80058e6:	d300      	bcc.n	80058ea <__ssvfiscanf_r+0xe6>
 80058e8:	e0b3      	b.n	8005a52 <__ssvfiscanf_r+0x24e>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d100      	bne.n	80058f0 <__ssvfiscanf_r+0xec>
 80058ee:	e0e8      	b.n	8005ac2 <__ssvfiscanf_r+0x2be>
 80058f0:	2b25      	cmp	r3, #37	; 0x25
 80058f2:	d03c      	beq.n	800596e <__ssvfiscanf_r+0x16a>
 80058f4:	2303      	movs	r3, #3
 80058f6:	934b      	str	r3, [sp, #300]	; 0x12c
 80058f8:	3307      	adds	r3, #7
 80058fa:	9346      	str	r3, [sp, #280]	; 0x118
 80058fc:	e066      	b.n	80059cc <__ssvfiscanf_r+0x1c8>
 80058fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005900:	9f02      	ldr	r7, [sp, #8]
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	4353      	muls	r3, r2
 8005906:	3b30      	subs	r3, #48	; 0x30
 8005908:	1859      	adds	r1, r3, r1
 800590a:	9147      	str	r1, [sp, #284]	; 0x11c
 800590c:	e7cb      	b.n	80058a6 <__ssvfiscanf_r+0xa2>
 800590e:	2b5b      	cmp	r3, #91	; 0x5b
 8005910:	d100      	bne.n	8005914 <__ssvfiscanf_r+0x110>
 8005912:	e07a      	b.n	8005a0a <__ssvfiscanf_r+0x206>
 8005914:	d810      	bhi.n	8005938 <__ssvfiscanf_r+0x134>
 8005916:	2b58      	cmp	r3, #88	; 0x58
 8005918:	d1ec      	bne.n	80058f4 <__ssvfiscanf_r+0xf0>
 800591a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	9901      	ldr	r1, [sp, #4]
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	430a      	orrs	r2, r1
 8005926:	9245      	str	r2, [sp, #276]	; 0x114
 8005928:	2210      	movs	r2, #16
 800592a:	9246      	str	r2, [sp, #280]	; 0x118
 800592c:	226e      	movs	r2, #110	; 0x6e
 800592e:	429a      	cmp	r2, r3
 8005930:	419b      	sbcs	r3, r3
 8005932:	425b      	negs	r3, r3
 8005934:	3303      	adds	r3, #3
 8005936:	e048      	b.n	80059ca <__ssvfiscanf_r+0x1c6>
 8005938:	2b63      	cmp	r3, #99	; 0x63
 800593a:	d100      	bne.n	800593e <__ssvfiscanf_r+0x13a>
 800593c:	e072      	b.n	8005a24 <__ssvfiscanf_r+0x220>
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d1d8      	bne.n	80058f4 <__ssvfiscanf_r+0xf0>
 8005942:	220a      	movs	r2, #10
 8005944:	e7f1      	b.n	800592a <__ssvfiscanf_r+0x126>
 8005946:	2b70      	cmp	r3, #112	; 0x70
 8005948:	d035      	beq.n	80059b6 <__ssvfiscanf_r+0x1b2>
 800594a:	d808      	bhi.n	800595e <__ssvfiscanf_r+0x15a>
 800594c:	2b6e      	cmp	r3, #110	; 0x6e
 800594e:	d100      	bne.n	8005952 <__ssvfiscanf_r+0x14e>
 8005950:	e070      	b.n	8005a34 <__ssvfiscanf_r+0x230>
 8005952:	d837      	bhi.n	80059c4 <__ssvfiscanf_r+0x1c0>
 8005954:	2b69      	cmp	r3, #105	; 0x69
 8005956:	d1cd      	bne.n	80058f4 <__ssvfiscanf_r+0xf0>
 8005958:	2300      	movs	r3, #0
 800595a:	9346      	str	r3, [sp, #280]	; 0x118
 800595c:	e7ea      	b.n	8005934 <__ssvfiscanf_r+0x130>
 800595e:	2b75      	cmp	r3, #117	; 0x75
 8005960:	d0ef      	beq.n	8005942 <__ssvfiscanf_r+0x13e>
 8005962:	2b78      	cmp	r3, #120	; 0x78
 8005964:	d0d9      	beq.n	800591a <__ssvfiscanf_r+0x116>
 8005966:	2b73      	cmp	r3, #115	; 0x73
 8005968:	d1c4      	bne.n	80058f4 <__ssvfiscanf_r+0xf0>
 800596a:	2302      	movs	r3, #2
 800596c:	e02d      	b.n	80059ca <__ssvfiscanf_r+0x1c6>
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	dd0f      	ble.n	8005994 <__ssvfiscanf_r+0x190>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	9901      	ldr	r1, [sp, #4]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	428a      	cmp	r2, r1
 800597c:	d000      	beq.n	8005980 <__ssvfiscanf_r+0x17c>
 800597e:	e0a3      	b.n	8005ac8 <__ssvfiscanf_r+0x2c4>
 8005980:	3301      	adds	r3, #1
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005988:	3a01      	subs	r2, #1
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	3301      	adds	r3, #1
 800598e:	6062      	str	r2, [r4, #4]
 8005990:	9349      	str	r3, [sp, #292]	; 0x124
 8005992:	e766      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005994:	ab45      	add	r3, sp, #276	; 0x114
 8005996:	595b      	ldr	r3, [r3, r5]
 8005998:	0021      	movs	r1, r4
 800599a:	9800      	ldr	r0, [sp, #0]
 800599c:	9302      	str	r3, [sp, #8]
 800599e:	4798      	blx	r3
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0e7      	beq.n	8005974 <__ssvfiscanf_r+0x170>
 80059a4:	9848      	ldr	r0, [sp, #288]	; 0x120
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d000      	beq.n	80059ac <__ssvfiscanf_r+0x1a8>
 80059aa:	e086      	b.n	8005aba <__ssvfiscanf_r+0x2b6>
 80059ac:	3801      	subs	r0, #1
 80059ae:	23a7      	movs	r3, #167	; 0xa7
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	449d      	add	sp, r3
 80059b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80059b8:	9201      	str	r2, [sp, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	9901      	ldr	r1, [sp, #4]
 80059be:	430a      	orrs	r2, r1
 80059c0:	9245      	str	r2, [sp, #276]	; 0x114
 80059c2:	e7aa      	b.n	800591a <__ssvfiscanf_r+0x116>
 80059c4:	2308      	movs	r3, #8
 80059c6:	9346      	str	r3, [sp, #280]	; 0x118
 80059c8:	3b04      	subs	r3, #4
 80059ca:	934b      	str	r3, [sp, #300]	; 0x12c
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dd41      	ble.n	8005a56 <__ssvfiscanf_r+0x252>
 80059d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	065b      	lsls	r3, r3, #25
 80059d8:	d408      	bmi.n	80059ec <__ssvfiscanf_r+0x1e8>
 80059da:	f7ff fe53 	bl	8005684 <__locale_ctype_ptr>
 80059de:	2108      	movs	r1, #8
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	1880      	adds	r0, r0, r2
 80059e6:	7842      	ldrb	r2, [r0, #1]
 80059e8:	420a      	tst	r2, r1
 80059ea:	d13d      	bne.n	8005a68 <__ssvfiscanf_r+0x264>
 80059ec:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	dc4f      	bgt.n	8005a92 <__ssvfiscanf_r+0x28e>
 80059f2:	ab04      	add	r3, sp, #16
 80059f4:	0022      	movs	r2, r4
 80059f6:	a945      	add	r1, sp, #276	; 0x114
 80059f8:	9800      	ldr	r0, [sp, #0]
 80059fa:	f000 f871 	bl	8005ae0 <_scanf_chars>
 80059fe:	2801      	cmp	r0, #1
 8005a00:	d062      	beq.n	8005ac8 <__ssvfiscanf_r+0x2c4>
 8005a02:	2802      	cmp	r0, #2
 8005a04:	d000      	beq.n	8005a08 <__ssvfiscanf_r+0x204>
 8005a06:	e72c      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005a08:	e7cc      	b.n	80059a4 <__ssvfiscanf_r+0x1a0>
 8005a0a:	0031      	movs	r1, r6
 8005a0c:	a805      	add	r0, sp, #20
 8005a0e:	f000 f9cf 	bl	8005db0 <__sccl>
 8005a12:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a14:	0006      	movs	r6, r0
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	9a01      	ldr	r2, [sp, #4]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	9345      	str	r3, [sp, #276]	; 0x114
 8005a20:	2301      	movs	r3, #1
 8005a22:	e7d2      	b.n	80059ca <__ssvfiscanf_r+0x1c6>
 8005a24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	9a01      	ldr	r2, [sp, #4]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	9345      	str	r3, [sp, #276]	; 0x114
 8005a30:	2300      	movs	r3, #0
 8005a32:	e7ca      	b.n	80059ca <__ssvfiscanf_r+0x1c6>
 8005a34:	9845      	ldr	r0, [sp, #276]	; 0x114
 8005a36:	06c3      	lsls	r3, r0, #27
 8005a38:	d500      	bpl.n	8005a3c <__ssvfiscanf_r+0x238>
 8005a3a:	e712      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8005a40:	1d19      	adds	r1, r3, #4
 8005a42:	9104      	str	r1, [sp, #16]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	07c7      	lsls	r7, r0, #31
 8005a48:	d501      	bpl.n	8005a4e <__ssvfiscanf_r+0x24a>
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e709      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e707      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005a52:	2305      	movs	r3, #5
 8005a54:	e7b9      	b.n	80059ca <__ssvfiscanf_r+0x1c6>
 8005a56:	ab45      	add	r3, sp, #276	; 0x114
 8005a58:	595b      	ldr	r3, [r3, r5]
 8005a5a:	0021      	movs	r1, r4
 8005a5c:	9800      	ldr	r0, [sp, #0]
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	4798      	blx	r3
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d0b5      	beq.n	80059d2 <__ssvfiscanf_r+0x1ce>
 8005a66:	e79d      	b.n	80059a4 <__ssvfiscanf_r+0x1a0>
 8005a68:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8005a6a:	9201      	str	r2, [sp, #4]
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	9249      	str	r2, [sp, #292]	; 0x124
 8005a70:	6862      	ldr	r2, [r4, #4]
 8005a72:	3a01      	subs	r2, #1
 8005a74:	6062      	str	r2, [r4, #4]
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	dd02      	ble.n	8005a80 <__ssvfiscanf_r+0x27c>
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	e7ac      	b.n	80059da <__ssvfiscanf_r+0x1d6>
 8005a80:	ab45      	add	r3, sp, #276	; 0x114
 8005a82:	595b      	ldr	r3, [r3, r5]
 8005a84:	0021      	movs	r1, r4
 8005a86:	9800      	ldr	r0, [sp, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	4798      	blx	r3
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0a4      	beq.n	80059da <__ssvfiscanf_r+0x1d6>
 8005a90:	e788      	b.n	80059a4 <__ssvfiscanf_r+0x1a0>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	dc06      	bgt.n	8005aa4 <__ssvfiscanf_r+0x2a0>
 8005a96:	ab04      	add	r3, sp, #16
 8005a98:	0022      	movs	r2, r4
 8005a9a:	a945      	add	r1, sp, #276	; 0x114
 8005a9c:	9800      	ldr	r0, [sp, #0]
 8005a9e:	f000 f885 	bl	8005bac <_scanf_i>
 8005aa2:	e7ac      	b.n	80059fe <__ssvfiscanf_r+0x1fa>
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <__ssvfiscanf_r+0x2d8>)
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d100      	bne.n	8005aac <__ssvfiscanf_r+0x2a8>
 8005aaa:	e6da      	b.n	8005862 <__ssvfiscanf_r+0x5e>
 8005aac:	ab04      	add	r3, sp, #16
 8005aae:	0022      	movs	r2, r4
 8005ab0:	a945      	add	r1, sp, #276	; 0x114
 8005ab2:	9800      	ldr	r0, [sp, #0]
 8005ab4:	e000      	b.n	8005ab8 <__ssvfiscanf_r+0x2b4>
 8005ab6:	bf00      	nop
 8005ab8:	e7a1      	b.n	80059fe <__ssvfiscanf_r+0x1fa>
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	065b      	lsls	r3, r3, #25
 8005abe:	d400      	bmi.n	8005ac2 <__ssvfiscanf_r+0x2be>
 8005ac0:	e775      	b.n	80059ae <__ssvfiscanf_r+0x1aa>
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	4240      	negs	r0, r0
 8005ac6:	e772      	b.n	80059ae <__ssvfiscanf_r+0x1aa>
 8005ac8:	9848      	ldr	r0, [sp, #288]	; 0x120
 8005aca:	e770      	b.n	80059ae <__ssvfiscanf_r+0x1aa>
 8005acc:	fffffd64 	.word	0xfffffd64
 8005ad0:	0800574d 	.word	0x0800574d
 8005ad4:	080057c5 	.word	0x080057c5
 8005ad8:	080061fa 	.word	0x080061fa
 8005adc:	00000000 	.word	0x00000000

08005ae0 <_scanf_chars>:
 8005ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae2:	0015      	movs	r5, r2
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	9001      	str	r0, [sp, #4]
 8005ae8:	000c      	movs	r4, r1
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	d104      	bne.n	8005af8 <_scanf_chars+0x18>
 8005aee:	698a      	ldr	r2, [r1, #24]
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	d117      	bne.n	8005b24 <_scanf_chars+0x44>
 8005af4:	3201      	adds	r2, #1
 8005af6:	60a2      	str	r2, [r4, #8]
 8005af8:	6822      	ldr	r2, [r4, #0]
 8005afa:	06d2      	lsls	r2, r2, #27
 8005afc:	d403      	bmi.n	8005b06 <_scanf_chars+0x26>
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	1d11      	adds	r1, r2, #4
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	6817      	ldr	r7, [r2, #0]
 8005b06:	2600      	movs	r6, #0
 8005b08:	69a3      	ldr	r3, [r4, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01f      	beq.n	8005b4e <_scanf_chars+0x6e>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10b      	bne.n	8005b2a <_scanf_chars+0x4a>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	6962      	ldr	r2, [r4, #20]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	5cd3      	ldrb	r3, [r2, r3]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d117      	bne.n	8005b4e <_scanf_chars+0x6e>
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	d133      	bne.n	8005b8a <_scanf_chars+0xaa>
 8005b22:	e009      	b.n	8005b38 <_scanf_chars+0x58>
 8005b24:	2201      	movs	r2, #1
 8005b26:	4252      	negs	r2, r2
 8005b28:	e7e5      	b.n	8005af6 <_scanf_chars+0x16>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d006      	beq.n	8005b3c <_scanf_chars+0x5c>
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d12b      	bne.n	8005b8a <_scanf_chars+0xaa>
 8005b32:	69a3      	ldr	r3, [r4, #24]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d128      	bne.n	8005b8a <_scanf_chars+0xaa>
 8005b38:	2001      	movs	r0, #1
 8005b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b3c:	f7ff fda2 	bl	8005684 <__locale_ctype_ptr>
 8005b40:	2208      	movs	r2, #8
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	18c0      	adds	r0, r0, r3
 8005b48:	7843      	ldrb	r3, [r0, #1]
 8005b4a:	4213      	tst	r3, r2
 8005b4c:	d1ef      	bne.n	8005b2e <_scanf_chars+0x4e>
 8005b4e:	2210      	movs	r2, #16
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	3601      	adds	r6, #1
 8005b54:	4213      	tst	r3, r2
 8005b56:	d103      	bne.n	8005b60 <_scanf_chars+0x80>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	703b      	strb	r3, [r7, #0]
 8005b5e:	3701      	adds	r7, #1
 8005b60:	682a      	ldr	r2, [r5, #0]
 8005b62:	686b      	ldr	r3, [r5, #4]
 8005b64:	3201      	adds	r2, #1
 8005b66:	602a      	str	r2, [r5, #0]
 8005b68:	68a2      	ldr	r2, [r4, #8]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	606b      	str	r3, [r5, #4]
 8005b70:	60a2      	str	r2, [r4, #8]
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	d009      	beq.n	8005b8a <_scanf_chars+0xaa>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dcc6      	bgt.n	8005b08 <_scanf_chars+0x28>
 8005b7a:	23c0      	movs	r3, #192	; 0xc0
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	58e3      	ldr	r3, [r4, r3]
 8005b80:	0029      	movs	r1, r5
 8005b82:	9801      	ldr	r0, [sp, #4]
 8005b84:	4798      	blx	r3
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d0be      	beq.n	8005b08 <_scanf_chars+0x28>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d106      	bne.n	8005ba0 <_scanf_chars+0xc0>
 8005b92:	68e2      	ldr	r2, [r4, #12]
 8005b94:	3201      	adds	r2, #1
 8005b96:	60e2      	str	r2, [r4, #12]
 8005b98:	69a2      	ldr	r2, [r4, #24]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d000      	beq.n	8005ba0 <_scanf_chars+0xc0>
 8005b9e:	703b      	strb	r3, [r7, #0]
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	199e      	adds	r6, r3, r6
 8005ba6:	6126      	str	r6, [r4, #16]
 8005ba8:	e7c7      	b.n	8005b3a <_scanf_chars+0x5a>
	...

08005bac <_scanf_i>:
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	000c      	movs	r4, r1
 8005bb0:	b08b      	sub	sp, #44	; 0x2c
 8005bb2:	9302      	str	r3, [sp, #8]
 8005bb4:	4b78      	ldr	r3, [pc, #480]	; (8005d98 <_scanf_i+0x1ec>)
 8005bb6:	9004      	str	r0, [sp, #16]
 8005bb8:	0016      	movs	r6, r2
 8005bba:	aa07      	add	r2, sp, #28
 8005bbc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005bbe:	c223      	stmia	r2!, {r0, r1, r5}
 8005bc0:	4b76      	ldr	r3, [pc, #472]	; (8005d9c <_scanf_i+0x1f0>)
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	69a3      	ldr	r3, [r4, #24]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d101      	bne.n	8005bce <_scanf_i+0x22>
 8005bca:	4b75      	ldr	r3, [pc, #468]	; (8005da0 <_scanf_i+0x1f4>)
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	22ae      	movs	r2, #174	; 0xae
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	68a3      	ldr	r3, [r4, #8]
 8005bd4:	0052      	lsls	r2, r2, #1
 8005bd6:	1e59      	subs	r1, r3, #1
 8005bd8:	9003      	str	r0, [sp, #12]
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d905      	bls.n	8005bea <_scanf_i+0x3e>
 8005bde:	3b5e      	subs	r3, #94	; 0x5e
 8005be0:	3bff      	subs	r3, #255	; 0xff
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	235e      	movs	r3, #94	; 0x5e
 8005be6:	33ff      	adds	r3, #255	; 0xff
 8005be8:	60a3      	str	r3, [r4, #8]
 8005bea:	0023      	movs	r3, r4
 8005bec:	331c      	adds	r3, #28
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	23d0      	movs	r3, #208	; 0xd0
 8005bf2:	2700      	movs	r7, #0
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	a807      	add	r0, sp, #28
 8005c04:	7819      	ldrb	r1, [r3, #0]
 8005c06:	00bb      	lsls	r3, r7, #2
 8005c08:	2202      	movs	r2, #2
 8005c0a:	5818      	ldr	r0, [r3, r0]
 8005c0c:	f7ff fd5a 	bl	80056c4 <memchr>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d02b      	beq.n	8005c6c <_scanf_i+0xc0>
 8005c14:	2f01      	cmp	r7, #1
 8005c16:	d162      	bne.n	8005cde <_scanf_i+0x132>
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <_scanf_i+0x80>
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	6063      	str	r3, [r4, #4]
 8005c24:	33f9      	adds	r3, #249	; 0xf9
 8005c26:	33ff      	adds	r3, #255	; 0xff
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <_scanf_i+0x1f8>)
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	4013      	ands	r3, r2
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	60a2      	str	r2, [r4, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <_scanf_i+0xc0>
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	6032      	str	r2, [r6, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	9a00      	ldr	r2, [sp, #0]
 8005c48:	7013      	strb	r3, [r2, #0]
 8005c4a:	6873      	ldr	r3, [r6, #4]
 8005c4c:	1c55      	adds	r5, r2, #1
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	6073      	str	r3, [r6, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dc09      	bgt.n	8005c6a <_scanf_i+0xbe>
 8005c56:	23c0      	movs	r3, #192	; 0xc0
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	58e3      	ldr	r3, [r4, r3]
 8005c5c:	0031      	movs	r1, r6
 8005c5e:	9804      	ldr	r0, [sp, #16]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4798      	blx	r3
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d000      	beq.n	8005c6a <_scanf_i+0xbe>
 8005c68:	e080      	b.n	8005d6c <_scanf_i+0x1c0>
 8005c6a:	9500      	str	r5, [sp, #0]
 8005c6c:	3701      	adds	r7, #1
 8005c6e:	2f03      	cmp	r7, #3
 8005c70:	d1c6      	bne.n	8005c00 <_scanf_i+0x54>
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <_scanf_i+0xd0>
 8005c78:	330a      	adds	r3, #10
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	2700      	movs	r7, #0
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	6960      	ldr	r0, [r4, #20]
 8005c84:	1ac9      	subs	r1, r1, r3
 8005c86:	4b48      	ldr	r3, [pc, #288]	; (8005da8 <_scanf_i+0x1fc>)
 8005c88:	18c9      	adds	r1, r1, r3
 8005c8a:	f000 f891 	bl	8005db0 <__sccl>
 8005c8e:	9d00      	ldr	r5, [sp, #0]
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d041      	beq.n	8005d1e <_scanf_i+0x172>
 8005c9a:	6831      	ldr	r1, [r6, #0]
 8005c9c:	6963      	ldr	r3, [r4, #20]
 8005c9e:	7808      	ldrb	r0, [r1, #0]
 8005ca0:	5c1b      	ldrb	r3, [r3, r0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d03b      	beq.n	8005d1e <_scanf_i+0x172>
 8005ca6:	2830      	cmp	r0, #48	; 0x30
 8005ca8:	d129      	bne.n	8005cfe <_scanf_i+0x152>
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	421a      	tst	r2, r3
 8005cb0:	d025      	beq.n	8005cfe <_scanf_i+0x152>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	3701      	adds	r7, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <_scanf_i+0x11a>
 8005cba:	001a      	movs	r2, r3
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	6873      	ldr	r3, [r6, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	6073      	str	r3, [r6, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd1d      	ble.n	8005d0c <_scanf_i+0x160>
 8005cd0:	6833      	ldr	r3, [r6, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	68a3      	ldr	r3, [r4, #8]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	60a3      	str	r3, [r4, #8]
 8005cdc:	e7d8      	b.n	8005c90 <_scanf_i+0xe4>
 8005cde:	2f02      	cmp	r7, #2
 8005ce0:	d1a8      	bne.n	8005c34 <_scanf_i+0x88>
 8005ce2:	21c0      	movs	r1, #192	; 0xc0
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	00c9      	lsls	r1, r1, #3
 8005cea:	4011      	ands	r1, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4299      	cmp	r1, r3
 8005cf0:	d1bf      	bne.n	8005c72 <_scanf_i+0xc6>
 8005cf2:	3bf1      	subs	r3, #241	; 0xf1
 8005cf4:	3bff      	subs	r3, #255	; 0xff
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	33f0      	adds	r3, #240	; 0xf0
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	e799      	b.n	8005c32 <_scanf_i+0x86>
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <_scanf_i+0x200>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	780b      	ldrb	r3, [r1, #0]
 8005d06:	702b      	strb	r3, [r5, #0]
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7dc      	b.n	8005cc6 <_scanf_i+0x11a>
 8005d0c:	23c0      	movs	r3, #192	; 0xc0
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	58e3      	ldr	r3, [r4, r3]
 8005d12:	0031      	movs	r1, r6
 8005d14:	9804      	ldr	r0, [sp, #16]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4798      	blx	r3
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d0db      	beq.n	8005cd6 <_scanf_i+0x12a>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	05db      	lsls	r3, r3, #23
 8005d22:	d50e      	bpl.n	8005d42 <_scanf_i+0x196>
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	429d      	cmp	r5, r3
 8005d28:	d907      	bls.n	8005d3a <_scanf_i+0x18e>
 8005d2a:	23be      	movs	r3, #190	; 0xbe
 8005d2c:	3d01      	subs	r5, #1
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	7829      	ldrb	r1, [r5, #0]
 8005d32:	58e3      	ldr	r3, [r4, r3]
 8005d34:	0032      	movs	r2, r6
 8005d36:	9804      	ldr	r0, [sp, #16]
 8005d38:	4798      	blx	r3
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	d027      	beq.n	8005d92 <_scanf_i+0x1e6>
 8005d42:	2210      	movs	r2, #16
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	401a      	ands	r2, r3
 8005d48:	d11c      	bne.n	8005d84 <_scanf_i+0x1d8>
 8005d4a:	702a      	strb	r2, [r5, #0]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	9901      	ldr	r1, [sp, #4]
 8005d50:	9804      	ldr	r0, [sp, #16]
 8005d52:	9e05      	ldr	r6, [sp, #20]
 8005d54:	47b0      	blx	r6
 8005d56:	9b02      	ldr	r3, [sp, #8]
 8005d58:	6821      	ldr	r1, [r4, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	068a      	lsls	r2, r1, #26
 8005d5e:	d507      	bpl.n	8005d70 <_scanf_i+0x1c4>
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	9902      	ldr	r1, [sp, #8]
 8005d64:	600a      	str	r2, [r1, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6018      	str	r0, [r3, #0]
 8005d6a:	e008      	b.n	8005d7e <_scanf_i+0x1d2>
 8005d6c:	2700      	movs	r7, #0
 8005d6e:	e7d6      	b.n	8005d1e <_scanf_i+0x172>
 8005d70:	1d1a      	adds	r2, r3, #4
 8005d72:	07ce      	lsls	r6, r1, #31
 8005d74:	d5f5      	bpl.n	8005d62 <_scanf_i+0x1b6>
 8005d76:	9902      	ldr	r1, [sp, #8]
 8005d78:	600a      	str	r2, [r1, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	8018      	strh	r0, [r3, #0]
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60e3      	str	r3, [r4, #12]
 8005d84:	2000      	movs	r0, #0
 8005d86:	9b01      	ldr	r3, [sp, #4]
 8005d88:	1aed      	subs	r5, r5, r3
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	19ef      	adds	r7, r5, r7
 8005d8e:	19df      	adds	r7, r3, r7
 8005d90:	6127      	str	r7, [r4, #16]
 8005d92:	b00b      	add	sp, #44	; 0x2c
 8005d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	08006080 	.word	0x08006080
 8005d9c:	08005631 	.word	0x08005631
 8005da0:	08005f15 	.word	0x08005f15
 8005da4:	fffffaff 	.word	0xfffffaff
 8005da8:	08006231 	.word	0x08006231
 8005dac:	fffff6ff 	.word	0xfffff6ff

08005db0 <__sccl>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	780b      	ldrb	r3, [r1, #0]
 8005db4:	0005      	movs	r5, r0
 8005db6:	2b5e      	cmp	r3, #94	; 0x5e
 8005db8:	d018      	beq.n	8005dec <__sccl+0x3c>
 8005dba:	1c4a      	adds	r2, r1, #1
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	1c6c      	adds	r4, r5, #1
 8005dc2:	34ff      	adds	r4, #255	; 0xff
 8005dc4:	7001      	strb	r1, [r0, #0]
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d1fb      	bne.n	8005dc4 <__sccl+0x14>
 8005dcc:	1e50      	subs	r0, r2, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <__sccl+0x3a>
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	4041      	eors	r1, r0
 8005dd6:	54e9      	strb	r1, [r5, r3]
 8005dd8:	7814      	ldrb	r4, [r2, #0]
 8005dda:	1c50      	adds	r0, r2, #1
 8005ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8005dde:	d00c      	beq.n	8005dfa <__sccl+0x4a>
 8005de0:	2c5d      	cmp	r4, #93	; 0x5d
 8005de2:	d002      	beq.n	8005dea <__sccl+0x3a>
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	d105      	bne.n	8005df4 <__sccl+0x44>
 8005de8:	0010      	movs	r0, r2
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	1c8a      	adds	r2, r1, #2
 8005dee:	784b      	ldrb	r3, [r1, #1]
 8005df0:	2101      	movs	r1, #1
 8005df2:	e7e4      	b.n	8005dbe <__sccl+0xe>
 8005df4:	0023      	movs	r3, r4
 8005df6:	0002      	movs	r2, r0
 8005df8:	e7ed      	b.n	8005dd6 <__sccl+0x26>
 8005dfa:	7856      	ldrb	r6, [r2, #1]
 8005dfc:	2e5d      	cmp	r6, #93	; 0x5d
 8005dfe:	d0f9      	beq.n	8005df4 <__sccl+0x44>
 8005e00:	42b3      	cmp	r3, r6
 8005e02:	dcf7      	bgt.n	8005df4 <__sccl+0x44>
 8005e04:	3202      	adds	r2, #2
 8005e06:	3301      	adds	r3, #1
 8005e08:	54e9      	strb	r1, [r5, r3]
 8005e0a:	429e      	cmp	r6, r3
 8005e0c:	dcfb      	bgt.n	8005e06 <__sccl+0x56>
 8005e0e:	e7e3      	b.n	8005dd8 <__sccl+0x28>

08005e10 <_strtol_l.isra.0>:
 8005e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e12:	001f      	movs	r7, r3
 8005e14:	000e      	movs	r6, r1
 8005e16:	b087      	sub	sp, #28
 8005e18:	9005      	str	r0, [sp, #20]
 8005e1a:	9101      	str	r1, [sp, #4]
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e20:	7834      	ldrb	r4, [r6, #0]
 8005e22:	f7ff fc2b 	bl	800567c <__locale_ctype_ptr_l>
 8005e26:	2208      	movs	r2, #8
 8005e28:	1900      	adds	r0, r0, r4
 8005e2a:	7843      	ldrb	r3, [r0, #1]
 8005e2c:	1c75      	adds	r5, r6, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d136      	bne.n	8005ea0 <_strtol_l.isra.0+0x90>
 8005e32:	2c2d      	cmp	r4, #45	; 0x2d
 8005e34:	d136      	bne.n	8005ea4 <_strtol_l.isra.0+0x94>
 8005e36:	1cb5      	adds	r5, r6, #2
 8005e38:	7874      	ldrb	r4, [r6, #1]
 8005e3a:	2601      	movs	r6, #1
 8005e3c:	2f00      	cmp	r7, #0
 8005e3e:	d062      	beq.n	8005f06 <_strtol_l.isra.0+0xf6>
 8005e40:	2f10      	cmp	r7, #16
 8005e42:	d109      	bne.n	8005e58 <_strtol_l.isra.0+0x48>
 8005e44:	2c30      	cmp	r4, #48	; 0x30
 8005e46:	d107      	bne.n	8005e58 <_strtol_l.isra.0+0x48>
 8005e48:	2220      	movs	r2, #32
 8005e4a:	782b      	ldrb	r3, [r5, #0]
 8005e4c:	4393      	bics	r3, r2
 8005e4e:	2b58      	cmp	r3, #88	; 0x58
 8005e50:	d154      	bne.n	8005efc <_strtol_l.isra.0+0xec>
 8005e52:	2710      	movs	r7, #16
 8005e54:	786c      	ldrb	r4, [r5, #1]
 8005e56:	3502      	adds	r5, #2
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <_strtol_l.isra.0+0x100>)
 8005e5a:	0039      	movs	r1, r7
 8005e5c:	18f3      	adds	r3, r6, r3
 8005e5e:	0018      	movs	r0, r3
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	f7fa f9e9 	bl	8000238 <__aeabi_uidivmod>
 8005e66:	9104      	str	r1, [sp, #16]
 8005e68:	2101      	movs	r1, #1
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4249      	negs	r1, r1
 8005e6e:	0002      	movs	r2, r0
 8005e70:	468c      	mov	ip, r1
 8005e72:	0018      	movs	r0, r3
 8005e74:	0021      	movs	r1, r4
 8005e76:	3930      	subs	r1, #48	; 0x30
 8005e78:	2909      	cmp	r1, #9
 8005e7a:	d81a      	bhi.n	8005eb2 <_strtol_l.isra.0+0xa2>
 8005e7c:	000c      	movs	r4, r1
 8005e7e:	42a7      	cmp	r7, r4
 8005e80:	dd23      	ble.n	8005eca <_strtol_l.isra.0+0xba>
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	d009      	beq.n	8005e9a <_strtol_l.isra.0+0x8a>
 8005e86:	4663      	mov	r3, ip
 8005e88:	4282      	cmp	r2, r0
 8005e8a:	d306      	bcc.n	8005e9a <_strtol_l.isra.0+0x8a>
 8005e8c:	d102      	bne.n	8005e94 <_strtol_l.isra.0+0x84>
 8005e8e:	9904      	ldr	r1, [sp, #16]
 8005e90:	42a1      	cmp	r1, r4
 8005e92:	db02      	blt.n	8005e9a <_strtol_l.isra.0+0x8a>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4378      	muls	r0, r7
 8005e98:	1820      	adds	r0, r4, r0
 8005e9a:	782c      	ldrb	r4, [r5, #0]
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e7e9      	b.n	8005e74 <_strtol_l.isra.0+0x64>
 8005ea0:	002e      	movs	r6, r5
 8005ea2:	e7bc      	b.n	8005e1e <_strtol_l.isra.0+0xe>
 8005ea4:	2c2b      	cmp	r4, #43	; 0x2b
 8005ea6:	d001      	beq.n	8005eac <_strtol_l.isra.0+0x9c>
 8005ea8:	001e      	movs	r6, r3
 8005eaa:	e7c7      	b.n	8005e3c <_strtol_l.isra.0+0x2c>
 8005eac:	1cb5      	adds	r5, r6, #2
 8005eae:	7874      	ldrb	r4, [r6, #1]
 8005eb0:	e7fa      	b.n	8005ea8 <_strtol_l.isra.0+0x98>
 8005eb2:	0021      	movs	r1, r4
 8005eb4:	3941      	subs	r1, #65	; 0x41
 8005eb6:	2919      	cmp	r1, #25
 8005eb8:	d801      	bhi.n	8005ebe <_strtol_l.isra.0+0xae>
 8005eba:	3c37      	subs	r4, #55	; 0x37
 8005ebc:	e7df      	b.n	8005e7e <_strtol_l.isra.0+0x6e>
 8005ebe:	0021      	movs	r1, r4
 8005ec0:	3961      	subs	r1, #97	; 0x61
 8005ec2:	2919      	cmp	r1, #25
 8005ec4:	d801      	bhi.n	8005eca <_strtol_l.isra.0+0xba>
 8005ec6:	3c57      	subs	r4, #87	; 0x57
 8005ec8:	e7d9      	b.n	8005e7e <_strtol_l.isra.0+0x6e>
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	d108      	bne.n	8005ee0 <_strtol_l.isra.0+0xd0>
 8005ece:	9a05      	ldr	r2, [sp, #20]
 8005ed0:	3323      	adds	r3, #35	; 0x23
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	9803      	ldr	r0, [sp, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <_strtol_l.isra.0+0xe0>
 8005edc:	b007      	add	sp, #28
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	2e00      	cmp	r6, #0
 8005ee2:	d000      	beq.n	8005ee6 <_strtol_l.isra.0+0xd6>
 8005ee4:	4240      	negs	r0, r0
 8005ee6:	9a02      	ldr	r2, [sp, #8]
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d0f7      	beq.n	8005edc <_strtol_l.isra.0+0xcc>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <_strtol_l.isra.0+0xe4>
 8005ef0:	1e6b      	subs	r3, r5, #1
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	9a01      	ldr	r2, [sp, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e7ef      	b.n	8005edc <_strtol_l.isra.0+0xcc>
 8005efc:	2430      	movs	r4, #48	; 0x30
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	d1aa      	bne.n	8005e58 <_strtol_l.isra.0+0x48>
 8005f02:	2708      	movs	r7, #8
 8005f04:	e7a8      	b.n	8005e58 <_strtol_l.isra.0+0x48>
 8005f06:	2c30      	cmp	r4, #48	; 0x30
 8005f08:	d09e      	beq.n	8005e48 <_strtol_l.isra.0+0x38>
 8005f0a:	270a      	movs	r7, #10
 8005f0c:	e7a4      	b.n	8005e58 <_strtol_l.isra.0+0x48>
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	7fffffff 	.word	0x7fffffff

08005f14 <_strtol_r>:
 8005f14:	b513      	push	{r0, r1, r4, lr}
 8005f16:	4c05      	ldr	r4, [pc, #20]	; (8005f2c <_strtol_r+0x18>)
 8005f18:	6824      	ldr	r4, [r4, #0]
 8005f1a:	6a24      	ldr	r4, [r4, #32]
 8005f1c:	2c00      	cmp	r4, #0
 8005f1e:	d100      	bne.n	8005f22 <_strtol_r+0xe>
 8005f20:	4c03      	ldr	r4, [pc, #12]	; (8005f30 <_strtol_r+0x1c>)
 8005f22:	9400      	str	r4, [sp, #0]
 8005f24:	f7ff ff74 	bl	8005e10 <_strtol_l.isra.0>
 8005f28:	bd16      	pop	{r1, r2, r4, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	20000008 	.word	0x20000008
 8005f30:	200000d0 	.word	0x200000d0

08005f34 <__submore>:
 8005f34:	000b      	movs	r3, r1
 8005f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f38:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005f3a:	3344      	adds	r3, #68	; 0x44
 8005f3c:	000c      	movs	r4, r1
 8005f3e:	429d      	cmp	r5, r3
 8005f40:	d11c      	bne.n	8005f7c <__submore+0x48>
 8005f42:	2680      	movs	r6, #128	; 0x80
 8005f44:	00f6      	lsls	r6, r6, #3
 8005f46:	0031      	movs	r1, r6
 8005f48:	f7fe fbd4 	bl	80046f4 <_malloc_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d102      	bne.n	8005f56 <__submore+0x22>
 8005f50:	2001      	movs	r0, #1
 8005f52:	4240      	negs	r0, r0
 8005f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f56:	0023      	movs	r3, r4
 8005f58:	6360      	str	r0, [r4, #52]	; 0x34
 8005f5a:	63a6      	str	r6, [r4, #56]	; 0x38
 8005f5c:	3346      	adds	r3, #70	; 0x46
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <__submore+0x70>)
 8005f62:	54c2      	strb	r2, [r0, r3]
 8005f64:	0023      	movs	r3, r4
 8005f66:	3345      	adds	r3, #69	; 0x45
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <__submore+0x74>)
 8005f6c:	54c2      	strb	r2, [r0, r3]
 8005f6e:	782a      	ldrb	r2, [r5, #0]
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <__submore+0x78>)
 8005f72:	54c2      	strb	r2, [r0, r3]
 8005f74:	18c0      	adds	r0, r0, r3
 8005f76:	6020      	str	r0, [r4, #0]
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e7eb      	b.n	8005f54 <__submore+0x20>
 8005f7c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005f7e:	0029      	movs	r1, r5
 8005f80:	0073      	lsls	r3, r6, #1
 8005f82:	001a      	movs	r2, r3
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	f7ff fbbb 	bl	8005700 <_realloc_r>
 8005f8a:	1e05      	subs	r5, r0, #0
 8005f8c:	d0e0      	beq.n	8005f50 <__submore+0x1c>
 8005f8e:	1987      	adds	r7, r0, r6
 8005f90:	0001      	movs	r1, r0
 8005f92:	0032      	movs	r2, r6
 8005f94:	0038      	movs	r0, r7
 8005f96:	f7fe f8cb 	bl	8004130 <memcpy>
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	6027      	str	r7, [r4, #0]
 8005f9e:	6365      	str	r5, [r4, #52]	; 0x34
 8005fa0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fa2:	e7e9      	b.n	8005f78 <__submore+0x44>
 8005fa4:	000003ff 	.word	0x000003ff
 8005fa8:	000003fe 	.word	0x000003fe
 8005fac:	000003fd 	.word	0x000003fd

08005fb0 <__ascii_wctomb>:
 8005fb0:	1e0b      	subs	r3, r1, #0
 8005fb2:	d004      	beq.n	8005fbe <__ascii_wctomb+0xe>
 8005fb4:	2aff      	cmp	r2, #255	; 0xff
 8005fb6:	d904      	bls.n	8005fc2 <__ascii_wctomb+0x12>
 8005fb8:	238a      	movs	r3, #138	; 0x8a
 8005fba:	6003      	str	r3, [r0, #0]
 8005fbc:	3b8b      	subs	r3, #139	; 0x8b
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	4770      	bx	lr
 8005fc2:	700a      	strb	r2, [r1, #0]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e7fa      	b.n	8005fbe <__ascii_wctomb+0xe>

08005fc8 <_malloc_usable_size_r>:
 8005fc8:	1f0b      	subs	r3, r1, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	1f18      	subs	r0, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da01      	bge.n	8005fd6 <_malloc_usable_size_r+0xe>
 8005fd2:	580b      	ldr	r3, [r1, r0]
 8005fd4:	18c0      	adds	r0, r0, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
